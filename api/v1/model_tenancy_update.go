/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the TenancyUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenancyUpdate{}

// TenancyUpdate A tenancy update is a change to a tenancy contract between one or more tenants and a property manager.
type TenancyUpdate struct {
	// generated unique ID
	Id *string `json:"id,omitempty"`
	// The timestamp of when the tenant was created
	CreatedAt *int64 `json:"created_at,omitempty"`
	// The timestamp of when the tenant was last updated
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// The ID of the tenancy that this update is for
	TenancyId *string `json:"tenancy_id,omitempty"`
	// The date when the update will enter into force
	EntryIntoForce *int64    `json:"entry_into_force,omitempty"`
	NewRent        *RentData `json:"new_rent,omitempty"`
	// Optional changes to the tenants.
	TenantChanges []TenantChange `json:"tenant_changes,omitempty"`
}

// NewTenancyUpdate instantiates a new TenancyUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenancyUpdate() *TenancyUpdate {
	this := TenancyUpdate{}
	return &this
}

// NewTenancyUpdateWithDefaults instantiates a new TenancyUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenancyUpdateWithDefaults() *TenancyUpdate {
	this := TenancyUpdate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TenancyUpdate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenancyUpdate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TenancyUpdate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TenancyUpdate) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TenancyUpdate) GetCreatedAt() int64 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenancyUpdate) GetCreatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TenancyUpdate) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *TenancyUpdate) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TenancyUpdate) GetUpdatedAt() int64 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenancyUpdate) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TenancyUpdate) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *TenancyUpdate) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetTenancyId returns the TenancyId field value if set, zero value otherwise.
func (o *TenancyUpdate) GetTenancyId() string {
	if o == nil || IsNil(o.TenancyId) {
		var ret string
		return ret
	}
	return *o.TenancyId
}

// GetTenancyIdOk returns a tuple with the TenancyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenancyUpdate) GetTenancyIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenancyId) {
		return nil, false
	}
	return o.TenancyId, true
}

// HasTenancyId returns a boolean if a field has been set.
func (o *TenancyUpdate) HasTenancyId() bool {
	if o != nil && !IsNil(o.TenancyId) {
		return true
	}

	return false
}

// SetTenancyId gets a reference to the given string and assigns it to the TenancyId field.
func (o *TenancyUpdate) SetTenancyId(v string) {
	o.TenancyId = &v
}

// GetEntryIntoForce returns the EntryIntoForce field value if set, zero value otherwise.
func (o *TenancyUpdate) GetEntryIntoForce() int64 {
	if o == nil || IsNil(o.EntryIntoForce) {
		var ret int64
		return ret
	}
	return *o.EntryIntoForce
}

// GetEntryIntoForceOk returns a tuple with the EntryIntoForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenancyUpdate) GetEntryIntoForceOk() (*int64, bool) {
	if o == nil || IsNil(o.EntryIntoForce) {
		return nil, false
	}
	return o.EntryIntoForce, true
}

// HasEntryIntoForce returns a boolean if a field has been set.
func (o *TenancyUpdate) HasEntryIntoForce() bool {
	if o != nil && !IsNil(o.EntryIntoForce) {
		return true
	}

	return false
}

// SetEntryIntoForce gets a reference to the given int64 and assigns it to the EntryIntoForce field.
func (o *TenancyUpdate) SetEntryIntoForce(v int64) {
	o.EntryIntoForce = &v
}

// GetNewRent returns the NewRent field value if set, zero value otherwise.
func (o *TenancyUpdate) GetNewRent() RentData {
	if o == nil || IsNil(o.NewRent) {
		var ret RentData
		return ret
	}
	return *o.NewRent
}

// GetNewRentOk returns a tuple with the NewRent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenancyUpdate) GetNewRentOk() (*RentData, bool) {
	if o == nil || IsNil(o.NewRent) {
		return nil, false
	}
	return o.NewRent, true
}

// HasNewRent returns a boolean if a field has been set.
func (o *TenancyUpdate) HasNewRent() bool {
	if o != nil && !IsNil(o.NewRent) {
		return true
	}

	return false
}

// SetNewRent gets a reference to the given RentData and assigns it to the NewRent field.
func (o *TenancyUpdate) SetNewRent(v RentData) {
	o.NewRent = &v
}

// GetTenantChanges returns the TenantChanges field value if set, zero value otherwise.
func (o *TenancyUpdate) GetTenantChanges() []TenantChange {
	if o == nil || IsNil(o.TenantChanges) {
		var ret []TenantChange
		return ret
	}
	return o.TenantChanges
}

// GetTenantChangesOk returns a tuple with the TenantChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenancyUpdate) GetTenantChangesOk() ([]TenantChange, bool) {
	if o == nil || IsNil(o.TenantChanges) {
		return nil, false
	}
	return o.TenantChanges, true
}

// HasTenantChanges returns a boolean if a field has been set.
func (o *TenancyUpdate) HasTenantChanges() bool {
	if o != nil && !IsNil(o.TenantChanges) {
		return true
	}

	return false
}

// SetTenantChanges gets a reference to the given []TenantChange and assigns it to the TenantChanges field.
func (o *TenancyUpdate) SetTenantChanges(v []TenantChange) {
	o.TenantChanges = v
}

func (o TenancyUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenancyUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.TenancyId) {
		toSerialize["tenancy_id"] = o.TenancyId
	}
	if !IsNil(o.EntryIntoForce) {
		toSerialize["entry_into_force"] = o.EntryIntoForce
	}
	if !IsNil(o.NewRent) {
		toSerialize["new_rent"] = o.NewRent
	}
	if !IsNil(o.TenantChanges) {
		toSerialize["tenant_changes"] = o.TenantChanges
	}
	return toSerialize, nil
}

type NullableTenancyUpdate struct {
	value *TenancyUpdate
	isSet bool
}

func (v NullableTenancyUpdate) Get() *TenancyUpdate {
	return v.value
}

func (v *NullableTenancyUpdate) Set(val *TenancyUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTenancyUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTenancyUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenancyUpdate(val *TenancyUpdate) *NullableTenancyUpdate {
	return &NullableTenancyUpdate{value: val, isSet: true}
}

func (v NullableTenancyUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenancyUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
