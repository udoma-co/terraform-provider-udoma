/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// MeterReading a single reading of a meter
type MeterReading struct {
	Id *string `json:"id,omitempty"`
	// The timestamp of when the meter reading was created
	CreatedAt *int64 `json:"created_at,omitempty"`
	// The timestamp of when the meter reading was last updated
	UpdatedAt     *int64       `json:"updated_at,omitempty"`
	MeterRef      *string      `json:"meter_ref,omitempty"`
	Date          *int64       `json:"date,omitempty"`
	Value         *FloatNumber `json:"value,omitempty"`
	ReporterRef   *string      `json:"reporter_ref,omitempty"`
	AttachmentRef *string      `json:"attachment_ref,omitempty"`
}

// NewMeterReading instantiates a new MeterReading object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeterReading() *MeterReading {
	this := MeterReading{}
	return &this
}

// NewMeterReadingWithDefaults instantiates a new MeterReading object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeterReadingWithDefaults() *MeterReading {
	this := MeterReading{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MeterReading) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterReading) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MeterReading) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MeterReading) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MeterReading) GetCreatedAt() int64 {
	if o == nil || o.CreatedAt == nil {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterReading) GetCreatedAtOk() (*int64, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MeterReading) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *MeterReading) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *MeterReading) GetUpdatedAt() int64 {
	if o == nil || o.UpdatedAt == nil {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterReading) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *MeterReading) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *MeterReading) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetMeterRef returns the MeterRef field value if set, zero value otherwise.
func (o *MeterReading) GetMeterRef() string {
	if o == nil || o.MeterRef == nil {
		var ret string
		return ret
	}
	return *o.MeterRef
}

// GetMeterRefOk returns a tuple with the MeterRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterReading) GetMeterRefOk() (*string, bool) {
	if o == nil || o.MeterRef == nil {
		return nil, false
	}
	return o.MeterRef, true
}

// HasMeterRef returns a boolean if a field has been set.
func (o *MeterReading) HasMeterRef() bool {
	if o != nil && o.MeterRef != nil {
		return true
	}

	return false
}

// SetMeterRef gets a reference to the given string and assigns it to the MeterRef field.
func (o *MeterReading) SetMeterRef(v string) {
	o.MeterRef = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *MeterReading) GetDate() int64 {
	if o == nil || o.Date == nil {
		var ret int64
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterReading) GetDateOk() (*int64, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *MeterReading) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given int64 and assigns it to the Date field.
func (o *MeterReading) SetDate(v int64) {
	o.Date = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MeterReading) GetValue() FloatNumber {
	if o == nil || o.Value == nil {
		var ret FloatNumber
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterReading) GetValueOk() (*FloatNumber, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MeterReading) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given FloatNumber and assigns it to the Value field.
func (o *MeterReading) SetValue(v FloatNumber) {
	o.Value = &v
}

// GetReporterRef returns the ReporterRef field value if set, zero value otherwise.
func (o *MeterReading) GetReporterRef() string {
	if o == nil || o.ReporterRef == nil {
		var ret string
		return ret
	}
	return *o.ReporterRef
}

// GetReporterRefOk returns a tuple with the ReporterRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterReading) GetReporterRefOk() (*string, bool) {
	if o == nil || o.ReporterRef == nil {
		return nil, false
	}
	return o.ReporterRef, true
}

// HasReporterRef returns a boolean if a field has been set.
func (o *MeterReading) HasReporterRef() bool {
	if o != nil && o.ReporterRef != nil {
		return true
	}

	return false
}

// SetReporterRef gets a reference to the given string and assigns it to the ReporterRef field.
func (o *MeterReading) SetReporterRef(v string) {
	o.ReporterRef = &v
}

// GetAttachmentRef returns the AttachmentRef field value if set, zero value otherwise.
func (o *MeterReading) GetAttachmentRef() string {
	if o == nil || o.AttachmentRef == nil {
		var ret string
		return ret
	}
	return *o.AttachmentRef
}

// GetAttachmentRefOk returns a tuple with the AttachmentRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterReading) GetAttachmentRefOk() (*string, bool) {
	if o == nil || o.AttachmentRef == nil {
		return nil, false
	}
	return o.AttachmentRef, true
}

// HasAttachmentRef returns a boolean if a field has been set.
func (o *MeterReading) HasAttachmentRef() bool {
	if o != nil && o.AttachmentRef != nil {
		return true
	}

	return false
}

// SetAttachmentRef gets a reference to the given string and assigns it to the AttachmentRef field.
func (o *MeterReading) SetAttachmentRef(v string) {
	o.AttachmentRef = &v
}

func (o MeterReading) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.MeterRef != nil {
		toSerialize["meter_ref"] = o.MeterRef
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ReporterRef != nil {
		toSerialize["reporter_ref"] = o.ReporterRef
	}
	if o.AttachmentRef != nil {
		toSerialize["attachment_ref"] = o.AttachmentRef
	}
	return json.Marshal(toSerialize)
}

type NullableMeterReading struct {
	value *MeterReading
	isSet bool
}

func (v NullableMeterReading) Get() *MeterReading {
	return v.value
}

func (v *NullableMeterReading) Set(val *MeterReading) {
	v.value = val
	v.isSet = true
}

func (v NullableMeterReading) IsSet() bool {
	return v.isSet
}

func (v *NullableMeterReading) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeterReading(val *MeterReading) *NullableMeterReading {
	return &NullableMeterReading{value: val, isSet: true}
}

func (v NullableMeterReading) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeterReading) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
