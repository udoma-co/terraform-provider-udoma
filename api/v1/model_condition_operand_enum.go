/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// ConditionOperandEnum the model 'ConditionOperandEnum'
type ConditionOperandEnum string

// List of ConditionOperandEnum
const (
	CONDITIONOPERANDENUM_EQ  ConditionOperandEnum = "eq"
	CONDITIONOPERANDENUM_NE  ConditionOperandEnum = "ne"
	CONDITIONOPERANDENUM_GT  ConditionOperandEnum = "gt"
	CONDITIONOPERANDENUM_GTE ConditionOperandEnum = "gte"
	CONDITIONOPERANDENUM_LT  ConditionOperandEnum = "lt"
	CONDITIONOPERANDENUM_LTE ConditionOperandEnum = "lte"
)

// All allowed values of ConditionOperandEnum enum
var AllowedConditionOperandEnumEnumValues = []ConditionOperandEnum{
	"eq",
	"ne",
	"gt",
	"gte",
	"lt",
	"lte",
}

func (v *ConditionOperandEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConditionOperandEnum(value)
	for _, existing := range AllowedConditionOperandEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConditionOperandEnum", value)
}

// NewConditionOperandEnumFromValue returns a pointer to a valid ConditionOperandEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConditionOperandEnumFromValue(v string) (*ConditionOperandEnum, error) {
	ev := ConditionOperandEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConditionOperandEnum: valid values are %v", v, AllowedConditionOperandEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConditionOperandEnum) IsValid() bool {
	for _, existing := range AllowedConditionOperandEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConditionOperandEnum value
func (v ConditionOperandEnum) Ptr() *ConditionOperandEnum {
	return &v
}

type NullableConditionOperandEnum struct {
	value *ConditionOperandEnum
	isSet bool
}

func (v NullableConditionOperandEnum) Get() *ConditionOperandEnum {
	return v.value
}

func (v *NullableConditionOperandEnum) Set(val *ConditionOperandEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionOperandEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionOperandEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionOperandEnum(val *ConditionOperandEnum) *NullableConditionOperandEnum {
	return &NullableConditionOperandEnum{value: val, isSet: true}
}

func (v NullableConditionOperandEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionOperandEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
