/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateTenancyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTenancyRequest{}

// UpdateTenancyRequest Request issued by a property manager to update the initial tenancy infomation for a property (the contract data).
type UpdateTenancyRequest struct {
	// The timestamp of when the tenancy has started
	StartDate int64 `json:"start_date"`
	// The timestamp of when the tenancy has ended or is scheduled to end (required depending on the duration_type)
	EndDate     *int64      `json:"end_date,omitempty"`
	RentDetails RentDetails `json:"rent_details"`
	// Options to extend the contract if it's fixed term.
	ExtensionOptions []int64 `json:"extension_options,omitempty"`
}

type _UpdateTenancyRequest UpdateTenancyRequest

// NewUpdateTenancyRequest instantiates a new UpdateTenancyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTenancyRequest(startDate int64, rentDetails RentDetails) *UpdateTenancyRequest {
	this := UpdateTenancyRequest{}
	this.StartDate = startDate
	this.RentDetails = rentDetails
	return &this
}

// NewUpdateTenancyRequestWithDefaults instantiates a new UpdateTenancyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTenancyRequestWithDefaults() *UpdateTenancyRequest {
	this := UpdateTenancyRequest{}
	return &this
}

// GetStartDate returns the StartDate field value
func (o *UpdateTenancyRequest) GetStartDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *UpdateTenancyRequest) GetStartDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *UpdateTenancyRequest) SetStartDate(v int64) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *UpdateTenancyRequest) GetEndDate() int64 {
	if o == nil || IsNil(o.EndDate) {
		var ret int64
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTenancyRequest) GetEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *UpdateTenancyRequest) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int64 and assigns it to the EndDate field.
func (o *UpdateTenancyRequest) SetEndDate(v int64) {
	o.EndDate = &v
}

// GetRentDetails returns the RentDetails field value
func (o *UpdateTenancyRequest) GetRentDetails() RentDetails {
	if o == nil {
		var ret RentDetails
		return ret
	}

	return o.RentDetails
}

// GetRentDetailsOk returns a tuple with the RentDetails field value
// and a boolean to check if the value has been set.
func (o *UpdateTenancyRequest) GetRentDetailsOk() (*RentDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RentDetails, true
}

// SetRentDetails sets field value
func (o *UpdateTenancyRequest) SetRentDetails(v RentDetails) {
	o.RentDetails = v
}

// GetExtensionOptions returns the ExtensionOptions field value if set, zero value otherwise.
func (o *UpdateTenancyRequest) GetExtensionOptions() []int64 {
	if o == nil || IsNil(o.ExtensionOptions) {
		var ret []int64
		return ret
	}
	return o.ExtensionOptions
}

// GetExtensionOptionsOk returns a tuple with the ExtensionOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTenancyRequest) GetExtensionOptionsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ExtensionOptions) {
		return nil, false
	}
	return o.ExtensionOptions, true
}

// HasExtensionOptions returns a boolean if a field has been set.
func (o *UpdateTenancyRequest) HasExtensionOptions() bool {
	if o != nil && !IsNil(o.ExtensionOptions) {
		return true
	}

	return false
}

// SetExtensionOptions gets a reference to the given []int64 and assigns it to the ExtensionOptions field.
func (o *UpdateTenancyRequest) SetExtensionOptions(v []int64) {
	o.ExtensionOptions = v
}

func (o UpdateTenancyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTenancyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start_date"] = o.StartDate
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	toSerialize["rent_details"] = o.RentDetails
	if !IsNil(o.ExtensionOptions) {
		toSerialize["extension_options"] = o.ExtensionOptions
	}
	return toSerialize, nil
}

func (o *UpdateTenancyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"start_date",
		"rent_details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateTenancyRequest := _UpdateTenancyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateTenancyRequest)

	if err != nil {
		return err
	}

	*o = UpdateTenancyRequest(varUpdateTenancyRequest)

	return err
}

type NullableUpdateTenancyRequest struct {
	value *UpdateTenancyRequest
	isSet bool
}

func (v NullableUpdateTenancyRequest) Get() *UpdateTenancyRequest {
	return v.value
}

func (v *NullableUpdateTenancyRequest) Set(val *UpdateTenancyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTenancyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTenancyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTenancyRequest(val *UpdateTenancyRequest) *NullableUpdateTenancyRequest {
	return &NullableUpdateTenancyRequest{value: val, isSet: true}
}

func (v NullableUpdateTenancyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTenancyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
