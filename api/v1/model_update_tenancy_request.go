/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the UpdateTenancyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTenancyRequest{}

// UpdateTenancyRequest Request issued by a property manager to update a tenancy for a property
type UpdateTenancyRequest struct {
	// Indicates whether the tenancy is active. Active tenancies indicate the current contract between the tenants and the property manager.
	Active *bool `json:"active,omitempty"`
	// The timestamp of when the tenancy has started
	StartDate *int64 `json:"start_date,omitempty"`
	// The timestamp of when the tenancy has ended or is scheduled to end (optional)
	EndDate         *int64                   `json:"end_date,omitempty"`
	ContractType    *TenancyContractTypeEnum `json:"contract_type,omitempty"`
	RentInformation *RentInformation         `json:"rent_information,omitempty"`
}

// NewUpdateTenancyRequest instantiates a new UpdateTenancyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTenancyRequest() *UpdateTenancyRequest {
	this := UpdateTenancyRequest{}
	return &this
}

// NewUpdateTenancyRequestWithDefaults instantiates a new UpdateTenancyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTenancyRequestWithDefaults() *UpdateTenancyRequest {
	this := UpdateTenancyRequest{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *UpdateTenancyRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTenancyRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *UpdateTenancyRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *UpdateTenancyRequest) SetActive(v bool) {
	o.Active = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *UpdateTenancyRequest) GetStartDate() int64 {
	if o == nil || IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTenancyRequest) GetStartDateOk() (*int64, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *UpdateTenancyRequest) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *UpdateTenancyRequest) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *UpdateTenancyRequest) GetEndDate() int64 {
	if o == nil || IsNil(o.EndDate) {
		var ret int64
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTenancyRequest) GetEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *UpdateTenancyRequest) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int64 and assigns it to the EndDate field.
func (o *UpdateTenancyRequest) SetEndDate(v int64) {
	o.EndDate = &v
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *UpdateTenancyRequest) GetContractType() TenancyContractTypeEnum {
	if o == nil || IsNil(o.ContractType) {
		var ret TenancyContractTypeEnum
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTenancyRequest) GetContractTypeOk() (*TenancyContractTypeEnum, bool) {
	if o == nil || IsNil(o.ContractType) {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *UpdateTenancyRequest) HasContractType() bool {
	if o != nil && !IsNil(o.ContractType) {
		return true
	}

	return false
}

// SetContractType gets a reference to the given TenancyContractTypeEnum and assigns it to the ContractType field.
func (o *UpdateTenancyRequest) SetContractType(v TenancyContractTypeEnum) {
	o.ContractType = &v
}

// GetRentInformation returns the RentInformation field value if set, zero value otherwise.
func (o *UpdateTenancyRequest) GetRentInformation() RentInformation {
	if o == nil || IsNil(o.RentInformation) {
		var ret RentInformation
		return ret
	}
	return *o.RentInformation
}

// GetRentInformationOk returns a tuple with the RentInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTenancyRequest) GetRentInformationOk() (*RentInformation, bool) {
	if o == nil || IsNil(o.RentInformation) {
		return nil, false
	}
	return o.RentInformation, true
}

// HasRentInformation returns a boolean if a field has been set.
func (o *UpdateTenancyRequest) HasRentInformation() bool {
	if o != nil && !IsNil(o.RentInformation) {
		return true
	}

	return false
}

// SetRentInformation gets a reference to the given RentInformation and assigns it to the RentInformation field.
func (o *UpdateTenancyRequest) SetRentInformation(v RentInformation) {
	o.RentInformation = &v
}

func (o UpdateTenancyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTenancyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.ContractType) {
		toSerialize["contract_type"] = o.ContractType
	}
	if !IsNil(o.RentInformation) {
		toSerialize["rent_information"] = o.RentInformation
	}
	return toSerialize, nil
}

type NullableUpdateTenancyRequest struct {
	value *UpdateTenancyRequest
	isSet bool
}

func (v NullableUpdateTenancyRequest) Get() *UpdateTenancyRequest {
	return v.value
}

func (v *NullableUpdateTenancyRequest) Set(val *UpdateTenancyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTenancyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTenancyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTenancyRequest(val *UpdateTenancyRequest) *NullableUpdateTenancyRequest {
	return &NullableUpdateTenancyRequest{value: val, isSet: true}
}

func (v NullableUpdateTenancyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTenancyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
