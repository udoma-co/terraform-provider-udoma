/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FloatNumber struct for FloatNumber
type FloatNumber struct {
	// the integer value (the part before the decimal point)
	I *int32 `json:"i,omitempty"`
	// the fractiopnal value (the part after the decimal point)
	F *int32 `json:"f,omitempty"`
}

// NewFloatNumber instantiates a new FloatNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFloatNumber() *FloatNumber {
	this := FloatNumber{}
	return &this
}

// NewFloatNumberWithDefaults instantiates a new FloatNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFloatNumberWithDefaults() *FloatNumber {
	this := FloatNumber{}
	return &this
}

// GetI returns the I field value if set, zero value otherwise.
func (o *FloatNumber) GetI() int32 {
	if o == nil || o.I == nil {
		var ret int32
		return ret
	}
	return *o.I
}

// GetIOk returns a tuple with the I field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatNumber) GetIOk() (*int32, bool) {
	if o == nil || o.I == nil {
		return nil, false
	}
	return o.I, true
}

// HasI returns a boolean if a field has been set.
func (o *FloatNumber) HasI() bool {
	if o != nil && o.I != nil {
		return true
	}

	return false
}

// SetI gets a reference to the given int32 and assigns it to the I field.
func (o *FloatNumber) SetI(v int32) {
	o.I = &v
}

// GetF returns the F field value if set, zero value otherwise.
func (o *FloatNumber) GetF() int32 {
	if o == nil || o.F == nil {
		var ret int32
		return ret
	}
	return *o.F
}

// GetFOk returns a tuple with the F field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatNumber) GetFOk() (*int32, bool) {
	if o == nil || o.F == nil {
		return nil, false
	}
	return o.F, true
}

// HasF returns a boolean if a field has been set.
func (o *FloatNumber) HasF() bool {
	if o != nil && o.F != nil {
		return true
	}

	return false
}

// SetF gets a reference to the given int32 and assigns it to the F field.
func (o *FloatNumber) SetF(v int32) {
	o.F = &v
}

func (o FloatNumber) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.I != nil {
		toSerialize["i"] = o.I
	}
	if o.F != nil {
		toSerialize["f"] = o.F
	}
	return json.Marshal(toSerialize)
}

type NullableFloatNumber struct {
	value *FloatNumber
	isSet bool
}

func (v NullableFloatNumber) Get() *FloatNumber {
	return v.value
}

func (v *NullableFloatNumber) Set(val *FloatNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableFloatNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableFloatNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFloatNumber(val *FloatNumber) *NullableFloatNumber {
	return &NullableFloatNumber{value: val, isSet: true}
}

func (v NullableFloatNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFloatNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
