/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CaseFeedbackConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseFeedbackConfig{}

// CaseFeedbackConfig struct for CaseFeedbackConfig
type CaseFeedbackConfig struct {
	// The ID of the feedback entry, used to map responses against the config
	Id string `json:"id"`
	// The visibility of the feedback entry. This is used to determine which  parties can see the feedback entry.
	Visibility []UserTypeEnum       `json:"visibility"`
	Mode       CaseFeedbackModeEnum `json:"mode"`
	Form       NullableCustomForm   `json:"form,omitempty"`
}

type _CaseFeedbackConfig CaseFeedbackConfig

// NewCaseFeedbackConfig instantiates a new CaseFeedbackConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseFeedbackConfig(id string, visibility []UserTypeEnum, mode CaseFeedbackModeEnum) *CaseFeedbackConfig {
	this := CaseFeedbackConfig{}
	this.Id = id
	this.Visibility = visibility
	this.Mode = mode
	return &this
}

// NewCaseFeedbackConfigWithDefaults instantiates a new CaseFeedbackConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseFeedbackConfigWithDefaults() *CaseFeedbackConfig {
	this := CaseFeedbackConfig{}
	return &this
}

// GetId returns the Id field value
func (o *CaseFeedbackConfig) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CaseFeedbackConfig) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CaseFeedbackConfig) SetId(v string) {
	o.Id = v
}

// GetVisibility returns the Visibility field value
func (o *CaseFeedbackConfig) GetVisibility() []UserTypeEnum {
	if o == nil {
		var ret []UserTypeEnum
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *CaseFeedbackConfig) GetVisibilityOk() ([]UserTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Visibility, true
}

// SetVisibility sets field value
func (o *CaseFeedbackConfig) SetVisibility(v []UserTypeEnum) {
	o.Visibility = v
}

// GetMode returns the Mode field value
func (o *CaseFeedbackConfig) GetMode() CaseFeedbackModeEnum {
	if o == nil {
		var ret CaseFeedbackModeEnum
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *CaseFeedbackConfig) GetModeOk() (*CaseFeedbackModeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *CaseFeedbackConfig) SetMode(v CaseFeedbackModeEnum) {
	o.Mode = v
}

// GetForm returns the Form field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaseFeedbackConfig) GetForm() CustomForm {
	if o == nil || IsNil(o.Form.Get()) {
		var ret CustomForm
		return ret
	}
	return *o.Form.Get()
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaseFeedbackConfig) GetFormOk() (*CustomForm, bool) {
	if o == nil {
		return nil, false
	}
	return o.Form.Get(), o.Form.IsSet()
}

// HasForm returns a boolean if a field has been set.
func (o *CaseFeedbackConfig) HasForm() bool {
	if o != nil && o.Form.IsSet() {
		return true
	}

	return false
}

// SetForm gets a reference to the given NullableCustomForm and assigns it to the Form field.
func (o *CaseFeedbackConfig) SetForm(v CustomForm) {
	o.Form.Set(&v)
}

// SetFormNil sets the value for Form to be an explicit nil
func (o *CaseFeedbackConfig) SetFormNil() {
	o.Form.Set(nil)
}

// UnsetForm ensures that no value is present for Form, not even an explicit nil
func (o *CaseFeedbackConfig) UnsetForm() {
	o.Form.Unset()
}

func (o CaseFeedbackConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseFeedbackConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["visibility"] = o.Visibility
	toSerialize["mode"] = o.Mode
	if o.Form.IsSet() {
		toSerialize["form"] = o.Form.Get()
	}
	return toSerialize, nil
}

func (o *CaseFeedbackConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"visibility",
		"mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCaseFeedbackConfig := _CaseFeedbackConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCaseFeedbackConfig)

	if err != nil {
		return err
	}

	*o = CaseFeedbackConfig(varCaseFeedbackConfig)

	return err
}

type NullableCaseFeedbackConfig struct {
	value *CaseFeedbackConfig
	isSet bool
}

func (v NullableCaseFeedbackConfig) Get() *CaseFeedbackConfig {
	return v.value
}

func (v *NullableCaseFeedbackConfig) Set(val *CaseFeedbackConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseFeedbackConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseFeedbackConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseFeedbackConfig(val *CaseFeedbackConfig) *NullableCaseFeedbackConfig {
	return &NullableCaseFeedbackConfig{value: val, isSet: true}
}

func (v NullableCaseFeedbackConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseFeedbackConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
