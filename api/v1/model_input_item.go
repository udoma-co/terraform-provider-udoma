/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the InputItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputItem{}

// InputItem An item in a single or multi select input
type InputItem struct {
	// the technical value that will be stored in the collected data
	Id string `json:"id"`
	// a map of values, where the key and values are strings
	Label map[string]string `json:"label"`
}

type _InputItem InputItem

// NewInputItem instantiates a new InputItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputItem(id string, label map[string]string) *InputItem {
	this := InputItem{}
	this.Id = id
	this.Label = label
	return &this
}

// NewInputItemWithDefaults instantiates a new InputItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputItemWithDefaults() *InputItem {
	this := InputItem{}
	return &this
}

// GetId returns the Id field value
func (o *InputItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InputItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InputItem) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *InputItem) GetLabel() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *InputItem) GetLabelOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *InputItem) SetLabel(v map[string]string) {
	o.Label = v
}

func (o InputItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	return toSerialize, nil
}

func (o *InputItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInputItem := _InputItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInputItem)

	if err != nil {
		return err
	}

	*o = InputItem(varInputItem)

	return err
}

type NullableInputItem struct {
	value *InputItem
	isSet bool
}

func (v NullableInputItem) Get() *InputItem {
	return v.value
}

func (v *NullableInputItem) Set(val *InputItem) {
	v.value = val
	v.isSet = true
}

func (v NullableInputItem) IsSet() bool {
	return v.isSet
}

func (v *NullableInputItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputItem(val *InputItem) *NullableInputItem {
	return &NullableInputItem{value: val, isSet: true}
}

func (v NullableInputItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
