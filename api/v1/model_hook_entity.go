/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// HookEntity the model 'HookEntity'
type HookEntity string

// List of HookEntity
const (
	HOOKENTITY_BANK_ACCOUNT     HookEntity = "BANK_ACCOUNT"
	HOOKENTITY_PROPERTY         HookEntity = "PROPERTY"
	HOOKENTITY_PROPERTY_OWNER   HookEntity = "PROPERTY_OWNER"
	HOOKENTITY_TENANT           HookEntity = "TENANT"
	HOOKENTITY_TENANCY          HookEntity = "TENANCY"
	HOOKENTITY_SERVICE_PROVIDER HookEntity = "SERVICE_PROVIDER"
)

// All allowed values of HookEntity enum
var AllowedHookEntityEnumValues = []HookEntity{
	"BANK_ACCOUNT",
	"PROPERTY",
	"PROPERTY_OWNER",
	"TENANT",
	"TENANCY",
	"SERVICE_PROVIDER",
}

func (v *HookEntity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HookEntity(value)
	for _, existing := range AllowedHookEntityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HookEntity", value)
}

// NewHookEntityFromValue returns a pointer to a valid HookEntity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHookEntityFromValue(v string) (*HookEntity, error) {
	ev := HookEntity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HookEntity: valid values are %v", v, AllowedHookEntityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HookEntity) IsValid() bool {
	for _, existing := range AllowedHookEntityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HookEntity value
func (v HookEntity) Ptr() *HookEntity {
	return &v
}

type NullableHookEntity struct {
	value *HookEntity
	isSet bool
}

func (v NullableHookEntity) Get() *HookEntity {
	return v.value
}

func (v *NullableHookEntity) Set(val *HookEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableHookEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableHookEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHookEntity(val *HookEntity) *NullableHookEntity {
	return &NullableHookEntity{value: val, isSet: true}
}

func (v NullableHookEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHookEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
