/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PropertyHandover type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyHandover{}

// PropertyHandover struct for PropertyHandover
type PropertyHandover struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt int64 `json:"updated_at"`
	// The ID of the property handover template.
	TemplateRef string `json:"template_ref"`
	// The ID of the property that the handover is for.
	PropertyRef     *string  `json:"property_ref,omitempty"`
	PropertyAddress *Address `json:"property_address,omitempty"`
	// The time of the property handover.
	HandoverTime int64 `json:"handover_time"`
	// The data captured by of the property handover. This can be initalized before the handover is done to include information that is known in advance (e.g. attendees, meter readings, etc.)
	Data   map[string]interface{}     `json:"data,omitempty"`
	Status PropertyHandoverStatusEnum `json:"status"`
	// Whether the property handover has been archived or not.
	Archived *bool `json:"archived,omitempty"`
}

type _PropertyHandover PropertyHandover

// NewPropertyHandover instantiates a new PropertyHandover object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyHandover(id string, createdAt int64, updatedAt int64, templateRef string, handoverTime int64, status PropertyHandoverStatusEnum) *PropertyHandover {
	this := PropertyHandover{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.TemplateRef = templateRef
	this.HandoverTime = handoverTime
	this.Status = status
	return &this
}

// NewPropertyHandoverWithDefaults instantiates a new PropertyHandover object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyHandoverWithDefaults() *PropertyHandover {
	this := PropertyHandover{}
	return &this
}

// GetId returns the Id field value
func (o *PropertyHandover) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PropertyHandover) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PropertyHandover) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PropertyHandover) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PropertyHandover) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PropertyHandover) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PropertyHandover) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PropertyHandover) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PropertyHandover) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetTemplateRef returns the TemplateRef field value
func (o *PropertyHandover) GetTemplateRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TemplateRef
}

// GetTemplateRefOk returns a tuple with the TemplateRef field value
// and a boolean to check if the value has been set.
func (o *PropertyHandover) GetTemplateRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TemplateRef, true
}

// SetTemplateRef sets field value
func (o *PropertyHandover) SetTemplateRef(v string) {
	o.TemplateRef = v
}

// GetPropertyRef returns the PropertyRef field value if set, zero value otherwise.
func (o *PropertyHandover) GetPropertyRef() string {
	if o == nil || IsNil(o.PropertyRef) {
		var ret string
		return ret
	}
	return *o.PropertyRef
}

// GetPropertyRefOk returns a tuple with the PropertyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyHandover) GetPropertyRefOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyRef) {
		return nil, false
	}
	return o.PropertyRef, true
}

// HasPropertyRef returns a boolean if a field has been set.
func (o *PropertyHandover) HasPropertyRef() bool {
	if o != nil && !IsNil(o.PropertyRef) {
		return true
	}

	return false
}

// SetPropertyRef gets a reference to the given string and assigns it to the PropertyRef field.
func (o *PropertyHandover) SetPropertyRef(v string) {
	o.PropertyRef = &v
}

// GetPropertyAddress returns the PropertyAddress field value if set, zero value otherwise.
func (o *PropertyHandover) GetPropertyAddress() Address {
	if o == nil || IsNil(o.PropertyAddress) {
		var ret Address
		return ret
	}
	return *o.PropertyAddress
}

// GetPropertyAddressOk returns a tuple with the PropertyAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyHandover) GetPropertyAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.PropertyAddress) {
		return nil, false
	}
	return o.PropertyAddress, true
}

// HasPropertyAddress returns a boolean if a field has been set.
func (o *PropertyHandover) HasPropertyAddress() bool {
	if o != nil && !IsNil(o.PropertyAddress) {
		return true
	}

	return false
}

// SetPropertyAddress gets a reference to the given Address and assigns it to the PropertyAddress field.
func (o *PropertyHandover) SetPropertyAddress(v Address) {
	o.PropertyAddress = &v
}

// GetHandoverTime returns the HandoverTime field value
func (o *PropertyHandover) GetHandoverTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.HandoverTime
}

// GetHandoverTimeOk returns a tuple with the HandoverTime field value
// and a boolean to check if the value has been set.
func (o *PropertyHandover) GetHandoverTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HandoverTime, true
}

// SetHandoverTime sets field value
func (o *PropertyHandover) SetHandoverTime(v int64) {
	o.HandoverTime = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PropertyHandover) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyHandover) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PropertyHandover) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *PropertyHandover) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetStatus returns the Status field value
func (o *PropertyHandover) GetStatus() PropertyHandoverStatusEnum {
	if o == nil {
		var ret PropertyHandoverStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PropertyHandover) GetStatusOk() (*PropertyHandoverStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PropertyHandover) SetStatus(v PropertyHandoverStatusEnum) {
	o.Status = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *PropertyHandover) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyHandover) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *PropertyHandover) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *PropertyHandover) SetArchived(v bool) {
	o.Archived = &v
}

func (o PropertyHandover) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyHandover) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["template_ref"] = o.TemplateRef
	if !IsNil(o.PropertyRef) {
		toSerialize["property_ref"] = o.PropertyRef
	}
	if !IsNil(o.PropertyAddress) {
		toSerialize["property_address"] = o.PropertyAddress
	}
	toSerialize["handover_time"] = o.HandoverTime
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	return toSerialize, nil
}

func (o *PropertyHandover) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"template_ref",
		"handover_time",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyHandover := _PropertyHandover{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPropertyHandover)

	if err != nil {
		return err
	}

	*o = PropertyHandover(varPropertyHandover)

	return err
}

type NullablePropertyHandover struct {
	value *PropertyHandover
	isSet bool
}

func (v NullablePropertyHandover) Get() *PropertyHandover {
	return v.value
}

func (v *NullablePropertyHandover) Set(val *PropertyHandover) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyHandover) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyHandover) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyHandover(val *PropertyHandover) *NullablePropertyHandover {
	return &NullablePropertyHandover{value: val, isSet: true}
}

func (v NullablePropertyHandover) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyHandover) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
