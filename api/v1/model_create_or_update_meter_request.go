/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// CreateOrUpdateMeterRequest All the information required for creating a new meter
type CreateOrUpdateMeterRequest struct {
	PropertyRef         *string        `json:"property_ref,omitempty"`
	MeterType           *MeterTypeEnum `json:"meter_type,omitempty"`
	Unit                *string        `json:"unit,omitempty"`
	Name                *string        `json:"name,omitempty"`
	Location            *string        `json:"location,omitempty"`
	SerialNumber        *string        `json:"serial_number,omitempty"`
	CalibrationDate     *int64         `json:"calibration_date,omitempty"`
	CalibrationValidity *int64         `json:"calibration_validity,omitempty"`
}

// NewCreateOrUpdateMeterRequest instantiates a new CreateOrUpdateMeterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrUpdateMeterRequest() *CreateOrUpdateMeterRequest {
	this := CreateOrUpdateMeterRequest{}
	return &this
}

// NewCreateOrUpdateMeterRequestWithDefaults instantiates a new CreateOrUpdateMeterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrUpdateMeterRequestWithDefaults() *CreateOrUpdateMeterRequest {
	this := CreateOrUpdateMeterRequest{}
	return &this
}

// GetPropertyRef returns the PropertyRef field value if set, zero value otherwise.
func (o *CreateOrUpdateMeterRequest) GetPropertyRef() string {
	if o == nil || o.PropertyRef == nil {
		var ret string
		return ret
	}
	return *o.PropertyRef
}

// GetPropertyRefOk returns a tuple with the PropertyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateMeterRequest) GetPropertyRefOk() (*string, bool) {
	if o == nil || o.PropertyRef == nil {
		return nil, false
	}
	return o.PropertyRef, true
}

// HasPropertyRef returns a boolean if a field has been set.
func (o *CreateOrUpdateMeterRequest) HasPropertyRef() bool {
	if o != nil && o.PropertyRef != nil {
		return true
	}

	return false
}

// SetPropertyRef gets a reference to the given string and assigns it to the PropertyRef field.
func (o *CreateOrUpdateMeterRequest) SetPropertyRef(v string) {
	o.PropertyRef = &v
}

// GetMeterType returns the MeterType field value if set, zero value otherwise.
func (o *CreateOrUpdateMeterRequest) GetMeterType() MeterTypeEnum {
	if o == nil || o.MeterType == nil {
		var ret MeterTypeEnum
		return ret
	}
	return *o.MeterType
}

// GetMeterTypeOk returns a tuple with the MeterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateMeterRequest) GetMeterTypeOk() (*MeterTypeEnum, bool) {
	if o == nil || o.MeterType == nil {
		return nil, false
	}
	return o.MeterType, true
}

// HasMeterType returns a boolean if a field has been set.
func (o *CreateOrUpdateMeterRequest) HasMeterType() bool {
	if o != nil && o.MeterType != nil {
		return true
	}

	return false
}

// SetMeterType gets a reference to the given MeterTypeEnum and assigns it to the MeterType field.
func (o *CreateOrUpdateMeterRequest) SetMeterType(v MeterTypeEnum) {
	o.MeterType = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *CreateOrUpdateMeterRequest) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateMeterRequest) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *CreateOrUpdateMeterRequest) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *CreateOrUpdateMeterRequest) SetUnit(v string) {
	o.Unit = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateOrUpdateMeterRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateMeterRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateOrUpdateMeterRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateOrUpdateMeterRequest) SetName(v string) {
	o.Name = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CreateOrUpdateMeterRequest) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateMeterRequest) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CreateOrUpdateMeterRequest) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *CreateOrUpdateMeterRequest) SetLocation(v string) {
	o.Location = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *CreateOrUpdateMeterRequest) GetSerialNumber() string {
	if o == nil || o.SerialNumber == nil {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateMeterRequest) GetSerialNumberOk() (*string, bool) {
	if o == nil || o.SerialNumber == nil {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CreateOrUpdateMeterRequest) HasSerialNumber() bool {
	if o != nil && o.SerialNumber != nil {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *CreateOrUpdateMeterRequest) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetCalibrationDate returns the CalibrationDate field value if set, zero value otherwise.
func (o *CreateOrUpdateMeterRequest) GetCalibrationDate() int64 {
	if o == nil || o.CalibrationDate == nil {
		var ret int64
		return ret
	}
	return *o.CalibrationDate
}

// GetCalibrationDateOk returns a tuple with the CalibrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateMeterRequest) GetCalibrationDateOk() (*int64, bool) {
	if o == nil || o.CalibrationDate == nil {
		return nil, false
	}
	return o.CalibrationDate, true
}

// HasCalibrationDate returns a boolean if a field has been set.
func (o *CreateOrUpdateMeterRequest) HasCalibrationDate() bool {
	if o != nil && o.CalibrationDate != nil {
		return true
	}

	return false
}

// SetCalibrationDate gets a reference to the given int64 and assigns it to the CalibrationDate field.
func (o *CreateOrUpdateMeterRequest) SetCalibrationDate(v int64) {
	o.CalibrationDate = &v
}

// GetCalibrationValidity returns the CalibrationValidity field value if set, zero value otherwise.
func (o *CreateOrUpdateMeterRequest) GetCalibrationValidity() int64 {
	if o == nil || o.CalibrationValidity == nil {
		var ret int64
		return ret
	}
	return *o.CalibrationValidity
}

// GetCalibrationValidityOk returns a tuple with the CalibrationValidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateMeterRequest) GetCalibrationValidityOk() (*int64, bool) {
	if o == nil || o.CalibrationValidity == nil {
		return nil, false
	}
	return o.CalibrationValidity, true
}

// HasCalibrationValidity returns a boolean if a field has been set.
func (o *CreateOrUpdateMeterRequest) HasCalibrationValidity() bool {
	if o != nil && o.CalibrationValidity != nil {
		return true
	}

	return false
}

// SetCalibrationValidity gets a reference to the given int64 and assigns it to the CalibrationValidity field.
func (o *CreateOrUpdateMeterRequest) SetCalibrationValidity(v int64) {
	o.CalibrationValidity = &v
}

func (o CreateOrUpdateMeterRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PropertyRef != nil {
		toSerialize["property_ref"] = o.PropertyRef
	}
	if o.MeterType != nil {
		toSerialize["meter_type"] = o.MeterType
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.SerialNumber != nil {
		toSerialize["serial_number"] = o.SerialNumber
	}
	if o.CalibrationDate != nil {
		toSerialize["calibration_date"] = o.CalibrationDate
	}
	if o.CalibrationValidity != nil {
		toSerialize["calibration_validity"] = o.CalibrationValidity
	}
	return json.Marshal(toSerialize)
}

type NullableCreateOrUpdateMeterRequest struct {
	value *CreateOrUpdateMeterRequest
	isSet bool
}

func (v NullableCreateOrUpdateMeterRequest) Get() *CreateOrUpdateMeterRequest {
	return v.value
}

func (v *NullableCreateOrUpdateMeterRequest) Set(val *CreateOrUpdateMeterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrUpdateMeterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrUpdateMeterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrUpdateMeterRequest(val *CreateOrUpdateMeterRequest) *NullableCreateOrUpdateMeterRequest {
	return &NullableCreateOrUpdateMeterRequest{value: val, isSet: true}
}

func (v NullableCreateOrUpdateMeterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrUpdateMeterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
