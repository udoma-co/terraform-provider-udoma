/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the QueryCasesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryCasesRequest{}

// QueryCasesRequest Request used to get cases by a user
type QueryCasesRequest struct {
	// if true, only archived cases will be returned
	Archived *bool `json:"archived,omitempty"`
}

// NewQueryCasesRequest instantiates a new QueryCasesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryCasesRequest() *QueryCasesRequest {
	this := QueryCasesRequest{}
	return &this
}

// NewQueryCasesRequestWithDefaults instantiates a new QueryCasesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryCasesRequestWithDefaults() *QueryCasesRequest {
	this := QueryCasesRequest{}
	return &this
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *QueryCasesRequest) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryCasesRequest) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *QueryCasesRequest) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *QueryCasesRequest) SetArchived(v bool) {
	o.Archived = &v
}

func (o QueryCasesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryCasesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	return toSerialize, nil
}

type NullableQueryCasesRequest struct {
	value *QueryCasesRequest
	isSet bool
}

func (v NullableQueryCasesRequest) Get() *QueryCasesRequest {
	return v.value
}

func (v *NullableQueryCasesRequest) Set(val *QueryCasesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryCasesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryCasesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryCasesRequest(val *QueryCasesRequest) *NullableQueryCasesRequest {
	return &NullableQueryCasesRequest{value: val, isSet: true}
}

func (v NullableQueryCasesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryCasesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
