/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// UpdateDataCollectionConfiguration request to update the data collection setup
type UpdateDataCollectionConfiguration struct {
	// if true, the default endpoint will be enabled for this setup
	DefaultEndpointEnabled *bool                `json:"default_endpoint_enabled,omitempty"`
	Inputs                 []DefaultInputConfig `json:"inputs,omitempty"`
	AdditionalQuestions    *CustomForm          `json:"additional_questions,omitempty"`
}

// NewUpdateDataCollectionConfiguration instantiates a new UpdateDataCollectionConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDataCollectionConfiguration() *UpdateDataCollectionConfiguration {
	this := UpdateDataCollectionConfiguration{}
	return &this
}

// NewUpdateDataCollectionConfigurationWithDefaults instantiates a new UpdateDataCollectionConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDataCollectionConfigurationWithDefaults() *UpdateDataCollectionConfiguration {
	this := UpdateDataCollectionConfiguration{}
	return &this
}

// GetDefaultEndpointEnabled returns the DefaultEndpointEnabled field value if set, zero value otherwise.
func (o *UpdateDataCollectionConfiguration) GetDefaultEndpointEnabled() bool {
	if o == nil || o.DefaultEndpointEnabled == nil {
		var ret bool
		return ret
	}
	return *o.DefaultEndpointEnabled
}

// GetDefaultEndpointEnabledOk returns a tuple with the DefaultEndpointEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataCollectionConfiguration) GetDefaultEndpointEnabledOk() (*bool, bool) {
	if o == nil || o.DefaultEndpointEnabled == nil {
		return nil, false
	}
	return o.DefaultEndpointEnabled, true
}

// HasDefaultEndpointEnabled returns a boolean if a field has been set.
func (o *UpdateDataCollectionConfiguration) HasDefaultEndpointEnabled() bool {
	if o != nil && o.DefaultEndpointEnabled != nil {
		return true
	}

	return false
}

// SetDefaultEndpointEnabled gets a reference to the given bool and assigns it to the DefaultEndpointEnabled field.
func (o *UpdateDataCollectionConfiguration) SetDefaultEndpointEnabled(v bool) {
	o.DefaultEndpointEnabled = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *UpdateDataCollectionConfiguration) GetInputs() []DefaultInputConfig {
	if o == nil || o.Inputs == nil {
		var ret []DefaultInputConfig
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataCollectionConfiguration) GetInputsOk() ([]DefaultInputConfig, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *UpdateDataCollectionConfiguration) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []DefaultInputConfig and assigns it to the Inputs field.
func (o *UpdateDataCollectionConfiguration) SetInputs(v []DefaultInputConfig) {
	o.Inputs = v
}

// GetAdditionalQuestions returns the AdditionalQuestions field value if set, zero value otherwise.
func (o *UpdateDataCollectionConfiguration) GetAdditionalQuestions() CustomForm {
	if o == nil || o.AdditionalQuestions == nil {
		var ret CustomForm
		return ret
	}
	return *o.AdditionalQuestions
}

// GetAdditionalQuestionsOk returns a tuple with the AdditionalQuestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataCollectionConfiguration) GetAdditionalQuestionsOk() (*CustomForm, bool) {
	if o == nil || o.AdditionalQuestions == nil {
		return nil, false
	}
	return o.AdditionalQuestions, true
}

// HasAdditionalQuestions returns a boolean if a field has been set.
func (o *UpdateDataCollectionConfiguration) HasAdditionalQuestions() bool {
	if o != nil && o.AdditionalQuestions != nil {
		return true
	}

	return false
}

// SetAdditionalQuestions gets a reference to the given CustomForm and assigns it to the AdditionalQuestions field.
func (o *UpdateDataCollectionConfiguration) SetAdditionalQuestions(v CustomForm) {
	o.AdditionalQuestions = &v
}

func (o UpdateDataCollectionConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultEndpointEnabled != nil {
		toSerialize["default_endpoint_enabled"] = o.DefaultEndpointEnabled
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	if o.AdditionalQuestions != nil {
		toSerialize["additional_questions"] = o.AdditionalQuestions
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateDataCollectionConfiguration struct {
	value *UpdateDataCollectionConfiguration
	isSet bool
}

func (v NullableUpdateDataCollectionConfiguration) Get() *UpdateDataCollectionConfiguration {
	return v.value
}

func (v *NullableUpdateDataCollectionConfiguration) Set(val *UpdateDataCollectionConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDataCollectionConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDataCollectionConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDataCollectionConfiguration(val *UpdateDataCollectionConfiguration) *NullableUpdateDataCollectionConfiguration {
	return &NullableUpdateDataCollectionConfiguration{value: val, isSet: true}
}

func (v NullableUpdateDataCollectionConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDataCollectionConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
