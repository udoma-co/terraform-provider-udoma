/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Hook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Hook{}

// Hook struct for Hook
type Hook struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt int64      `json:"updated_at"`
	Entity    HookEntity `json:"entity"`
	Action    HookAction `json:"action"`
	// The script to run when the action is performed
	Script string `json:"script"`
	// This is just the order of execution of the hooks
	Priority int32 `json:"priority"`
	// Whether the entire event should be cancelled if the script throws an error
	BreakOnError *bool `json:"break_on_error,omitempty"`
	// Whether the hook is enabled and should be ran
	Enabled bool `json:"enabled"`
}

type _Hook Hook

// NewHook instantiates a new Hook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHook(id string, createdAt int64, updatedAt int64, entity HookEntity, action HookAction, script string, priority int32, enabled bool) *Hook {
	this := Hook{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Entity = entity
	this.Action = action
	this.Script = script
	this.Priority = priority
	this.Enabled = enabled
	return &this
}

// NewHookWithDefaults instantiates a new Hook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHookWithDefaults() *Hook {
	this := Hook{}
	return &this
}

// GetId returns the Id field value
func (o *Hook) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Hook) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Hook) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Hook) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Hook) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Hook) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Hook) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Hook) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Hook) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetEntity returns the Entity field value
func (o *Hook) GetEntity() HookEntity {
	if o == nil {
		var ret HookEntity
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *Hook) GetEntityOk() (*HookEntity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *Hook) SetEntity(v HookEntity) {
	o.Entity = v
}

// GetAction returns the Action field value
func (o *Hook) GetAction() HookAction {
	if o == nil {
		var ret HookAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *Hook) GetActionOk() (*HookAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *Hook) SetAction(v HookAction) {
	o.Action = v
}

// GetScript returns the Script field value
func (o *Hook) GetScript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Script
}

// GetScriptOk returns a tuple with the Script field value
// and a boolean to check if the value has been set.
func (o *Hook) GetScriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Script, true
}

// SetScript sets field value
func (o *Hook) SetScript(v string) {
	o.Script = v
}

// GetPriority returns the Priority field value
func (o *Hook) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *Hook) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *Hook) SetPriority(v int32) {
	o.Priority = v
}

// GetBreakOnError returns the BreakOnError field value if set, zero value otherwise.
func (o *Hook) GetBreakOnError() bool {
	if o == nil || IsNil(o.BreakOnError) {
		var ret bool
		return ret
	}
	return *o.BreakOnError
}

// GetBreakOnErrorOk returns a tuple with the BreakOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetBreakOnErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.BreakOnError) {
		return nil, false
	}
	return o.BreakOnError, true
}

// HasBreakOnError returns a boolean if a field has been set.
func (o *Hook) HasBreakOnError() bool {
	if o != nil && !IsNil(o.BreakOnError) {
		return true
	}

	return false
}

// SetBreakOnError gets a reference to the given bool and assigns it to the BreakOnError field.
func (o *Hook) SetBreakOnError(v bool) {
	o.BreakOnError = &v
}

// GetEnabled returns the Enabled field value
func (o *Hook) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Hook) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Hook) SetEnabled(v bool) {
	o.Enabled = v
}

func (o Hook) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Hook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["entity"] = o.Entity
	toSerialize["action"] = o.Action
	toSerialize["script"] = o.Script
	toSerialize["priority"] = o.Priority
	if !IsNil(o.BreakOnError) {
		toSerialize["break_on_error"] = o.BreakOnError
	}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *Hook) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"entity",
		"action",
		"script",
		"priority",
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHook := _Hook{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHook)

	if err != nil {
		return err
	}

	*o = Hook(varHook)

	return err
}

type NullableHook struct {
	value *Hook
	isSet bool
}

func (v NullableHook) Get() *Hook {
	return v.value
}

func (v *NullableHook) Set(val *Hook) {
	v.value = val
	v.isSet = true
}

func (v NullableHook) IsSet() bool {
	return v.isSet
}

func (v *NullableHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHook(val *Hook) *NullableHook {
	return &NullableHook{value: val, isSet: true}
}

func (v NullableHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
