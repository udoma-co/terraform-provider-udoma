/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// TenantChangeActionEnum Indication whether the tenant is moving in or moving out
type TenantChangeActionEnum string

// List of TenantChangeActionEnum
const (
	TENANTCHANGEACTIONENUM_MOVE_IN  TenantChangeActionEnum = "MOVE_IN"
	TENANTCHANGEACTIONENUM_MOVE_OUT TenantChangeActionEnum = "MOVE_OUT"
	TENANTCHANGEACTIONENUM_REMAIN   TenantChangeActionEnum = "REMAIN"
)

// All allowed values of TenantChangeActionEnum enum
var AllowedTenantChangeActionEnumEnumValues = []TenantChangeActionEnum{
	"MOVE_IN",
	"MOVE_OUT",
	"REMAIN",
}

func (v *TenantChangeActionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TenantChangeActionEnum(value)
	for _, existing := range AllowedTenantChangeActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TenantChangeActionEnum", value)
}

// NewTenantChangeActionEnumFromValue returns a pointer to a valid TenantChangeActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTenantChangeActionEnumFromValue(v string) (*TenantChangeActionEnum, error) {
	ev := TenantChangeActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TenantChangeActionEnum: valid values are %v", v, AllowedTenantChangeActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TenantChangeActionEnum) IsValid() bool {
	for _, existing := range AllowedTenantChangeActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TenantChangeActionEnum value
func (v TenantChangeActionEnum) Ptr() *TenantChangeActionEnum {
	return &v
}

type NullableTenantChangeActionEnum struct {
	value *TenantChangeActionEnum
	isSet bool
}

func (v NullableTenantChangeActionEnum) Get() *TenantChangeActionEnum {
	return v.value
}

func (v *NullableTenantChangeActionEnum) Set(val *TenantChangeActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantChangeActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantChangeActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantChangeActionEnum(val *TenantChangeActionEnum) *NullableTenantChangeActionEnum {
	return &NullableTenantChangeActionEnum{value: val, isSet: true}
}

func (v NullableTenantChangeActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantChangeActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
