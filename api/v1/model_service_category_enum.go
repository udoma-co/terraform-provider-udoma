/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// ServiceCategoryEnum the model 'ServiceCategoryEnum'
type ServiceCategoryEnum string

// List of ServiceCategoryEnum
const (
	SERVICECATEGORYENUM_OTHERS                           ServiceCategoryEnum = "OTHERS"
	SERVICECATEGORYENUM_ARCHITECT                        ServiceCategoryEnum = "ARCHITECT"
	SERVICECATEGORYENUM_CARPENTER                        ServiceCategoryEnum = "CARPENTER"
	SERVICECATEGORYENUM_CHIMNEY_SWEEP                    ServiceCategoryEnum = "CHIMNEY_SWEEP"
	SERVICECATEGORYENUM_CLEANING_AND_WASTE_DISPOSAL      ServiceCategoryEnum = "CLEANING_AND_WASTE_DISPOSAL"
	SERVICECATEGORYENUM_DOORS_AND_WINDOWS                ServiceCategoryEnum = "DOORS_AND_WINDOWS"
	SERVICECATEGORYENUM_ELECTRICIAN                      ServiceCategoryEnum = "ELECTRICIAN"
	SERVICECATEGORYENUM_ELEVATOR_AND_LIFT                ServiceCategoryEnum = "ELEVATOR_AND_LIFT"
	SERVICECATEGORYENUM_FLOORING                         ServiceCategoryEnum = "FLOORING"
	SERVICECATEGORYENUM_GARDENING                        ServiceCategoryEnum = "GARDENING"
	SERVICECATEGORYENUM_HEATING                          ServiceCategoryEnum = "HEATING"
	SERVICECATEGORYENUM_INSURANCE                        ServiceCategoryEnum = "INSURANCE"
	SERVICECATEGORYENUM_INSTALLATION                     ServiceCategoryEnum = "INSTALLATION"
	SERVICECATEGORYENUM_JANITOR                          ServiceCategoryEnum = "JANITOR"
	SERVICECATEGORYENUM_LOCKSMITH                        ServiceCategoryEnum = "LOCKSMITH"
	SERVICECATEGORYENUM_MASONRY                          ServiceCategoryEnum = "MASONRY"
	SERVICECATEGORYENUM_METER_READING                    ServiceCategoryEnum = "METER_READING"
	SERVICECATEGORYENUM_KEY_SERVICE                      ServiceCategoryEnum = "KEY_SERVICE"
	SERVICECATEGORYENUM_PAINTING                         ServiceCategoryEnum = "PAINTING"
	SERVICECATEGORYENUM_PEST_CONTROL                     ServiceCategoryEnum = "PEST_CONTROL"
	SERVICECATEGORYENUM_ROOFER                           ServiceCategoryEnum = "ROOFER"
	SERVICECATEGORYENUM_SANITARY                         ServiceCategoryEnum = "SANITARY"
	SERVICECATEGORYENUM_SOLAR_PANELS                     ServiceCategoryEnum = "SOLAR_PANELS"
	SERVICECATEGORYENUM_TILER                            ServiceCategoryEnum = "TILER"
	SERVICECATEGORYENUM_VENTILATION_AND_AIR_CONDITIONING ServiceCategoryEnum = "VENTILATION_AND_AIR_CONDITIONING"
)

// All allowed values of ServiceCategoryEnum enum
var AllowedServiceCategoryEnumEnumValues = []ServiceCategoryEnum{
	"OTHERS",
	"ARCHITECT",
	"CARPENTER",
	"CHIMNEY_SWEEP",
	"CLEANING_AND_WASTE_DISPOSAL",
	"DOORS_AND_WINDOWS",
	"ELECTRICIAN",
	"ELEVATOR_AND_LIFT",
	"FLOORING",
	"GARDENING",
	"HEATING",
	"INSURANCE",
	"INSTALLATION",
	"JANITOR",
	"LOCKSMITH",
	"MASONRY",
	"METER_READING",
	"KEY_SERVICE",
	"PAINTING",
	"PEST_CONTROL",
	"ROOFER",
	"SANITARY",
	"SOLAR_PANELS",
	"TILER",
	"VENTILATION_AND_AIR_CONDITIONING",
}

func (v *ServiceCategoryEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceCategoryEnum(value)
	for _, existing := range AllowedServiceCategoryEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceCategoryEnum", value)
}

// NewServiceCategoryEnumFromValue returns a pointer to a valid ServiceCategoryEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceCategoryEnumFromValue(v string) (*ServiceCategoryEnum, error) {
	ev := ServiceCategoryEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceCategoryEnum: valid values are %v", v, AllowedServiceCategoryEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceCategoryEnum) IsValid() bool {
	for _, existing := range AllowedServiceCategoryEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceCategoryEnum value
func (v ServiceCategoryEnum) Ptr() *ServiceCategoryEnum {
	return &v
}

type NullableServiceCategoryEnum struct {
	value *ServiceCategoryEnum
	isSet bool
}

func (v NullableServiceCategoryEnum) Get() *ServiceCategoryEnum {
	return v.value
}

func (v *NullableServiceCategoryEnum) Set(val *ServiceCategoryEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceCategoryEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceCategoryEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceCategoryEnum(val *ServiceCategoryEnum) *NullableServiceCategoryEnum {
	return &NullableServiceCategoryEnum{value: val, isSet: true}
}

func (v NullableServiceCategoryEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceCategoryEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
