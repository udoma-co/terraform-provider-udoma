/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the PriceIndexPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceIndexPoint{}

// PriceIndexPoint A value, corresponding to a specific time point, that represends the price index value of a specific country.
type PriceIndexPoint struct {
	// the unique ID of the value
	Id *string `json:"id,omitempty"`
	// timestamp indicating when it was pushed
	CreatedAt *int64 `json:"created_at,omitempty"`
	// the value of the price index at the point of pushing
	Value *float64 `json:"value,omitempty"`
	// the time point(usually month) the value corresponds to
	Date *int64 `json:"date,omitempty"`
	// the country code the price index belongs to
	Country *string `json:"country,omitempty"`
}

// NewPriceIndexPoint instantiates a new PriceIndexPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceIndexPoint() *PriceIndexPoint {
	this := PriceIndexPoint{}
	return &this
}

// NewPriceIndexPointWithDefaults instantiates a new PriceIndexPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceIndexPointWithDefaults() *PriceIndexPoint {
	this := PriceIndexPoint{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PriceIndexPoint) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceIndexPoint) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PriceIndexPoint) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PriceIndexPoint) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PriceIndexPoint) GetCreatedAt() int64 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceIndexPoint) GetCreatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PriceIndexPoint) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *PriceIndexPoint) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PriceIndexPoint) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceIndexPoint) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PriceIndexPoint) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *PriceIndexPoint) SetValue(v float64) {
	o.Value = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *PriceIndexPoint) GetDate() int64 {
	if o == nil || IsNil(o.Date) {
		var ret int64
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceIndexPoint) GetDateOk() (*int64, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *PriceIndexPoint) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given int64 and assigns it to the Date field.
func (o *PriceIndexPoint) SetDate(v int64) {
	o.Date = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PriceIndexPoint) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceIndexPoint) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PriceIndexPoint) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *PriceIndexPoint) SetCountry(v string) {
	o.Country = &v
}

func (o PriceIndexPoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceIndexPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	return toSerialize, nil
}

type NullablePriceIndexPoint struct {
	value *PriceIndexPoint
	isSet bool
}

func (v NullablePriceIndexPoint) Get() *PriceIndexPoint {
	return v.value
}

func (v *NullablePriceIndexPoint) Set(val *PriceIndexPoint) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceIndexPoint) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceIndexPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceIndexPoint(val *PriceIndexPoint) *NullablePriceIndexPoint {
	return &NullablePriceIndexPoint{value: val, isSet: true}
}

func (v NullablePriceIndexPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceIndexPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
