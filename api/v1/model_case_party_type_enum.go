/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// CasePartyTypeEnum the model 'CasePartyTypeEnum'
type CasePartyTypeEnum string

// List of CasePartyTypeEnum
const (
	CASEPARTYTYPEENUM_TENANT           CasePartyTypeEnum = "TENANT"
	CASEPARTYTYPEENUM_MANAGER          CasePartyTypeEnum = "MANAGER"
	CASEPARTYTYPEENUM_SERVICE_PROVIDER CasePartyTypeEnum = "SERVICE_PROVIDER"
)

// All allowed values of CasePartyTypeEnum enum
var AllowedCasePartyTypeEnumEnumValues = []CasePartyTypeEnum{
	"TENANT",
	"MANAGER",
	"SERVICE_PROVIDER",
}

func (v *CasePartyTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CasePartyTypeEnum(value)
	for _, existing := range AllowedCasePartyTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CasePartyTypeEnum", value)
}

// NewCasePartyTypeEnumFromValue returns a pointer to a valid CasePartyTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCasePartyTypeEnumFromValue(v string) (*CasePartyTypeEnum, error) {
	ev := CasePartyTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CasePartyTypeEnum: valid values are %v", v, AllowedCasePartyTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CasePartyTypeEnum) IsValid() bool {
	for _, existing := range AllowedCasePartyTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CasePartyTypeEnum value
func (v CasePartyTypeEnum) Ptr() *CasePartyTypeEnum {
	return &v
}

type NullableCasePartyTypeEnum struct {
	value *CasePartyTypeEnum
	isSet bool
}

func (v NullableCasePartyTypeEnum) Get() *CasePartyTypeEnum {
	return v.value
}

func (v *NullableCasePartyTypeEnum) Set(val *CasePartyTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCasePartyTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCasePartyTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCasePartyTypeEnum(val *CasePartyTypeEnum) *NullableCasePartyTypeEnum {
	return &NullableCasePartyTypeEnum{value: val, isSet: true}
}

func (v NullableCasePartyTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCasePartyTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
