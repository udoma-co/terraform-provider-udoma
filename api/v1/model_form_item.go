/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FormItem an item in a form group, referencing another entity in the form
type FormItem struct {
	// the ID of the entity that will be referenced
	RefId   *string       `json:"ref_id,omitempty"`
	RefType *FormItemType `json:"ref_type,omitempty"`
}

// NewFormItem instantiates a new FormItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormItem() *FormItem {
	this := FormItem{}
	return &this
}

// NewFormItemWithDefaults instantiates a new FormItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormItemWithDefaults() *FormItem {
	this := FormItem{}
	return &this
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *FormItem) GetRefId() string {
	if o == nil || o.RefId == nil {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormItem) GetRefIdOk() (*string, bool) {
	if o == nil || o.RefId == nil {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *FormItem) HasRefId() bool {
	if o != nil && o.RefId != nil {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *FormItem) SetRefId(v string) {
	o.RefId = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *FormItem) GetRefType() FormItemType {
	if o == nil || o.RefType == nil {
		var ret FormItemType
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormItem) GetRefTypeOk() (*FormItemType, bool) {
	if o == nil || o.RefType == nil {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *FormItem) HasRefType() bool {
	if o != nil && o.RefType != nil {
		return true
	}

	return false
}

// SetRefType gets a reference to the given FormItemType and assigns it to the RefType field.
func (o *FormItem) SetRefType(v FormItemType) {
	o.RefType = &v
}

func (o FormItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RefId != nil {
		toSerialize["ref_id"] = o.RefId
	}
	if o.RefType != nil {
		toSerialize["ref_type"] = o.RefType
	}
	return json.Marshal(toSerialize)
}

type NullableFormItem struct {
	value *FormItem
	isSet bool
}

func (v NullableFormItem) Get() *FormItem {
	return v.value
}

func (v *NullableFormItem) Set(val *FormItem) {
	v.value = val
	v.isSet = true
}

func (v NullableFormItem) IsSet() bool {
	return v.isSet
}

func (v *NullableFormItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormItem(val *FormItem) *NullableFormItem {
	return &NullableFormItem{value: val, isSet: true}
}

func (v NullableFormItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
