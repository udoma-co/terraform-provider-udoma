/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the DocumentESignatureStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentESignatureStatus{}

// DocumentESignatureStatus The status of a document eSignature request
type DocumentESignatureStatus struct {
	// The unique ID of the document signing request
	Id *string `json:"id,omitempty"`
	// The date the document signing request was created
	CreationTime *int64 `json:"creation_time,omitempty"`
	// The date the document signing request expires
	ExpirationTime *int64 `json:"expiration_time,omitempty"`
	// The status of the document signing process
	Status *string `json:"status,omitempty"`
	// The list of signers
	Signers []DocumentSigner `json:"signers,omitempty"`
	// The reference to the signed document, once all signatures are completed (link to attachment)
	SignedDocRef *string `json:"signed_doc_ref,omitempty"`
	// The reference to the signed document audit, once all signatures are completed (link to attachment)
	SignedDocAuditRef *string `json:"signed_doc_audit_ref,omitempty"`
}

// NewDocumentESignatureStatus instantiates a new DocumentESignatureStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentESignatureStatus() *DocumentESignatureStatus {
	this := DocumentESignatureStatus{}
	return &this
}

// NewDocumentESignatureStatusWithDefaults instantiates a new DocumentESignatureStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentESignatureStatusWithDefaults() *DocumentESignatureStatus {
	this := DocumentESignatureStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DocumentESignatureStatus) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureStatus) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DocumentESignatureStatus) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DocumentESignatureStatus) SetId(v string) {
	o.Id = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *DocumentESignatureStatus) GetCreationTime() int64 {
	if o == nil || IsNil(o.CreationTime) {
		var ret int64
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureStatus) GetCreationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *DocumentESignatureStatus) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given int64 and assigns it to the CreationTime field.
func (o *DocumentESignatureStatus) SetCreationTime(v int64) {
	o.CreationTime = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *DocumentESignatureStatus) GetExpirationTime() int64 {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret int64
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureStatus) GetExpirationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *DocumentESignatureStatus) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given int64 and assigns it to the ExpirationTime field.
func (o *DocumentESignatureStatus) SetExpirationTime(v int64) {
	o.ExpirationTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DocumentESignatureStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DocumentESignatureStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DocumentESignatureStatus) SetStatus(v string) {
	o.Status = &v
}

// GetSigners returns the Signers field value if set, zero value otherwise.
func (o *DocumentESignatureStatus) GetSigners() []DocumentSigner {
	if o == nil || IsNil(o.Signers) {
		var ret []DocumentSigner
		return ret
	}
	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureStatus) GetSignersOk() ([]DocumentSigner, bool) {
	if o == nil || IsNil(o.Signers) {
		return nil, false
	}
	return o.Signers, true
}

// HasSigners returns a boolean if a field has been set.
func (o *DocumentESignatureStatus) HasSigners() bool {
	if o != nil && !IsNil(o.Signers) {
		return true
	}

	return false
}

// SetSigners gets a reference to the given []DocumentSigner and assigns it to the Signers field.
func (o *DocumentESignatureStatus) SetSigners(v []DocumentSigner) {
	o.Signers = v
}

// GetSignedDocRef returns the SignedDocRef field value if set, zero value otherwise.
func (o *DocumentESignatureStatus) GetSignedDocRef() string {
	if o == nil || IsNil(o.SignedDocRef) {
		var ret string
		return ret
	}
	return *o.SignedDocRef
}

// GetSignedDocRefOk returns a tuple with the SignedDocRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureStatus) GetSignedDocRefOk() (*string, bool) {
	if o == nil || IsNil(o.SignedDocRef) {
		return nil, false
	}
	return o.SignedDocRef, true
}

// HasSignedDocRef returns a boolean if a field has been set.
func (o *DocumentESignatureStatus) HasSignedDocRef() bool {
	if o != nil && !IsNil(o.SignedDocRef) {
		return true
	}

	return false
}

// SetSignedDocRef gets a reference to the given string and assigns it to the SignedDocRef field.
func (o *DocumentESignatureStatus) SetSignedDocRef(v string) {
	o.SignedDocRef = &v
}

// GetSignedDocAuditRef returns the SignedDocAuditRef field value if set, zero value otherwise.
func (o *DocumentESignatureStatus) GetSignedDocAuditRef() string {
	if o == nil || IsNil(o.SignedDocAuditRef) {
		var ret string
		return ret
	}
	return *o.SignedDocAuditRef
}

// GetSignedDocAuditRefOk returns a tuple with the SignedDocAuditRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureStatus) GetSignedDocAuditRefOk() (*string, bool) {
	if o == nil || IsNil(o.SignedDocAuditRef) {
		return nil, false
	}
	return o.SignedDocAuditRef, true
}

// HasSignedDocAuditRef returns a boolean if a field has been set.
func (o *DocumentESignatureStatus) HasSignedDocAuditRef() bool {
	if o != nil && !IsNil(o.SignedDocAuditRef) {
		return true
	}

	return false
}

// SetSignedDocAuditRef gets a reference to the given string and assigns it to the SignedDocAuditRef field.
func (o *DocumentESignatureStatus) SetSignedDocAuditRef(v string) {
	o.SignedDocAuditRef = &v
}

func (o DocumentESignatureStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentESignatureStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.ExpirationTime) {
		toSerialize["expiration_time"] = o.ExpirationTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Signers) {
		toSerialize["signers"] = o.Signers
	}
	if !IsNil(o.SignedDocRef) {
		toSerialize["signed_doc_ref"] = o.SignedDocRef
	}
	if !IsNil(o.SignedDocAuditRef) {
		toSerialize["signed_doc_audit_ref"] = o.SignedDocAuditRef
	}
	return toSerialize, nil
}

type NullableDocumentESignatureStatus struct {
	value *DocumentESignatureStatus
	isSet bool
}

func (v NullableDocumentESignatureStatus) Get() *DocumentESignatureStatus {
	return v.value
}

func (v *NullableDocumentESignatureStatus) Set(val *DocumentESignatureStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentESignatureStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentESignatureStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentESignatureStatus(val *DocumentESignatureStatus) *NullableDocumentESignatureStatus {
	return &NullableDocumentESignatureStatus{value: val, isSet: true}
}

func (v NullableDocumentESignatureStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentESignatureStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
