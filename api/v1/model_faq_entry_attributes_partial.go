/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FaqEntryAttributesPartial type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FaqEntryAttributesPartial{}

// FaqEntryAttributesPartial struct for FaqEntryAttributesPartial
type FaqEntryAttributesPartial struct {
	// a map of values, where the key and values are strings
	Question map[string]string `json:"question"`
	// a map of values, where the key and values are strings
	Answer   map[string]string `json:"answer"`
	Keywords []string          `json:"keywords,omitempty"`
}

type _FaqEntryAttributesPartial FaqEntryAttributesPartial

// NewFaqEntryAttributesPartial instantiates a new FaqEntryAttributesPartial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFaqEntryAttributesPartial(question map[string]string, answer map[string]string) *FaqEntryAttributesPartial {
	this := FaqEntryAttributesPartial{}
	this.Question = question
	this.Answer = answer
	return &this
}

// NewFaqEntryAttributesPartialWithDefaults instantiates a new FaqEntryAttributesPartial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFaqEntryAttributesPartialWithDefaults() *FaqEntryAttributesPartial {
	this := FaqEntryAttributesPartial{}
	return &this
}

// GetQuestion returns the Question field value
func (o *FaqEntryAttributesPartial) GetQuestion() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Question
}

// GetQuestionOk returns a tuple with the Question field value
// and a boolean to check if the value has been set.
func (o *FaqEntryAttributesPartial) GetQuestionOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Question, true
}

// SetQuestion sets field value
func (o *FaqEntryAttributesPartial) SetQuestion(v map[string]string) {
	o.Question = v
}

// GetAnswer returns the Answer field value
func (o *FaqEntryAttributesPartial) GetAnswer() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value
// and a boolean to check if the value has been set.
func (o *FaqEntryAttributesPartial) GetAnswerOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Answer, true
}

// SetAnswer sets field value
func (o *FaqEntryAttributesPartial) SetAnswer(v map[string]string) {
	o.Answer = v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *FaqEntryAttributesPartial) GetKeywords() []string {
	if o == nil || IsNil(o.Keywords) {
		var ret []string
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FaqEntryAttributesPartial) GetKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *FaqEntryAttributesPartial) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []string and assigns it to the Keywords field.
func (o *FaqEntryAttributesPartial) SetKeywords(v []string) {
	o.Keywords = v
}

func (o FaqEntryAttributesPartial) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FaqEntryAttributesPartial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["question"] = o.Question
	toSerialize["answer"] = o.Answer
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	return toSerialize, nil
}

func (o *FaqEntryAttributesPartial) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"question",
		"answer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFaqEntryAttributesPartial := _FaqEntryAttributesPartial{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFaqEntryAttributesPartial)

	if err != nil {
		return err
	}

	*o = FaqEntryAttributesPartial(varFaqEntryAttributesPartial)

	return err
}

type NullableFaqEntryAttributesPartial struct {
	value *FaqEntryAttributesPartial
	isSet bool
}

func (v NullableFaqEntryAttributesPartial) Get() *FaqEntryAttributesPartial {
	return v.value
}

func (v *NullableFaqEntryAttributesPartial) Set(val *FaqEntryAttributesPartial) {
	v.value = val
	v.isSet = true
}

func (v NullableFaqEntryAttributesPartial) IsSet() bool {
	return v.isSet
}

func (v *NullableFaqEntryAttributesPartial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFaqEntryAttributesPartial(val *FaqEntryAttributesPartial) *NullableFaqEntryAttributesPartial {
	return &NullableFaqEntryAttributesPartial{value: val, isSet: true}
}

func (v NullableFaqEntryAttributesPartial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFaqEntryAttributesPartial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
