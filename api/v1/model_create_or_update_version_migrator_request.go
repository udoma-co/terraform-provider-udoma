/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateOrUpdateVersionMigratorRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrUpdateVersionMigratorRequest{}

// CreateOrUpdateVersionMigratorRequest The data required to create or update a version migrator
type CreateOrUpdateVersionMigratorRequest struct {
	// The id of the template/definition that this migrator is for.
	RefId string `json:"ref_id"`
	// The version of the template/definition that an entity has to be  referencing, so that the migrator can be applied.
	SourceVersion *int32 `json:"source_version,omitempty"`
	// The version of the template/definition that an entity will be  referencing after the migrator has been applied.
	TargetVersion int32 `json:"target_version"`
	// The JS code that will be executed to migrate the data from the source  version to the target version.
	Script string `json:"script"`
}

type _CreateOrUpdateVersionMigratorRequest CreateOrUpdateVersionMigratorRequest

// NewCreateOrUpdateVersionMigratorRequest instantiates a new CreateOrUpdateVersionMigratorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrUpdateVersionMigratorRequest(refId string, targetVersion int32, script string) *CreateOrUpdateVersionMigratorRequest {
	this := CreateOrUpdateVersionMigratorRequest{}
	this.RefId = refId
	this.TargetVersion = targetVersion
	this.Script = script
	return &this
}

// NewCreateOrUpdateVersionMigratorRequestWithDefaults instantiates a new CreateOrUpdateVersionMigratorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrUpdateVersionMigratorRequestWithDefaults() *CreateOrUpdateVersionMigratorRequest {
	this := CreateOrUpdateVersionMigratorRequest{}
	return &this
}

// GetRefId returns the RefId field value
func (o *CreateOrUpdateVersionMigratorRequest) GetRefId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateVersionMigratorRequest) GetRefIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefId, true
}

// SetRefId sets field value
func (o *CreateOrUpdateVersionMigratorRequest) SetRefId(v string) {
	o.RefId = v
}

// GetSourceVersion returns the SourceVersion field value if set, zero value otherwise.
func (o *CreateOrUpdateVersionMigratorRequest) GetSourceVersion() int32 {
	if o == nil || IsNil(o.SourceVersion) {
		var ret int32
		return ret
	}
	return *o.SourceVersion
}

// GetSourceVersionOk returns a tuple with the SourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateVersionMigratorRequest) GetSourceVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.SourceVersion) {
		return nil, false
	}
	return o.SourceVersion, true
}

// HasSourceVersion returns a boolean if a field has been set.
func (o *CreateOrUpdateVersionMigratorRequest) HasSourceVersion() bool {
	if o != nil && !IsNil(o.SourceVersion) {
		return true
	}

	return false
}

// SetSourceVersion gets a reference to the given int32 and assigns it to the SourceVersion field.
func (o *CreateOrUpdateVersionMigratorRequest) SetSourceVersion(v int32) {
	o.SourceVersion = &v
}

// GetTargetVersion returns the TargetVersion field value
func (o *CreateOrUpdateVersionMigratorRequest) GetTargetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TargetVersion
}

// GetTargetVersionOk returns a tuple with the TargetVersion field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateVersionMigratorRequest) GetTargetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetVersion, true
}

// SetTargetVersion sets field value
func (o *CreateOrUpdateVersionMigratorRequest) SetTargetVersion(v int32) {
	o.TargetVersion = v
}

// GetScript returns the Script field value
func (o *CreateOrUpdateVersionMigratorRequest) GetScript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Script
}

// GetScriptOk returns a tuple with the Script field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateVersionMigratorRequest) GetScriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Script, true
}

// SetScript sets field value
func (o *CreateOrUpdateVersionMigratorRequest) SetScript(v string) {
	o.Script = v
}

func (o CreateOrUpdateVersionMigratorRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrUpdateVersionMigratorRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ref_id"] = o.RefId
	if !IsNil(o.SourceVersion) {
		toSerialize["source_version"] = o.SourceVersion
	}
	toSerialize["target_version"] = o.TargetVersion
	toSerialize["script"] = o.Script
	return toSerialize, nil
}

func (o *CreateOrUpdateVersionMigratorRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ref_id",
		"target_version",
		"script",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateOrUpdateVersionMigratorRequest := _CreateOrUpdateVersionMigratorRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateOrUpdateVersionMigratorRequest)

	if err != nil {
		return err
	}

	*o = CreateOrUpdateVersionMigratorRequest(varCreateOrUpdateVersionMigratorRequest)

	return err
}

type NullableCreateOrUpdateVersionMigratorRequest struct {
	value *CreateOrUpdateVersionMigratorRequest
	isSet bool
}

func (v NullableCreateOrUpdateVersionMigratorRequest) Get() *CreateOrUpdateVersionMigratorRequest {
	return v.value
}

func (v *NullableCreateOrUpdateVersionMigratorRequest) Set(val *CreateOrUpdateVersionMigratorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrUpdateVersionMigratorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrUpdateVersionMigratorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrUpdateVersionMigratorRequest(val *CreateOrUpdateVersionMigratorRequest) *NullableCreateOrUpdateVersionMigratorRequest {
	return &NullableCreateOrUpdateVersionMigratorRequest{value: val, isSet: true}
}

func (v NullableCreateOrUpdateVersionMigratorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrUpdateVersionMigratorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
