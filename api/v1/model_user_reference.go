/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// UserReference Contains information about a user referenced in other entities
type UserReference struct {
	// The ID of the user, can be undefined, if user is not registered, or was already deleted
	UserId      *string      `json:"user_id,omitempty"`
	ContactData *ContactData `json:"contact_data,omitempty"`
}

// NewUserReference instantiates a new UserReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserReference() *UserReference {
	this := UserReference{}
	return &this
}

// NewUserReferenceWithDefaults instantiates a new UserReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserReferenceWithDefaults() *UserReference {
	this := UserReference{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserReference) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserReference) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserReference) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserReference) SetUserId(v string) {
	o.UserId = &v
}

// GetContactData returns the ContactData field value if set, zero value otherwise.
func (o *UserReference) GetContactData() ContactData {
	if o == nil || o.ContactData == nil {
		var ret ContactData
		return ret
	}
	return *o.ContactData
}

// GetContactDataOk returns a tuple with the ContactData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserReference) GetContactDataOk() (*ContactData, bool) {
	if o == nil || o.ContactData == nil {
		return nil, false
	}
	return o.ContactData, true
}

// HasContactData returns a boolean if a field has been set.
func (o *UserReference) HasContactData() bool {
	if o != nil && o.ContactData != nil {
		return true
	}

	return false
}

// SetContactData gets a reference to the given ContactData and assigns it to the ContactData field.
func (o *UserReference) SetContactData(v ContactData) {
	o.ContactData = &v
}

func (o UserReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.ContactData != nil {
		toSerialize["contact_data"] = o.ContactData
	}
	return json.Marshal(toSerialize)
}

type NullableUserReference struct {
	value *UserReference
	isSet bool
}

func (v NullableUserReference) Get() *UserReference {
	return v.value
}

func (v *NullableUserReference) Set(val *UserReference) {
	v.value = val
	v.isSet = true
}

func (v NullableUserReference) IsSet() bool {
	return v.isSet
}

func (v *NullableUserReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserReference(val *UserReference) *NullableUserReference {
	return &NullableUserReference{value: val, isSet: true}
}

func (v NullableUserReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
