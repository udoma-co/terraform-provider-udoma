/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BankTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BankTransaction{}

// BankTransaction A single transaction done on a bank account
type BankTransaction struct {
	// Unique and immutable ID attribute of the entity that is generated when  the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities  or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt int64 `json:"updated_at"`
	// The timestamp of the transaction
	Date int64 `json:"date"`
	// The type of the transaction (e.g. 'deposit', 'withdrawal', etc.)
	Type string `json:"type"`
	// The amount of the transaction
	Amount float64 `json:"amount"`
	// The description text provided for the transaction
	Description string `json:"description"`
	// The name of holder of the source/target account of the transaction
	SourceTargetName string `json:"source_target_name"`
	// The IBAN of the source/target account of the transaction
	SourceTargetIban string `json:"source_target_iban"`
}

type _BankTransaction BankTransaction

// NewBankTransaction instantiates a new BankTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankTransaction(id string, createdAt int64, updatedAt int64, date int64, type_ string, amount float64, description string, sourceTargetName string, sourceTargetIban string) *BankTransaction {
	this := BankTransaction{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Date = date
	this.Type = type_
	this.Amount = amount
	this.Description = description
	this.SourceTargetName = sourceTargetName
	this.SourceTargetIban = sourceTargetIban
	return &this
}

// NewBankTransactionWithDefaults instantiates a new BankTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankTransactionWithDefaults() *BankTransaction {
	this := BankTransaction{}
	return &this
}

// GetId returns the Id field value
func (o *BankTransaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BankTransaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BankTransaction) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BankTransaction) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BankTransaction) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BankTransaction) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *BankTransaction) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *BankTransaction) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *BankTransaction) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetDate returns the Date field value
func (o *BankTransaction) GetDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *BankTransaction) GetDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *BankTransaction) SetDate(v int64) {
	o.Date = v
}

// GetType returns the Type field value
func (o *BankTransaction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BankTransaction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BankTransaction) SetType(v string) {
	o.Type = v
}

// GetAmount returns the Amount field value
func (o *BankTransaction) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *BankTransaction) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *BankTransaction) SetAmount(v float64) {
	o.Amount = v
}

// GetDescription returns the Description field value
func (o *BankTransaction) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *BankTransaction) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *BankTransaction) SetDescription(v string) {
	o.Description = v
}

// GetSourceTargetName returns the SourceTargetName field value
func (o *BankTransaction) GetSourceTargetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceTargetName
}

// GetSourceTargetNameOk returns a tuple with the SourceTargetName field value
// and a boolean to check if the value has been set.
func (o *BankTransaction) GetSourceTargetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceTargetName, true
}

// SetSourceTargetName sets field value
func (o *BankTransaction) SetSourceTargetName(v string) {
	o.SourceTargetName = v
}

// GetSourceTargetIban returns the SourceTargetIban field value
func (o *BankTransaction) GetSourceTargetIban() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceTargetIban
}

// GetSourceTargetIbanOk returns a tuple with the SourceTargetIban field value
// and a boolean to check if the value has been set.
func (o *BankTransaction) GetSourceTargetIbanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceTargetIban, true
}

// SetSourceTargetIban sets field value
func (o *BankTransaction) SetSourceTargetIban(v string) {
	o.SourceTargetIban = v
}

func (o BankTransaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BankTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["date"] = o.Date
	toSerialize["type"] = o.Type
	toSerialize["amount"] = o.Amount
	toSerialize["description"] = o.Description
	toSerialize["source_target_name"] = o.SourceTargetName
	toSerialize["source_target_iban"] = o.SourceTargetIban
	return toSerialize, nil
}

func (o *BankTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"date",
		"type",
		"amount",
		"description",
		"source_target_name",
		"source_target_iban",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBankTransaction := _BankTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBankTransaction)

	if err != nil {
		return err
	}

	*o = BankTransaction(varBankTransaction)

	return err
}

type NullableBankTransaction struct {
	value *BankTransaction
	isSet bool
}

func (v NullableBankTransaction) Get() *BankTransaction {
	return v.value
}

func (v *NullableBankTransaction) Set(val *BankTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableBankTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableBankTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankTransaction(val *BankTransaction) *NullableBankTransaction {
	return &NullableBankTransaction{value: val, isSet: true}
}

func (v NullableBankTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
