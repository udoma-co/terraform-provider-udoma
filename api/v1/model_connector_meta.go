/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ConnectorMeta struct for ConnectorMeta
type ConnectorMeta struct {
	// id of the connector
	ConnectorId *string `json:"connector_id,omitempty"`
	// version of the connector
	Version *string `json:"version,omitempty"`
}

// NewConnectorMeta instantiates a new ConnectorMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorMeta() *ConnectorMeta {
	this := ConnectorMeta{}
	return &this
}

// NewConnectorMetaWithDefaults instantiates a new ConnectorMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorMetaWithDefaults() *ConnectorMeta {
	this := ConnectorMeta{}
	return &this
}

// GetConnectorId returns the ConnectorId field value if set, zero value otherwise.
func (o *ConnectorMeta) GetConnectorId() string {
	if o == nil || o.ConnectorId == nil {
		var ret string
		return ret
	}
	return *o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorMeta) GetConnectorIdOk() (*string, bool) {
	if o == nil || o.ConnectorId == nil {
		return nil, false
	}
	return o.ConnectorId, true
}

// HasConnectorId returns a boolean if a field has been set.
func (o *ConnectorMeta) HasConnectorId() bool {
	if o != nil && o.ConnectorId != nil {
		return true
	}

	return false
}

// SetConnectorId gets a reference to the given string and assigns it to the ConnectorId field.
func (o *ConnectorMeta) SetConnectorId(v string) {
	o.ConnectorId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ConnectorMeta) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorMeta) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ConnectorMeta) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ConnectorMeta) SetVersion(v string) {
	o.Version = &v
}

func (o ConnectorMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectorId != nil {
		toSerialize["connector_id"] = o.ConnectorId
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorMeta struct {
	value *ConnectorMeta
	isSet bool
}

func (v NullableConnectorMeta) Get() *ConnectorMeta {
	return v.value
}

func (v *NullableConnectorMeta) Set(val *ConnectorMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorMeta(val *ConnectorMeta) *NullableConnectorMeta {
	return &NullableConnectorMeta{value: val, isSet: true}
}

func (v NullableConnectorMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
