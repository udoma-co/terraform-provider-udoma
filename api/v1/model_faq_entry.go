/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FAQEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FAQEntry{}

// FAQEntry struct for FAQEntry
type FAQEntry struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// a map of values, where the key and values are strings
	Question map[string]string `json:"question"`
	// a map of values, where the key and values are strings
	Answer   map[string]string `json:"answer"`
	Keywords []string          `json:"keywords,omitempty"`
}

type _FAQEntry FAQEntry

// NewFAQEntry instantiates a new FAQEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFAQEntry(id string, question map[string]string, answer map[string]string) *FAQEntry {
	this := FAQEntry{}
	this.Id = id
	this.Question = question
	this.Answer = answer
	return &this
}

// NewFAQEntryWithDefaults instantiates a new FAQEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFAQEntryWithDefaults() *FAQEntry {
	this := FAQEntry{}
	return &this
}

// GetId returns the Id field value
func (o *FAQEntry) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FAQEntry) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FAQEntry) SetId(v string) {
	o.Id = v
}

// GetQuestion returns the Question field value
func (o *FAQEntry) GetQuestion() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Question
}

// GetQuestionOk returns a tuple with the Question field value
// and a boolean to check if the value has been set.
func (o *FAQEntry) GetQuestionOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Question, true
}

// SetQuestion sets field value
func (o *FAQEntry) SetQuestion(v map[string]string) {
	o.Question = v
}

// GetAnswer returns the Answer field value
func (o *FAQEntry) GetAnswer() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value
// and a boolean to check if the value has been set.
func (o *FAQEntry) GetAnswerOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Answer, true
}

// SetAnswer sets field value
func (o *FAQEntry) SetAnswer(v map[string]string) {
	o.Answer = v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *FAQEntry) GetKeywords() []string {
	if o == nil || IsNil(o.Keywords) {
		var ret []string
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FAQEntry) GetKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *FAQEntry) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []string and assigns it to the Keywords field.
func (o *FAQEntry) SetKeywords(v []string) {
	o.Keywords = v
}

func (o FAQEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FAQEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["question"] = o.Question
	toSerialize["answer"] = o.Answer
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	return toSerialize, nil
}

func (o *FAQEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"question",
		"answer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFAQEntry := _FAQEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFAQEntry)

	if err != nil {
		return err
	}

	*o = FAQEntry(varFAQEntry)

	return err
}

type NullableFAQEntry struct {
	value *FAQEntry
	isSet bool
}

func (v NullableFAQEntry) Get() *FAQEntry {
	return v.value
}

func (v *NullableFAQEntry) Set(val *FAQEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableFAQEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableFAQEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFAQEntry(val *FAQEntry) *NullableFAQEntry {
	return &NullableFAQEntry{value: val, isSet: true}
}

func (v NullableFAQEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFAQEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
