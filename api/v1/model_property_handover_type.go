/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// PropertyHandoverType The allowed values for a property handover type.
type PropertyHandoverType string

// List of PropertyHandoverType
const (
	PROPERTYHANDOVERTYPE_MOVE_IN  PropertyHandoverType = "MOVE_IN"
	PROPERTYHANDOVERTYPE_MOVE_OUT PropertyHandoverType = "MOVE_OUT"
	PROPERTYHANDOVERTYPE_TRANSFER PropertyHandoverType = "TRANSFER"
)

// All allowed values of PropertyHandoverType enum
var AllowedPropertyHandoverTypeEnumValues = []PropertyHandoverType{
	"MOVE_IN",
	"MOVE_OUT",
	"TRANSFER",
}

func (v *PropertyHandoverType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyHandoverType(value)
	for _, existing := range AllowedPropertyHandoverTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyHandoverType", value)
}

// NewPropertyHandoverTypeFromValue returns a pointer to a valid PropertyHandoverType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyHandoverTypeFromValue(v string) (*PropertyHandoverType, error) {
	ev := PropertyHandoverType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyHandoverType: valid values are %v", v, AllowedPropertyHandoverTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyHandoverType) IsValid() bool {
	for _, existing := range AllowedPropertyHandoverTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyHandoverType value
func (v PropertyHandoverType) Ptr() *PropertyHandoverType {
	return &v
}

type NullablePropertyHandoverType struct {
	value *PropertyHandoverType
	isSet bool
}

func (v NullablePropertyHandoverType) Get() *PropertyHandoverType {
	return v.value
}

func (v *NullablePropertyHandoverType) Set(val *PropertyHandoverType) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyHandoverType) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyHandoverType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyHandoverType(val *PropertyHandoverType) *NullablePropertyHandoverType {
	return &NullablePropertyHandoverType{value: val, isSet: true}
}

func (v NullablePropertyHandoverType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyHandoverType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
