/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the Signature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Signature{}

// Signature A request, made to yousign, for an electronic document signature.
type Signature struct {
	// Unique identifier of the signature request.
	Id *string `json:"id,omitempty"`
	// A reference to the account the signature request belongs to.
	AccountRef *int64 `json:"account_ref,omitempty"`
	// The unix timestamp of the creation of the object.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// A unix timestamp of the last time the object was changed.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// A reference to the document generation used to generate the document we are signing.
	DocumentGenerationRef *string              `json:"document_generation_ref,omitempty"`
	Status                *SignatureStatusType `json:"status,omitempty"`
	// A timestamp of when the signature request expires.
	ExpirationDate *int64            `json:"expiration_date,omitempty"`
	Signers        []SignatureSigner `json:"signers,omitempty"`
}

// NewSignature instantiates a new Signature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignature() *Signature {
	this := Signature{}
	return &this
}

// NewSignatureWithDefaults instantiates a new Signature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignatureWithDefaults() *Signature {
	this := Signature{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Signature) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Signature) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Signature) SetId(v string) {
	o.Id = &v
}

// GetAccountRef returns the AccountRef field value if set, zero value otherwise.
func (o *Signature) GetAccountRef() int64 {
	if o == nil || IsNil(o.AccountRef) {
		var ret int64
		return ret
	}
	return *o.AccountRef
}

// GetAccountRefOk returns a tuple with the AccountRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetAccountRefOk() (*int64, bool) {
	if o == nil || IsNil(o.AccountRef) {
		return nil, false
	}
	return o.AccountRef, true
}

// HasAccountRef returns a boolean if a field has been set.
func (o *Signature) HasAccountRef() bool {
	if o != nil && !IsNil(o.AccountRef) {
		return true
	}

	return false
}

// SetAccountRef gets a reference to the given int64 and assigns it to the AccountRef field.
func (o *Signature) SetAccountRef(v int64) {
	o.AccountRef = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Signature) GetCreatedAt() int64 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetCreatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Signature) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *Signature) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Signature) GetUpdatedAt() int64 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Signature) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *Signature) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetDocumentGenerationRef returns the DocumentGenerationRef field value if set, zero value otherwise.
func (o *Signature) GetDocumentGenerationRef() string {
	if o == nil || IsNil(o.DocumentGenerationRef) {
		var ret string
		return ret
	}
	return *o.DocumentGenerationRef
}

// GetDocumentGenerationRefOk returns a tuple with the DocumentGenerationRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetDocumentGenerationRefOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentGenerationRef) {
		return nil, false
	}
	return o.DocumentGenerationRef, true
}

// HasDocumentGenerationRef returns a boolean if a field has been set.
func (o *Signature) HasDocumentGenerationRef() bool {
	if o != nil && !IsNil(o.DocumentGenerationRef) {
		return true
	}

	return false
}

// SetDocumentGenerationRef gets a reference to the given string and assigns it to the DocumentGenerationRef field.
func (o *Signature) SetDocumentGenerationRef(v string) {
	o.DocumentGenerationRef = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Signature) GetStatus() SignatureStatusType {
	if o == nil || IsNil(o.Status) {
		var ret SignatureStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetStatusOk() (*SignatureStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Signature) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SignatureStatusType and assigns it to the Status field.
func (o *Signature) SetStatus(v SignatureStatusType) {
	o.Status = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Signature) GetExpirationDate() int64 {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret int64
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetExpirationDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Signature) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given int64 and assigns it to the ExpirationDate field.
func (o *Signature) SetExpirationDate(v int64) {
	o.ExpirationDate = &v
}

// GetSigners returns the Signers field value if set, zero value otherwise.
func (o *Signature) GetSigners() []SignatureSigner {
	if o == nil || IsNil(o.Signers) {
		var ret []SignatureSigner
		return ret
	}
	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signature) GetSignersOk() ([]SignatureSigner, bool) {
	if o == nil || IsNil(o.Signers) {
		return nil, false
	}
	return o.Signers, true
}

// HasSigners returns a boolean if a field has been set.
func (o *Signature) HasSigners() bool {
	if o != nil && !IsNil(o.Signers) {
		return true
	}

	return false
}

// SetSigners gets a reference to the given []SignatureSigner and assigns it to the Signers field.
func (o *Signature) SetSigners(v []SignatureSigner) {
	o.Signers = v
}

func (o Signature) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Signature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AccountRef) {
		toSerialize["account_ref"] = o.AccountRef
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DocumentGenerationRef) {
		toSerialize["document_generation_ref"] = o.DocumentGenerationRef
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if !IsNil(o.Signers) {
		toSerialize["signers"] = o.Signers
	}
	return toSerialize, nil
}

type NullableSignature struct {
	value *Signature
	isSet bool
}

func (v NullableSignature) Get() *Signature {
	return v.value
}

func (v *NullableSignature) Set(val *Signature) {
	v.value = val
	v.isSet = true
}

func (v NullableSignature) IsSet() bool {
	return v.isSet
}

func (v *NullableSignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignature(val *Signature) *NullableSignature {
	return &NullableSignature{value: val, isSet: true}
}

func (v NullableSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
