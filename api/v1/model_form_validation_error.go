/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the FormValidationError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormValidationError{}

// FormValidationError a custom validation that is used to validate data provided by the user
type FormValidationError struct {
	// a map of values, where the key and values are strings
	Message *map[string]string `json:"message,omitempty"`
	// the index of the input that failed validation (nesting is supported via dot notation)
	Target *string `json:"target,omitempty"`
}

// NewFormValidationError instantiates a new FormValidationError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormValidationError() *FormValidationError {
	this := FormValidationError{}
	return &this
}

// NewFormValidationErrorWithDefaults instantiates a new FormValidationError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormValidationErrorWithDefaults() *FormValidationError {
	this := FormValidationError{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *FormValidationError) GetMessage() map[string]string {
	if o == nil || IsNil(o.Message) {
		var ret map[string]string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormValidationError) GetMessageOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *FormValidationError) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given map[string]string and assigns it to the Message field.
func (o *FormValidationError) SetMessage(v map[string]string) {
	o.Message = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *FormValidationError) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormValidationError) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *FormValidationError) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *FormValidationError) SetTarget(v string) {
	o.Target = &v
}

func (o FormValidationError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormValidationError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	return toSerialize, nil
}

type NullableFormValidationError struct {
	value *FormValidationError
	isSet bool
}

func (v NullableFormValidationError) Get() *FormValidationError {
	return v.value
}

func (v *NullableFormValidationError) Set(val *FormValidationError) {
	v.value = val
	v.isSet = true
}

func (v NullableFormValidationError) IsSet() bool {
	return v.isSet
}

func (v *NullableFormValidationError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormValidationError(val *FormValidationError) *NullableFormValidationError {
	return &NullableFormValidationError{value: val, isSet: true}
}

func (v NullableFormValidationError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormValidationError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
