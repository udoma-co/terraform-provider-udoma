/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// WorkflowEntrypointLocation the model 'WorkflowEntrypointLocation'
type WorkflowEntrypointLocation string

// List of WorkflowEntrypointLocation
const (
	WORKFLOWENTRYPOINTLOCATION_MANUAL          WorkflowEntrypointLocation = "manual"
	WORKFLOWENTRYPOINTLOCATION_PROPERTY        WorkflowEntrypointLocation = "property"
	WORKFLOWENTRYPOINTLOCATION_TENANCY         WorkflowEntrypointLocation = "tenancy"
	WORKFLOWENTRYPOINTLOCATION_TENANT          WorkflowEntrypointLocation = "tenant"
	WORKFLOWENTRYPOINTLOCATION_CASE            WorkflowEntrypointLocation = "case"
	WORKFLOWENTRYPOINTLOCATION_REPORT          WorkflowEntrypointLocation = "report"
	WORKFLOWENTRYPOINTLOCATION_DATA_COLLECTION WorkflowEntrypointLocation = "data_collection"
)

// All allowed values of WorkflowEntrypointLocation enum
var AllowedWorkflowEntrypointLocationEnumValues = []WorkflowEntrypointLocation{
	"manual",
	"property",
	"tenancy",
	"tenant",
	"case",
	"report",
	"data_collection",
}

func (v *WorkflowEntrypointLocation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkflowEntrypointLocation(value)
	for _, existing := range AllowedWorkflowEntrypointLocationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkflowEntrypointLocation", value)
}

// NewWorkflowEntrypointLocationFromValue returns a pointer to a valid WorkflowEntrypointLocation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkflowEntrypointLocationFromValue(v string) (*WorkflowEntrypointLocation, error) {
	ev := WorkflowEntrypointLocation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkflowEntrypointLocation: valid values are %v", v, AllowedWorkflowEntrypointLocationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkflowEntrypointLocation) IsValid() bool {
	for _, existing := range AllowedWorkflowEntrypointLocationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkflowEntrypointLocation value
func (v WorkflowEntrypointLocation) Ptr() *WorkflowEntrypointLocation {
	return &v
}

type NullableWorkflowEntrypointLocation struct {
	value *WorkflowEntrypointLocation
	isSet bool
}

func (v NullableWorkflowEntrypointLocation) Get() *WorkflowEntrypointLocation {
	return v.value
}

func (v *NullableWorkflowEntrypointLocation) Set(val *WorkflowEntrypointLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowEntrypointLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowEntrypointLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowEntrypointLocation(val *WorkflowEntrypointLocation) *NullableWorkflowEntrypointLocation {
	return &NullableWorkflowEntrypointLocation{value: val, isSet: true}
}

func (v NullableWorkflowEntrypointLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowEntrypointLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
