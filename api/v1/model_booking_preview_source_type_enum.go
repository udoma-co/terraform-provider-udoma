/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// BookingPreviewSourceTypeEnum the model 'BookingPreviewSourceTypeEnum'
type BookingPreviewSourceTypeEnum string

// List of BookingPreviewSourceTypeEnum
const (
	BOOKINGPREVIEWSOURCETYPEENUM_MANUAL      BookingPreviewSourceTypeEnum = "manual"
	BOOKINGPREVIEWSOURCETYPEENUM_TEMPLATE    BookingPreviewSourceTypeEnum = "template"
	BOOKINGPREVIEWSOURCETYPEENUM_TRANSACTION BookingPreviewSourceTypeEnum = "transaction"
)

// All allowed values of BookingPreviewSourceTypeEnum enum
var AllowedBookingPreviewSourceTypeEnumEnumValues = []BookingPreviewSourceTypeEnum{
	"manual",
	"template",
	"transaction",
}

func (v *BookingPreviewSourceTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BookingPreviewSourceTypeEnum(value)
	for _, existing := range AllowedBookingPreviewSourceTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BookingPreviewSourceTypeEnum", value)
}

// NewBookingPreviewSourceTypeEnumFromValue returns a pointer to a valid BookingPreviewSourceTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBookingPreviewSourceTypeEnumFromValue(v string) (*BookingPreviewSourceTypeEnum, error) {
	ev := BookingPreviewSourceTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BookingPreviewSourceTypeEnum: valid values are %v", v, AllowedBookingPreviewSourceTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BookingPreviewSourceTypeEnum) IsValid() bool {
	for _, existing := range AllowedBookingPreviewSourceTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BookingPreviewSourceTypeEnum value
func (v BookingPreviewSourceTypeEnum) Ptr() *BookingPreviewSourceTypeEnum {
	return &v
}

type NullableBookingPreviewSourceTypeEnum struct {
	value *BookingPreviewSourceTypeEnum
	isSet bool
}

func (v NullableBookingPreviewSourceTypeEnum) Get() *BookingPreviewSourceTypeEnum {
	return v.value
}

func (v *NullableBookingPreviewSourceTypeEnum) Set(val *BookingPreviewSourceTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableBookingPreviewSourceTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableBookingPreviewSourceTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookingPreviewSourceTypeEnum(val *BookingPreviewSourceTypeEnum) *NullableBookingPreviewSourceTypeEnum {
	return &NullableBookingPreviewSourceTypeEnum{value: val, isSet: true}
}

func (v NullableBookingPreviewSourceTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookingPreviewSourceTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
