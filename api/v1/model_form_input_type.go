/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// FormInputType the model 'FormInputType'
type FormInputType string

// List of FormInputType
const (
	FORMINPUTTYPE_TEXT                 FormInputType = "text"
	FORMINPUTTYPE_NUMBER               FormInputType = "number"
	FORMINPUTTYPE_DATE                 FormInputType = "date"
	FORMINPUTTYPE_BOOLEAN              FormInputType = "boolean"
	FORMINPUTTYPE_SINGLE_SELECT        FormInputType = "single_select"
	FORMINPUTTYPE_MULTI_SELECT         FormInputType = "multi_select"
	FORMINPUTTYPE_FILE                 FormInputType = "file"
	FORMINPUTTYPE_ID_UPLOAD            FormInputType = "id_upload"
	FORMINPUTTYPE_ADDRESS              FormInputType = "address"
	FORMINPUTTYPE_CONTACT_DATA         FormInputType = "contact_data"
	FORMINPUTTYPE_RENT                 FormInputType = "rent"
	FORMINPUTTYPE_BANK_ACCOUNT         FormInputType = "bank_account"
	FORMINPUTTYPE_YES_NO_OR_VALUE      FormInputType = "yes_no_or_value"
	FORMINPUTTYPE_SERVICE_PROVIDER_REF FormInputType = "service_provider_ref"
	FORMINPUTTYPE_PROPERTY_REF         FormInputType = "property_ref"
	FORMINPUTTYPE_OWNER_REF            FormInputType = "owner_ref"
	FORMINPUTTYPE_TENANT_REF           FormInputType = "tenant_ref"
	FORMINPUTTYPE_SUGGESTION           FormInputType = "suggestion"
	FORMINPUTTYPE_REPORTER             FormInputType = "reporter"
	FORMINPUTTYPE_PROPERTY             FormInputType = "property"
	FORMINPUTTYPE_CASE_PARTY           FormInputType = "case_party"
	FORMINPUTTYPE_SIGNATURE            FormInputType = "signature"
)

// All allowed values of FormInputType enum
var AllowedFormInputTypeEnumValues = []FormInputType{
	"text",
	"number",
	"date",
	"boolean",
	"single_select",
	"multi_select",
	"file",
	"id_upload",
	"address",
	"contact_data",
	"rent",
	"bank_account",
	"yes_no_or_value",
	"service_provider_ref",
	"property_ref",
	"owner_ref",
	"tenant_ref",
	"suggestion",
	"reporter",
	"property",
	"case_party",
	"signature",
}

func (v *FormInputType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FormInputType(value)
	for _, existing := range AllowedFormInputTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FormInputType", value)
}

// NewFormInputTypeFromValue returns a pointer to a valid FormInputType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFormInputTypeFromValue(v string) (*FormInputType, error) {
	ev := FormInputType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FormInputType: valid values are %v", v, AllowedFormInputTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FormInputType) IsValid() bool {
	for _, existing := range AllowedFormInputTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FormInputType value
func (v FormInputType) Ptr() *FormInputType {
	return &v
}

type NullableFormInputType struct {
	value *FormInputType
	isSet bool
}

func (v NullableFormInputType) Get() *FormInputType {
	return v.value
}

func (v *NullableFormInputType) Set(val *FormInputType) {
	v.value = val
	v.isSet = true
}

func (v NullableFormInputType) IsSet() bool {
	return v.isSet
}

func (v *NullableFormInputType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormInputType(val *FormInputType) *NullableFormInputType {
	return &NullableFormInputType{value: val, isSet: true}
}

func (v NullableFormInputType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormInputType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
