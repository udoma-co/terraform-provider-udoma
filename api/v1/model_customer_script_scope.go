/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// CustomerScriptScope the model 'CustomerScriptScope'
type CustomerScriptScope string

// List of CustomerScriptScope
const (
	CUSTOMERSCRIPTSCOPE_GLOBAL     CustomerScriptScope = "GLOBAL"
	CUSTOMERSCRIPTSCOPE_DOCUMENT   CustomerScriptScope = "DOCUMENT"
	CUSTOMERSCRIPTSCOPE_WORKFLOW   CustomerScriptScope = "WORKFLOW"
	CUSTOMERSCRIPTSCOPE_REPORT     CustomerScriptScope = "REPORT"
	CUSTOMERSCRIPTSCOPE_VALIDATION CustomerScriptScope = "VALIDATION"
)

// All allowed values of CustomerScriptScope enum
var AllowedCustomerScriptScopeEnumValues = []CustomerScriptScope{
	"GLOBAL",
	"DOCUMENT",
	"WORKFLOW",
	"REPORT",
	"VALIDATION",
}

func (v *CustomerScriptScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomerScriptScope(value)
	for _, existing := range AllowedCustomerScriptScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomerScriptScope", value)
}

// NewCustomerScriptScopeFromValue returns a pointer to a valid CustomerScriptScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomerScriptScopeFromValue(v string) (*CustomerScriptScope, error) {
	ev := CustomerScriptScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomerScriptScope: valid values are %v", v, AllowedCustomerScriptScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomerScriptScope) IsValid() bool {
	for _, existing := range AllowedCustomerScriptScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CustomerScriptScope value
func (v CustomerScriptScope) Ptr() *CustomerScriptScope {
	return &v
}

type NullableCustomerScriptScope struct {
	value *CustomerScriptScope
	isSet bool
}

func (v NullableCustomerScriptScope) Get() *CustomerScriptScope {
	return v.value
}

func (v *NullableCustomerScriptScope) Set(val *CustomerScriptScope) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerScriptScope) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerScriptScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerScriptScope(val *CustomerScriptScope) *NullableCustomerScriptScope {
	return &NullableCustomerScriptScope{value: val, isSet: true}
}

func (v NullableCustomerScriptScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerScriptScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
