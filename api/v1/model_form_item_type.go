/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// FormItemType the model 'FormItemType'
type FormItemType string

// List of FormItemType
const (
	FORMITEMTYPE_INPUT FormItemType = "input"
	FORMITEMTYPE_GROUP FormItemType = "group"
)

// All allowed values of FormItemType enum
var AllowedFormItemTypeEnumValues = []FormItemType{
	"input",
	"group",
}

func (v *FormItemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FormItemType(value)
	for _, existing := range AllowedFormItemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FormItemType", value)
}

// NewFormItemTypeFromValue returns a pointer to a valid FormItemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFormItemTypeFromValue(v string) (*FormItemType, error) {
	ev := FormItemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FormItemType: valid values are %v", v, AllowedFormItemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FormItemType) IsValid() bool {
	for _, existing := range AllowedFormItemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FormItemType value
func (v FormItemType) Ptr() *FormItemType {
	return &v
}

type NullableFormItemType struct {
	value *FormItemType
	isSet bool
}

func (v NullableFormItemType) Get() *FormItemType {
	return v.value
}

func (v *NullableFormItemType) Set(val *FormItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableFormItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableFormItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormItemType(val *FormItemType) *NullableFormItemType {
	return &NullableFormItemType{value: val, isSet: true}
}

func (v NullableFormItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
