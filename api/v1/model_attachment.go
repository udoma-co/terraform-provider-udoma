/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Attachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attachment{}

// Attachment A file uploaded and attached to an entity (e.g. case, property, etc.)
type Attachment struct {
	// the unique ID of the uploaded file
	Id string `json:"id"`
	// timestamp indicating when the attachment was uploaded
	Created int64 `json:"created"`
	// the content type of the attachment
	FileType string `json:"file_type"`
	// the size of the attachment in bytes
	FileSize int64 `json:"file_size"`
	// the original file name
	FileName string `json:"file_name"`
	// the sha256 sum of the file
	FileSha256 string `json:"file_sha256"`
	// optional link to thumbnail (only if file is an image)
	Thumbnail *string `json:"thumbnail,omitempty"`
	// link to the actual file, through whitch it can be downloaded
	Url string `json:"url"`
}

type _Attachment Attachment

// NewAttachment instantiates a new Attachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachment(id string, created int64, fileType string, fileSize int64, fileName string, fileSha256 string, url string) *Attachment {
	this := Attachment{}
	this.Id = id
	this.Created = created
	this.FileType = fileType
	this.FileSize = fileSize
	this.FileName = fileName
	this.FileSha256 = fileSha256
	this.Url = url
	return &this
}

// NewAttachmentWithDefaults instantiates a new Attachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentWithDefaults() *Attachment {
	this := Attachment{}
	return &this
}

// GetId returns the Id field value
func (o *Attachment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Attachment) SetId(v string) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *Attachment) GetCreated() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetCreatedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Attachment) SetCreated(v int64) {
	o.Created = v
}

// GetFileType returns the FileType field value
func (o *Attachment) GetFileType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileType, true
}

// SetFileType sets field value
func (o *Attachment) SetFileType(v string) {
	o.FileType = v
}

// GetFileSize returns the FileSize field value
func (o *Attachment) GetFileSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileSize, true
}

// SetFileSize sets field value
func (o *Attachment) SetFileSize(v int64) {
	o.FileSize = v
}

// GetFileName returns the FileName field value
func (o *Attachment) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *Attachment) SetFileName(v string) {
	o.FileName = v
}

// GetFileSha256 returns the FileSha256 field value
func (o *Attachment) GetFileSha256() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileSha256
}

// GetFileSha256Ok returns a tuple with the FileSha256 field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileSha256Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileSha256, true
}

// SetFileSha256 sets field value
func (o *Attachment) SetFileSha256(v string) {
	o.FileSha256 = v
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise.
func (o *Attachment) GetThumbnail() string {
	if o == nil || IsNil(o.Thumbnail) {
		var ret string
		return ret
	}
	return *o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetThumbnailOk() (*string, bool) {
	if o == nil || IsNil(o.Thumbnail) {
		return nil, false
	}
	return o.Thumbnail, true
}

// HasThumbnail returns a boolean if a field has been set.
func (o *Attachment) HasThumbnail() bool {
	if o != nil && !IsNil(o.Thumbnail) {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given string and assigns it to the Thumbnail field.
func (o *Attachment) SetThumbnail(v string) {
	o.Thumbnail = &v
}

// GetUrl returns the Url field value
func (o *Attachment) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Attachment) SetUrl(v string) {
	o.Url = v
}

func (o Attachment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created"] = o.Created
	toSerialize["file_type"] = o.FileType
	toSerialize["file_size"] = o.FileSize
	toSerialize["file_name"] = o.FileName
	toSerialize["file_sha256"] = o.FileSha256
	if !IsNil(o.Thumbnail) {
		toSerialize["thumbnail"] = o.Thumbnail
	}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *Attachment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created",
		"file_type",
		"file_size",
		"file_name",
		"file_sha256",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttachment := _Attachment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttachment)

	if err != nil {
		return err
	}

	*o = Attachment(varAttachment)

	return err
}

type NullableAttachment struct {
	value *Attachment
	isSet bool
}

func (v NullableAttachment) Get() *Attachment {
	return v.value
}

func (v *NullableAttachment) Set(val *Attachment) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachment(val *Attachment) *NullableAttachment {
	return &NullableAttachment{value: val, isSet: true}
}

func (v NullableAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
