/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// Attachment A file uploaded and attached to an entity (e.g. case, property, etc.)
type Attachment struct {
	// the unique ID of the uploaded file
	Id *string `json:"id,omitempty"`
	// timestamp indicating when the attachment was uploaded
	Created *int64 `json:"created,omitempty"`
	// ID of the entity for which this file was uploaded (case, property, etc.)
	Ref *string `json:"ref,omitempty"`
	// the content type of the attachment
	FileType *string `json:"file_type,omitempty"`
	// the size of the attachment in bytes
	FileSize *int64 `json:"file_size,omitempty"`
	// the original file name
	FileName *string `json:"file_name,omitempty"`
	// the sha256 sum of the file
	FileSha256 *string `json:"file_sha256,omitempty"`
	// optional link to thumbnail (only if file is an image)
	Thumbnail *string `json:"thumbnail,omitempty"`
	// link to the actual file, through whitch it can be downloaded
	Url *string `json:"url,omitempty"`
}

// NewAttachment instantiates a new Attachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachment() *Attachment {
	this := Attachment{}
	return &this
}

// NewAttachmentWithDefaults instantiates a new Attachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentWithDefaults() *Attachment {
	this := Attachment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Attachment) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Attachment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Attachment) SetId(v string) {
	o.Id = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Attachment) GetCreated() int64 {
	if o == nil || o.Created == nil {
		var ret int64
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetCreatedOk() (*int64, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Attachment) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int64 and assigns it to the Created field.
func (o *Attachment) SetCreated(v int64) {
	o.Created = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Attachment) GetRef() string {
	if o == nil || o.Ref == nil {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetRefOk() (*string, bool) {
	if o == nil || o.Ref == nil {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Attachment) HasRef() bool {
	if o != nil && o.Ref != nil {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Attachment) SetRef(v string) {
	o.Ref = &v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *Attachment) GetFileType() string {
	if o == nil || o.FileType == nil {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileTypeOk() (*string, bool) {
	if o == nil || o.FileType == nil {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *Attachment) HasFileType() bool {
	if o != nil && o.FileType != nil {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *Attachment) SetFileType(v string) {
	o.FileType = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *Attachment) GetFileSize() int64 {
	if o == nil || o.FileSize == nil {
		var ret int64
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileSizeOk() (*int64, bool) {
	if o == nil || o.FileSize == nil {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *Attachment) HasFileSize() bool {
	if o != nil && o.FileSize != nil {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int64 and assigns it to the FileSize field.
func (o *Attachment) SetFileSize(v int64) {
	o.FileSize = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *Attachment) GetFileName() string {
	if o == nil || o.FileName == nil {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileNameOk() (*string, bool) {
	if o == nil || o.FileName == nil {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *Attachment) HasFileName() bool {
	if o != nil && o.FileName != nil {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *Attachment) SetFileName(v string) {
	o.FileName = &v
}

// GetFileSha256 returns the FileSha256 field value if set, zero value otherwise.
func (o *Attachment) GetFileSha256() string {
	if o == nil || o.FileSha256 == nil {
		var ret string
		return ret
	}
	return *o.FileSha256
}

// GetFileSha256Ok returns a tuple with the FileSha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileSha256Ok() (*string, bool) {
	if o == nil || o.FileSha256 == nil {
		return nil, false
	}
	return o.FileSha256, true
}

// HasFileSha256 returns a boolean if a field has been set.
func (o *Attachment) HasFileSha256() bool {
	if o != nil && o.FileSha256 != nil {
		return true
	}

	return false
}

// SetFileSha256 gets a reference to the given string and assigns it to the FileSha256 field.
func (o *Attachment) SetFileSha256(v string) {
	o.FileSha256 = &v
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise.
func (o *Attachment) GetThumbnail() string {
	if o == nil || o.Thumbnail == nil {
		var ret string
		return ret
	}
	return *o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetThumbnailOk() (*string, bool) {
	if o == nil || o.Thumbnail == nil {
		return nil, false
	}
	return o.Thumbnail, true
}

// HasThumbnail returns a boolean if a field has been set.
func (o *Attachment) HasThumbnail() bool {
	if o != nil && o.Thumbnail != nil {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given string and assigns it to the Thumbnail field.
func (o *Attachment) SetThumbnail(v string) {
	o.Thumbnail = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Attachment) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Attachment) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Attachment) SetUrl(v string) {
	o.Url = &v
}

func (o Attachment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Ref != nil {
		toSerialize["ref"] = o.Ref
	}
	if o.FileType != nil {
		toSerialize["file_type"] = o.FileType
	}
	if o.FileSize != nil {
		toSerialize["file_size"] = o.FileSize
	}
	if o.FileName != nil {
		toSerialize["file_name"] = o.FileName
	}
	if o.FileSha256 != nil {
		toSerialize["file_sha256"] = o.FileSha256
	}
	if o.Thumbnail != nil {
		toSerialize["thumbnail"] = o.Thumbnail
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableAttachment struct {
	value *Attachment
	isSet bool
}

func (v NullableAttachment) Get() *Attachment {
	return v.value
}

func (v *NullableAttachment) Set(val *Attachment) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachment(val *Attachment) *NullableAttachment {
	return &NullableAttachment{value: val, isSet: true}
}

func (v NullableAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
