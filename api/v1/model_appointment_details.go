/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the AppointmentDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppointmentDetails{}

// AppointmentDetails An appointment with tenatn email status
type AppointmentDetails struct {
	Appointment *Appointment `json:"appointment,omitempty"`
	// The status of the email that was used to appoint the meeting.
	ReporterEmailStatus *string `json:"reporter_email_status,omitempty"`
}

// NewAppointmentDetails instantiates a new AppointmentDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppointmentDetails() *AppointmentDetails {
	this := AppointmentDetails{}
	return &this
}

// NewAppointmentDetailsWithDefaults instantiates a new AppointmentDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppointmentDetailsWithDefaults() *AppointmentDetails {
	this := AppointmentDetails{}
	return &this
}

// GetAppointment returns the Appointment field value if set, zero value otherwise.
func (o *AppointmentDetails) GetAppointment() Appointment {
	if o == nil || IsNil(o.Appointment) {
		var ret Appointment
		return ret
	}
	return *o.Appointment
}

// GetAppointmentOk returns a tuple with the Appointment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentDetails) GetAppointmentOk() (*Appointment, bool) {
	if o == nil || IsNil(o.Appointment) {
		return nil, false
	}
	return o.Appointment, true
}

// HasAppointment returns a boolean if a field has been set.
func (o *AppointmentDetails) HasAppointment() bool {
	if o != nil && !IsNil(o.Appointment) {
		return true
	}

	return false
}

// SetAppointment gets a reference to the given Appointment and assigns it to the Appointment field.
func (o *AppointmentDetails) SetAppointment(v Appointment) {
	o.Appointment = &v
}

// GetReporterEmailStatus returns the ReporterEmailStatus field value if set, zero value otherwise.
func (o *AppointmentDetails) GetReporterEmailStatus() string {
	if o == nil || IsNil(o.ReporterEmailStatus) {
		var ret string
		return ret
	}
	return *o.ReporterEmailStatus
}

// GetReporterEmailStatusOk returns a tuple with the ReporterEmailStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentDetails) GetReporterEmailStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ReporterEmailStatus) {
		return nil, false
	}
	return o.ReporterEmailStatus, true
}

// HasReporterEmailStatus returns a boolean if a field has been set.
func (o *AppointmentDetails) HasReporterEmailStatus() bool {
	if o != nil && !IsNil(o.ReporterEmailStatus) {
		return true
	}

	return false
}

// SetReporterEmailStatus gets a reference to the given string and assigns it to the ReporterEmailStatus field.
func (o *AppointmentDetails) SetReporterEmailStatus(v string) {
	o.ReporterEmailStatus = &v
}

func (o AppointmentDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppointmentDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Appointment) {
		toSerialize["appointment"] = o.Appointment
	}
	if !IsNil(o.ReporterEmailStatus) {
		toSerialize["reporter_email_status"] = o.ReporterEmailStatus
	}
	return toSerialize, nil
}

type NullableAppointmentDetails struct {
	value *AppointmentDetails
	isSet bool
}

func (v NullableAppointmentDetails) Get() *AppointmentDetails {
	return v.value
}

func (v *NullableAppointmentDetails) Set(val *AppointmentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAppointmentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAppointmentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppointmentDetails(val *AppointmentDetails) *NullableAppointmentDetails {
	return &NullableAppointmentDetails{value: val, isSet: true}
}

func (v NullableAppointmentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppointmentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
