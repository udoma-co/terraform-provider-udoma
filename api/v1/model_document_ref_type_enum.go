/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// DocumentRefTypeEnum the model 'DocumentRefTypeEnum'
type DocumentRefTypeEnum string

// List of DocumentRefTypeEnum
const (
	DOCUMENTREFTYPEENUM_PROPERTY DocumentRefTypeEnum = "property"
	DOCUMENTREFTYPEENUM_STATIC   DocumentRefTypeEnum = "static"
)

// All allowed values of DocumentRefTypeEnum enum
var AllowedDocumentRefTypeEnumEnumValues = []DocumentRefTypeEnum{
	"property",
	"static",
}

func (v *DocumentRefTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DocumentRefTypeEnum(value)
	for _, existing := range AllowedDocumentRefTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DocumentRefTypeEnum", value)
}

// NewDocumentRefTypeEnumFromValue returns a pointer to a valid DocumentRefTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDocumentRefTypeEnumFromValue(v string) (*DocumentRefTypeEnum, error) {
	ev := DocumentRefTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DocumentRefTypeEnum: valid values are %v", v, AllowedDocumentRefTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DocumentRefTypeEnum) IsValid() bool {
	for _, existing := range AllowedDocumentRefTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DocumentRefTypeEnum value
func (v DocumentRefTypeEnum) Ptr() *DocumentRefTypeEnum {
	return &v
}

type NullableDocumentRefTypeEnum struct {
	value *DocumentRefTypeEnum
	isSet bool
}

func (v NullableDocumentRefTypeEnum) Get() *DocumentRefTypeEnum {
	return v.value
}

func (v *NullableDocumentRefTypeEnum) Set(val *DocumentRefTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentRefTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentRefTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentRefTypeEnum(val *DocumentRefTypeEnum) *NullableDocumentRefTypeEnum {
	return &NullableDocumentRefTypeEnum{value: val, isSet: true}
}

func (v NullableDocumentRefTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentRefTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
