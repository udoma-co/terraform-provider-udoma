/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ConnectorSyncEntity Used by connectors to push entity data to the backend.
type ConnectorSyncEntity struct {
	Type *ConnectorEntityType `json:"type,omitempty"`
	// json representation of the entity
	Data *string `json:"data,omitempty"`
	// a progress indicator that can be used by the connector to know how far it is in the sync process. The backend will not use this value, but it will be returned in the response to the connector.
	Progress *string `json:"progress,omitempty"`
}

// NewConnectorSyncEntity instantiates a new ConnectorSyncEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorSyncEntity() *ConnectorSyncEntity {
	this := ConnectorSyncEntity{}
	return &this
}

// NewConnectorSyncEntityWithDefaults instantiates a new ConnectorSyncEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorSyncEntityWithDefaults() *ConnectorSyncEntity {
	this := ConnectorSyncEntity{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectorSyncEntity) GetType() ConnectorEntityType {
	if o == nil || o.Type == nil {
		var ret ConnectorEntityType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorSyncEntity) GetTypeOk() (*ConnectorEntityType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectorSyncEntity) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectorEntityType and assigns it to the Type field.
func (o *ConnectorSyncEntity) SetType(v ConnectorEntityType) {
	o.Type = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConnectorSyncEntity) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorSyncEntity) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConnectorSyncEntity) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ConnectorSyncEntity) SetData(v string) {
	o.Data = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *ConnectorSyncEntity) GetProgress() string {
	if o == nil || o.Progress == nil {
		var ret string
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorSyncEntity) GetProgressOk() (*string, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *ConnectorSyncEntity) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given string and assigns it to the Progress field.
func (o *ConnectorSyncEntity) SetProgress(v string) {
	o.Progress = &v
}

func (o ConnectorSyncEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Progress != nil {
		toSerialize["progress"] = o.Progress
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorSyncEntity struct {
	value *ConnectorSyncEntity
	isSet bool
}

func (v NullableConnectorSyncEntity) Get() *ConnectorSyncEntity {
	return v.value
}

func (v *NullableConnectorSyncEntity) Set(val *ConnectorSyncEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorSyncEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorSyncEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorSyncEntity(val *ConnectorSyncEntity) *NullableConnectorSyncEntity {
	return &NullableConnectorSyncEntity{value: val, isSet: true}
}

func (v NullableConnectorSyncEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorSyncEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
