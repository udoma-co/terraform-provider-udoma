/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// CaseFeedbackModeEnum The list of feedback modes that can be used to collect information from a case party.
type CaseFeedbackModeEnum string

// List of CaseFeedbackModeEnum
const (
	CASEFEEDBACKMODEENUM_OPTIONAL_COMMENT CaseFeedbackModeEnum = "OPTIONAL_COMMENT"
	CASEFEEDBACKMODEENUM_REQUIRED_COMMENT CaseFeedbackModeEnum = "REQUIRED_COMMENT"
	CASEFEEDBACKMODEENUM_FORM             CaseFeedbackModeEnum = "FORM"
)

// All allowed values of CaseFeedbackModeEnum enum
var AllowedCaseFeedbackModeEnumEnumValues = []CaseFeedbackModeEnum{
	"OPTIONAL_COMMENT",
	"REQUIRED_COMMENT",
	"FORM",
}

func (v *CaseFeedbackModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CaseFeedbackModeEnum(value)
	for _, existing := range AllowedCaseFeedbackModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CaseFeedbackModeEnum", value)
}

// NewCaseFeedbackModeEnumFromValue returns a pointer to a valid CaseFeedbackModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCaseFeedbackModeEnumFromValue(v string) (*CaseFeedbackModeEnum, error) {
	ev := CaseFeedbackModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CaseFeedbackModeEnum: valid values are %v", v, AllowedCaseFeedbackModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CaseFeedbackModeEnum) IsValid() bool {
	for _, existing := range AllowedCaseFeedbackModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CaseFeedbackModeEnum value
func (v CaseFeedbackModeEnum) Ptr() *CaseFeedbackModeEnum {
	return &v
}

type NullableCaseFeedbackModeEnum struct {
	value *CaseFeedbackModeEnum
	isSet bool
}

func (v NullableCaseFeedbackModeEnum) Get() *CaseFeedbackModeEnum {
	return v.value
}

func (v *NullableCaseFeedbackModeEnum) Set(val *CaseFeedbackModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseFeedbackModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseFeedbackModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseFeedbackModeEnum(val *CaseFeedbackModeEnum) *NullableCaseFeedbackModeEnum {
	return &NullableCaseFeedbackModeEnum{value: val, isSet: true}
}

func (v NullableCaseFeedbackModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseFeedbackModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
