/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the QueryApprovalsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryApprovalsRequest{}

// QueryApprovalsRequest Contains the details of a request to query approvals.
type QueryApprovalsRequest struct {
	// The maximum number of entities to return from the query
	Limit *int32 `json:"limit,omitempty"`
	// The number of entities to skip before returning the result
	Offset *int32             `json:"offset,omitempty"`
	Type   *QueryApprovalType `json:"type,omitempty"`
}

// NewQueryApprovalsRequest instantiates a new QueryApprovalsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryApprovalsRequest() *QueryApprovalsRequest {
	this := QueryApprovalsRequest{}
	return &this
}

// NewQueryApprovalsRequestWithDefaults instantiates a new QueryApprovalsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryApprovalsRequestWithDefaults() *QueryApprovalsRequest {
	this := QueryApprovalsRequest{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *QueryApprovalsRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryApprovalsRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *QueryApprovalsRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *QueryApprovalsRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *QueryApprovalsRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryApprovalsRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *QueryApprovalsRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *QueryApprovalsRequest) SetOffset(v int32) {
	o.Offset = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QueryApprovalsRequest) GetType() QueryApprovalType {
	if o == nil || IsNil(o.Type) {
		var ret QueryApprovalType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryApprovalsRequest) GetTypeOk() (*QueryApprovalType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QueryApprovalsRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given QueryApprovalType and assigns it to the Type field.
func (o *QueryApprovalsRequest) SetType(v QueryApprovalType) {
	o.Type = &v
}

func (o QueryApprovalsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryApprovalsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableQueryApprovalsRequest struct {
	value *QueryApprovalsRequest
	isSet bool
}

func (v NullableQueryApprovalsRequest) Get() *QueryApprovalsRequest {
	return v.value
}

func (v *NullableQueryApprovalsRequest) Set(val *QueryApprovalsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryApprovalsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryApprovalsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryApprovalsRequest(val *QueryApprovalsRequest) *NullableQueryApprovalsRequest {
	return &NullableQueryApprovalsRequest{value: val, isSet: true}
}

func (v NullableQueryApprovalsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryApprovalsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
