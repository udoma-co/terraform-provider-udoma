/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// QueryDataCollectionResponse query result, containing data collection items
type QueryDataCollectionResponse struct {
	Data   []DataCollectionItem `json:"data,omitempty"`
	Limit  *int64               `json:"limit,omitempty"`
	Offset *int64               `json:"offset,omitempty"`
}

// NewQueryDataCollectionResponse instantiates a new QueryDataCollectionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryDataCollectionResponse() *QueryDataCollectionResponse {
	this := QueryDataCollectionResponse{}
	return &this
}

// NewQueryDataCollectionResponseWithDefaults instantiates a new QueryDataCollectionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryDataCollectionResponseWithDefaults() *QueryDataCollectionResponse {
	this := QueryDataCollectionResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *QueryDataCollectionResponse) GetData() []DataCollectionItem {
	if o == nil || o.Data == nil {
		var ret []DataCollectionItem
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDataCollectionResponse) GetDataOk() ([]DataCollectionItem, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *QueryDataCollectionResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []DataCollectionItem and assigns it to the Data field.
func (o *QueryDataCollectionResponse) SetData(v []DataCollectionItem) {
	o.Data = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *QueryDataCollectionResponse) GetLimit() int64 {
	if o == nil || o.Limit == nil {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDataCollectionResponse) GetLimitOk() (*int64, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *QueryDataCollectionResponse) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *QueryDataCollectionResponse) SetLimit(v int64) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *QueryDataCollectionResponse) GetOffset() int64 {
	if o == nil || o.Offset == nil {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDataCollectionResponse) GetOffsetOk() (*int64, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *QueryDataCollectionResponse) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *QueryDataCollectionResponse) SetOffset(v int64) {
	o.Offset = &v
}

func (o QueryDataCollectionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	return json.Marshal(toSerialize)
}

type NullableQueryDataCollectionResponse struct {
	value *QueryDataCollectionResponse
	isSet bool
}

func (v NullableQueryDataCollectionResponse) Get() *QueryDataCollectionResponse {
	return v.value
}

func (v *NullableQueryDataCollectionResponse) Set(val *QueryDataCollectionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryDataCollectionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryDataCollectionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryDataCollectionResponse(val *QueryDataCollectionResponse) *NullableQueryDataCollectionResponse {
	return &NullableQueryDataCollectionResponse{value: val, isSet: true}
}

func (v NullableQueryDataCollectionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryDataCollectionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
