/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ConnectorConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorConfig{}

// ConnectorConfig Connector configuration that can be pulled by any connector and which indicates what data to be synchronised how often.
type ConnectorConfig struct {
	// unique identifier of the connector. This is used to identify the connector when the backend pushes the config to the connector
	ConnectorId *string `json:"connector_id,omitempty"`
	// short description of the connector
	Description *string `json:"description,omitempty"`
	// indicates whether the connector should push data or not. While disabled the connector will not attempt to push data to the backend, however, it  will continue to ping the backend to check for updates to the config.
	Enabled *bool `json:"enabled,omitempty"`
	// cron expression that tells the connector how often to sync data
	SyncTimes *string `json:"sync_times,omitempty"`
	// cron expression that tells the connector how often to ping the server and  retrieve the config
	PingTimes *string `json:"ping_times,omitempty"`
	// list of entity types to be synchronised
	Entities []ConnectorEntityType  `json:"entities,omitempty"`
	LogLevel *ConnectorLogLevelEnum `json:"log_level,omitempty"`
}

// NewConnectorConfig instantiates a new ConnectorConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorConfig() *ConnectorConfig {
	this := ConnectorConfig{}
	return &this
}

// NewConnectorConfigWithDefaults instantiates a new ConnectorConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorConfigWithDefaults() *ConnectorConfig {
	this := ConnectorConfig{}
	return &this
}

// GetConnectorId returns the ConnectorId field value if set, zero value otherwise.
func (o *ConnectorConfig) GetConnectorId() string {
	if o == nil || IsNil(o.ConnectorId) {
		var ret string
		return ret
	}
	return *o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorConfig) GetConnectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorId) {
		return nil, false
	}
	return o.ConnectorId, true
}

// HasConnectorId returns a boolean if a field has been set.
func (o *ConnectorConfig) HasConnectorId() bool {
	if o != nil && !IsNil(o.ConnectorId) {
		return true
	}

	return false
}

// SetConnectorId gets a reference to the given string and assigns it to the ConnectorId field.
func (o *ConnectorConfig) SetConnectorId(v string) {
	o.ConnectorId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConnectorConfig) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorConfig) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConnectorConfig) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConnectorConfig) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ConnectorConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ConnectorConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ConnectorConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSyncTimes returns the SyncTimes field value if set, zero value otherwise.
func (o *ConnectorConfig) GetSyncTimes() string {
	if o == nil || IsNil(o.SyncTimes) {
		var ret string
		return ret
	}
	return *o.SyncTimes
}

// GetSyncTimesOk returns a tuple with the SyncTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorConfig) GetSyncTimesOk() (*string, bool) {
	if o == nil || IsNil(o.SyncTimes) {
		return nil, false
	}
	return o.SyncTimes, true
}

// HasSyncTimes returns a boolean if a field has been set.
func (o *ConnectorConfig) HasSyncTimes() bool {
	if o != nil && !IsNil(o.SyncTimes) {
		return true
	}

	return false
}

// SetSyncTimes gets a reference to the given string and assigns it to the SyncTimes field.
func (o *ConnectorConfig) SetSyncTimes(v string) {
	o.SyncTimes = &v
}

// GetPingTimes returns the PingTimes field value if set, zero value otherwise.
func (o *ConnectorConfig) GetPingTimes() string {
	if o == nil || IsNil(o.PingTimes) {
		var ret string
		return ret
	}
	return *o.PingTimes
}

// GetPingTimesOk returns a tuple with the PingTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorConfig) GetPingTimesOk() (*string, bool) {
	if o == nil || IsNil(o.PingTimes) {
		return nil, false
	}
	return o.PingTimes, true
}

// HasPingTimes returns a boolean if a field has been set.
func (o *ConnectorConfig) HasPingTimes() bool {
	if o != nil && !IsNil(o.PingTimes) {
		return true
	}

	return false
}

// SetPingTimes gets a reference to the given string and assigns it to the PingTimes field.
func (o *ConnectorConfig) SetPingTimes(v string) {
	o.PingTimes = &v
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *ConnectorConfig) GetEntities() []ConnectorEntityType {
	if o == nil || IsNil(o.Entities) {
		var ret []ConnectorEntityType
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorConfig) GetEntitiesOk() ([]ConnectorEntityType, bool) {
	if o == nil || IsNil(o.Entities) {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *ConnectorConfig) HasEntities() bool {
	if o != nil && !IsNil(o.Entities) {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []ConnectorEntityType and assigns it to the Entities field.
func (o *ConnectorConfig) SetEntities(v []ConnectorEntityType) {
	o.Entities = v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *ConnectorConfig) GetLogLevel() ConnectorLogLevelEnum {
	if o == nil || IsNil(o.LogLevel) {
		var ret ConnectorLogLevelEnum
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorConfig) GetLogLevelOk() (*ConnectorLogLevelEnum, bool) {
	if o == nil || IsNil(o.LogLevel) {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *ConnectorConfig) HasLogLevel() bool {
	if o != nil && !IsNil(o.LogLevel) {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given ConnectorLogLevelEnum and assigns it to the LogLevel field.
func (o *ConnectorConfig) SetLogLevel(v ConnectorLogLevelEnum) {
	o.LogLevel = &v
}

func (o ConnectorConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectorId) {
		toSerialize["connector_id"] = o.ConnectorId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.SyncTimes) {
		toSerialize["sync_times"] = o.SyncTimes
	}
	if !IsNil(o.PingTimes) {
		toSerialize["ping_times"] = o.PingTimes
	}
	if !IsNil(o.Entities) {
		toSerialize["entities"] = o.Entities
	}
	if !IsNil(o.LogLevel) {
		toSerialize["log_level"] = o.LogLevel
	}
	return toSerialize, nil
}

type NullableConnectorConfig struct {
	value *ConnectorConfig
	isSet bool
}

func (v NullableConnectorConfig) Get() *ConnectorConfig {
	return v.value
}

func (v *NullableConnectorConfig) Set(val *ConnectorConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorConfig(val *ConnectorConfig) *NullableConnectorConfig {
	return &NullableConnectorConfig{value: val, isSet: true}
}

func (v NullableConnectorConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
