/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PropertyHandoverTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyHandoverTemplate{}

// PropertyHandoverTemplate struct for PropertyHandoverTemplate
type PropertyHandoverTemplate struct {
	// The ID of the property handover template. This ID is unique within the system.
	Id string `json:"id"`
	// The name of the property handover template.
	Name string `json:"name"`
	// The description of the property handover template.
	Description *string    `json:"description,omitempty"`
	CustomForm  CustomForm `json:"custom_form"`
}

type _PropertyHandoverTemplate PropertyHandoverTemplate

// NewPropertyHandoverTemplate instantiates a new PropertyHandoverTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyHandoverTemplate(id string, name string, customForm CustomForm) *PropertyHandoverTemplate {
	this := PropertyHandoverTemplate{}
	this.Id = id
	this.Name = name
	this.CustomForm = customForm
	return &this
}

// NewPropertyHandoverTemplateWithDefaults instantiates a new PropertyHandoverTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyHandoverTemplateWithDefaults() *PropertyHandoverTemplate {
	this := PropertyHandoverTemplate{}
	return &this
}

// GetId returns the Id field value
func (o *PropertyHandoverTemplate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PropertyHandoverTemplate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PropertyHandoverTemplate) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *PropertyHandoverTemplate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PropertyHandoverTemplate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PropertyHandoverTemplate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PropertyHandoverTemplate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyHandoverTemplate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PropertyHandoverTemplate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PropertyHandoverTemplate) SetDescription(v string) {
	o.Description = &v
}

// GetCustomForm returns the CustomForm field value
func (o *PropertyHandoverTemplate) GetCustomForm() CustomForm {
	if o == nil {
		var ret CustomForm
		return ret
	}

	return o.CustomForm
}

// GetCustomFormOk returns a tuple with the CustomForm field value
// and a boolean to check if the value has been set.
func (o *PropertyHandoverTemplate) GetCustomFormOk() (*CustomForm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomForm, true
}

// SetCustomForm sets field value
func (o *PropertyHandoverTemplate) SetCustomForm(v CustomForm) {
	o.CustomForm = v
}

func (o PropertyHandoverTemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyHandoverTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["custom_form"] = o.CustomForm
	return toSerialize, nil
}

func (o *PropertyHandoverTemplate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"custom_form",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyHandoverTemplate := _PropertyHandoverTemplate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPropertyHandoverTemplate)

	if err != nil {
		return err
	}

	*o = PropertyHandoverTemplate(varPropertyHandoverTemplate)

	return err
}

type NullablePropertyHandoverTemplate struct {
	value *PropertyHandoverTemplate
	isSet bool
}

func (v NullablePropertyHandoverTemplate) Get() *PropertyHandoverTemplate {
	return v.value
}

func (v *NullablePropertyHandoverTemplate) Set(val *PropertyHandoverTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyHandoverTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyHandoverTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyHandoverTemplate(val *PropertyHandoverTemplate) *NullablePropertyHandoverTemplate {
	return &NullablePropertyHandoverTemplate{value: val, isSet: true}
}

func (v NullablePropertyHandoverTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyHandoverTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
