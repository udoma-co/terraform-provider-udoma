/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ExternalUserData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalUserData{}

// ExternalUserData Contains information about a user referenced in other entities
type ExternalUserData struct {
	// The ID of the user, can be undefined, if user is not registered, or was already deleted
	UserId      string              `json:"user_id"`
	UserRole    UserTypeEnum        `json:"user_role"`
	ContactData NullableContactData `json:"contact_data"`
	// the locale of the user
	Locale *string `json:"locale,omitempty"`
}

type _ExternalUserData ExternalUserData

// NewExternalUserData instantiates a new ExternalUserData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalUserData(userId string, userRole UserTypeEnum, contactData NullableContactData) *ExternalUserData {
	this := ExternalUserData{}
	this.UserId = userId
	this.UserRole = userRole
	this.ContactData = contactData
	return &this
}

// NewExternalUserDataWithDefaults instantiates a new ExternalUserData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalUserDataWithDefaults() *ExternalUserData {
	this := ExternalUserData{}
	return &this
}

// GetUserId returns the UserId field value
func (o *ExternalUserData) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ExternalUserData) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ExternalUserData) SetUserId(v string) {
	o.UserId = v
}

// GetUserRole returns the UserRole field value
func (o *ExternalUserData) GetUserRole() UserTypeEnum {
	if o == nil {
		var ret UserTypeEnum
		return ret
	}

	return o.UserRole
}

// GetUserRoleOk returns a tuple with the UserRole field value
// and a boolean to check if the value has been set.
func (o *ExternalUserData) GetUserRoleOk() (*UserTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserRole, true
}

// SetUserRole sets field value
func (o *ExternalUserData) SetUserRole(v UserTypeEnum) {
	o.UserRole = v
}

// GetContactData returns the ContactData field value
// If the value is explicit nil, the zero value for ContactData will be returned
func (o *ExternalUserData) GetContactData() ContactData {
	if o == nil || o.ContactData.Get() == nil {
		var ret ContactData
		return ret
	}

	return *o.ContactData.Get()
}

// GetContactDataOk returns a tuple with the ContactData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalUserData) GetContactDataOk() (*ContactData, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContactData.Get(), o.ContactData.IsSet()
}

// SetContactData sets field value
func (o *ExternalUserData) SetContactData(v ContactData) {
	o.ContactData.Set(&v)
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *ExternalUserData) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalUserData) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *ExternalUserData) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *ExternalUserData) SetLocale(v string) {
	o.Locale = &v
}

func (o ExternalUserData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalUserData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_id"] = o.UserId
	toSerialize["user_role"] = o.UserRole
	toSerialize["contact_data"] = o.ContactData.Get()
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	return toSerialize, nil
}

func (o *ExternalUserData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_id",
		"user_role",
		"contact_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalUserData := _ExternalUserData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalUserData)

	if err != nil {
		return err
	}

	*o = ExternalUserData(varExternalUserData)

	return err
}

type NullableExternalUserData struct {
	value *ExternalUserData
	isSet bool
}

func (v NullableExternalUserData) Get() *ExternalUserData {
	return v.value
}

func (v *NullableExternalUserData) Set(val *ExternalUserData) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalUserData) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalUserData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalUserData(val *ExternalUserData) *NullableExternalUserData {
	return &NullableExternalUserData{value: val, isSet: true}
}

func (v NullableExternalUserData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalUserData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
