/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// AccountTypesEnum the model 'AccountTypesEnum'
type AccountTypesEnum string

// List of AccountTypesEnum
const (
	ACCOUNTTYPESENUM_ASSET     AccountTypesEnum = "asset"
	ACCOUNTTYPESENUM_LIABILITY AccountTypesEnum = "liability"
	ACCOUNTTYPESENUM_EQUITY    AccountTypesEnum = "equity"
	ACCOUNTTYPESENUM_INCOME    AccountTypesEnum = "income"
	ACCOUNTTYPESENUM_EXPENSE   AccountTypesEnum = "expense"
)

// All allowed values of AccountTypesEnum enum
var AllowedAccountTypesEnumEnumValues = []AccountTypesEnum{
	"asset",
	"liability",
	"equity",
	"income",
	"expense",
}

func (v *AccountTypesEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountTypesEnum(value)
	for _, existing := range AllowedAccountTypesEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountTypesEnum", value)
}

// NewAccountTypesEnumFromValue returns a pointer to a valid AccountTypesEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountTypesEnumFromValue(v string) (*AccountTypesEnum, error) {
	ev := AccountTypesEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountTypesEnum: valid values are %v", v, AllowedAccountTypesEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountTypesEnum) IsValid() bool {
	for _, existing := range AllowedAccountTypesEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountTypesEnum value
func (v AccountTypesEnum) Ptr() *AccountTypesEnum {
	return &v
}

type NullableAccountTypesEnum struct {
	value *AccountTypesEnum
	isSet bool
}

func (v NullableAccountTypesEnum) Get() *AccountTypesEnum {
	return v.value
}

func (v *NullableAccountTypesEnum) Set(val *AccountTypesEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountTypesEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountTypesEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountTypesEnum(val *AccountTypesEnum) *NullableAccountTypesEnum {
	return &NullableAccountTypesEnum{value: val, isSet: true}
}

func (v NullableAccountTypesEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountTypesEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
