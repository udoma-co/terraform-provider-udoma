openapi: 3.0.2
info:
  title: Udoma
  version: "1.0"
servers:
- url: https://dev.udoma.cloud/api/udoma/v1/
- url: http://localhost:8080/api/udoma/v1/
paths:
  /attachment:
    post:
      description: Upload a new file attachment of any type
      operationId: uploadAttachment
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadAttachment_request'
        description: A file attachment that will be referenced by other entities
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Successfully uploaded file
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Upload new file attachment
  /attachment/{attachmentId}:
    delete:
      description: Delete the file upload with the given ID
      operationId: deleteAttachment
      parameters:
      - description: ID of the affected file attachment
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete the file upload with the given ID
    get:
      description: Get the file attachment with the given ID
      operationId: getAttachment
      parameters:
      - description: ID of the affected file attachment
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get a file attachment
  /bank-account:
    post:
      description: Create a new bank account for the current account
      operationId: createBankAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateBankAccountRequest'
        description: Bank account that will be created for the account
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
          description: Successfully created bank account
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create new bank account
  /bank-accounts:
    post:
      description: Query the bank accounts for certain criteria
      operationId: queryBankAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryBankAccountsRequest'
        description: Bank account query criteria
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryBankAccountsResponse'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Query bank accounts
  /bank-account/{accountId}:
    delete:
      operationId: deleteBankAccount
      parameters:
      - description: ID of the required bank account
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete an already existing bank account
    get:
      operationId: getBankAccount
      parameters:
      - description: ID of the required bank account
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the bank account with the given ID
    put:
      operationId: updateBankAccount
      parameters:
      - description: ID of the required bank account
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateBankAccountRequest'
        description: Updated bank account
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
          description: Successfully updated bank account
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update the attributes of the already existing bank account
  /case:
    post:
      description: Create a new case for the provided organization/property.
      operationId: createCase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCaseRequest'
        description: Case that needs to be created by the user for the organization
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
          description: Successfully created case
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new case
  /case/{caseId}:
    delete:
      description: Delete the case with all its related comments and attachments
      operationId: deleteCase
      parameters:
      - description: ID of the required case
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete case
    get:
      description: Get the case with all its attributes and comments
      operationId: getCase
      parameters:
      - description: ID of the required case
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get case details
    put:
      description: Update the base attributes of a case
      operationId: updateCase
      parameters:
      - description: ID of the required case
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCaseRequest'
        description: Updated case
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
          description: Successfully updated case
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update case
  /case/{caseId}/status:
    post:
      description: Add new status change to the case
      operationId: updateCaseStatus
      parameters:
      - description: ID of the case to update
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCaseStatusRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseStatus'
          description: Successfully updated statusxw
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Add new case status
  /case/{caseId}/archive:
    post:
      operationId: archiveCase
      parameters:
      - description: ID of the case to update
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Mark the case as archived
  /case/{caseId}/comment:
    post:
      description: Add a new comment to the case
      operationId: addCaseComment
      parameters:
      - description: ID of the case to comment
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCaseCommentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                content: "Thanks for the case, we will contact the electrician to\
                  \ have a look"
              schema:
                $ref: '#/components/schemas/CaseComment'
          description: Successfully created comment
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Add new case comment
  /case/{caseId}/assign:
    post:
      operationId: assignCase
      parameters:
      - description: ID of the case to assign
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignCaseRequest'
        required: true
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Assign case to a service provider
  /case/{caseId}/unassign:
    post:
      operationId: unassignCase
      parameters:
      - description: ID of the case to comment
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnssignCaseRequest'
        required: true
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Remove access from case
  /case/{caseId}/comment/{commentId}:
    delete:
      operationId: deleteCaseComment
      parameters:
      - description: ID of the related case
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the required comment
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Mark a case comment as deleted
    get:
      description: Get all details of the comment
      operationId: getCaseComment
      parameters:
      - description: ID of the related case
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the required comment
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseComment'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get comment details
  /cases:
    post:
      description: Query all cases that were accessible for the current user
      operationId: queryCases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryCasesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Case'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Query cases for the current user
  /cases/endpoint:
    post:
      operationId: createCaseReportingEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateCaseReportingEndpointRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseReportingEndpoint'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create new case reporting endpoint
  /cases/endpoints:
    post:
      operationId: queryCaseReportingEndpoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryCaseReportingEndpointsRequest'
        description: Public form query criteria
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryCaseReportingEndpointsResponse'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Query all case reporting endpoints for given criteria
  /cases/endpoints/{endpointId}:
    delete:
      operationId: deleteCaseReportingEndpoint
      parameters:
      - description: ID of the case reporting endpoint
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete the case reporting endpoint by ID
    get:
      operationId: getCaseReportingEndpoint
      parameters:
      - description: ID of the case reporting endpoint
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseReportingEndpoint'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the case report endpoint by ID
    put:
      operationId: updateCaseReportingEndpoint
      parameters:
      - description: ID of the case reporting endpoint
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateCaseReportingEndpointRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseReportingEndpoint'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update the case reporting endpoint by ID
  /cases/endpoints/{endpointId}/notice:
    post:
      operationId: generateCaseReportingEndpointNotice
      parameters:
      - description: ID of the case reporting endpoint
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateCaseReportingEndpointNoticeRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: the URL of the PDF
                type: string
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Generate a PDF for a notice of the case reporting endpoint
  /cases/endpoints/{endpointId}/qr-code:
    get:
      operationId: getCaseReportingEndpointQRCode
      parameters:
      - description: ID of the case reporting endpoint
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                description: the URL of the image
                type: string
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Generates and returns a QR code of the URL of the case reporting endpoint
  /cases/template:
    post:
      operationId: createCaseTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateCaseTemplateRequest'
        description: Definition of a case template
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseTemplate'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create new case template
  /cases/templates:
    post:
      operationId: queryCaseTemplates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryCaseTemplatesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CaseTemplate'
                type: array
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Query all case templates for given criteria
  /cases/template/{templateId}:
    delete:
      description: Delete the case template with all it's attachments
      operationId: deleteCaseTemplate
      parameters:
      - description: ID of the case template
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete a case template
    get:
      operationId: getCaseTemplate
      parameters:
      - description: ID of the case template
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseTemplate'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the case template by ID
    put:
      operationId: updateCaseTemplate
      parameters:
      - description: ID of the case template
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateCaseTemplateRequest'
        description: Updated case template object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseTemplate'
          description: Successfully updated report template
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update case template
  /connector/configs:
    get:
      operationId: getConnectorConfigurations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ConnectorConfig'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the connector configurations for the current account
  /connector/config:
    post:
      operationId: createConnectorConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorConfigRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorConfig'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Create a new connector configuration
  /connector/credentials:
    get:
      operationId: getConnectorCredentials
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ConnectorCredentials'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the connector credentials for the current account
    post:
      description: Create new connector credentials
      operationId: createConnectorCredentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorCredentialsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCredentials'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Create new connector credentials
  /connector/credentials/{apiKey}:
    delete:
      operationId: deleteConnectorCredentials
      parameters:
      - description: ID of the api key to be deleted
        explode: false
        in: path
        name: apiKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete the connector credentials for the current account
  /connector/{connectorID}/config:
    delete:
      operationId: deleteConnectorConfiguration
      parameters:
      - description: ID of the connector
        explode: false
        in: path
        name: connectorID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Delete the connector configuration
    get:
      operationId: getConnectorConfiguration
      parameters:
      - description: ID of the connector
        explode: false
        in: path
        name: connectorID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorConfig'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the connector configuration for the current account
    post:
      operationId: updateConnectorConfiguration
      parameters:
      - description: ID of the connector
        explode: false
        in: path
        name: connectorID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConnectorConfigRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorConfig'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Update the connector configuration
  /connector/{connectorID}/status:
    get:
      operationId: getConnectorStatus
      parameters:
      - description: ID of the connector
        explode: false
        in: path
        name: connectorID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorStatus'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the connector status for the current account
  /connector/{connectorID}/status/{entity}:
    delete:
      operationId: deleteConnectorEntities
      parameters:
      - description: ID of the connector
        explode: false
        in: path
        name: connectorID
        required: true
        schema:
          type: string
        style: simple
      - description: The entity to get the status for
        explode: false
        in: path
        name: entity
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete all entities synchronised via the connector
    post:
      operationId: resetConnectorEntitySyncStatus
      parameters:
      - description: ID of the connector
        explode: false
        in: path
        name: connectorID
        required: true
        schema:
          type: string
        style: simple
      - description: The entity to get the status for
        explode: false
        in: path
        name: entity
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Reset the synchronisation status for the given entity
  /connector/ping:
    post:
      operationId: pingConnector
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorPingRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Ping the connector
  /connector/sync:
    post:
      operationId: syncConnectorData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorSyncRequest'
        required: true
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Sync the next batch of connector data.
  /customer-script:
    post:
      operationId: createCustomerScript
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateCustomerScriptRequest'
        description: Script that will be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScript'
          description: Successfully created script
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new customer specififc JS script
  /customer-scripts:
    get:
      operationId: getCustomerScripts
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomerScript'
                type: array
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get all customer specific JS scripts
  /customer-scripts/{scriptID}:
    delete:
      operationId: deleteCustomerScript
      parameters:
      - description: ID of the script
        explode: false
        in: path
        name: scriptID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete the script with all its related data
    get:
      operationId: getCustomerScript
      parameters:
      - description: ID of the script
        explode: false
        in: path
        name: scriptID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScript'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the script with all its attributes
    put:
      operationId: updateCustomerScript
      parameters:
      - description: ID of the script
        explode: false
        in: path
        name: scriptID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateCustomerScriptRequest'
        description: Updated script object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerScript'
          description: Successfully updated script
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update an already existing script
  /data-collection/query:
    post:
      description: Query the data collection items for the current account
      operationId: queryDataCollections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryDataCollectionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDataCollectionResponse'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Query the data collection items for the current account
  /data-collection/tenants/config:
    get:
      description: Get the data collection configuration for the current account
      operationId: getDataCollectionConfiguration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCollectionConfiguration'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get the data collection configuration for the current account
    post:
      description: Update the data collection configuration for the current account
      operationId: updateDataCollectionConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDataCollectionConfiguration'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCollectionConfiguration'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Update the data collection configuration for the current account
  /data-collection/tenants/endpoint:
    post:
      description: Create a new data collection endpoint
      operationId: createDataCollectionEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataCollectionEndpointRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCollectionEndpoint'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new data collection endpoint
  /data-collection/tenants/endpoints:
    post:
      operationId: queryDataCollectionEndpoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryDataCollectionEndpointsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDataCollectionEndpointsResponse'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Query the custom data collection endpoints for the current account
  /data-collection/tenants/endpoint/{endpointId}:
    delete:
      operationId: deleteDataCollectionEndpoint
      parameters:
      - description: ID of the required data collection endpoint
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Delete an already existing data collection endpoint
    get:
      description: Get a single data collection endpoint
      operationId: getDataCollectionEndpoint
      parameters:
      - description: ID of the required data collection endpoint
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCollectionEndpoint'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get a single data collection endpoint
    put:
      operationId: updateDataCollectionEndpoint
      parameters:
      - description: ID of the required data collection endpoint
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDataCollectionEndpointRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCollectionEndpoint'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Update an already existing data collection endpoint
  /data-collection/tenants/endpoint/{endpointId}/items:
    get:
      operationId: getDataCollectionEndpointItems
      parameters:
      - description: ID of the required data collection endpoint
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DataCollectionItem'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get all data collection items for a given endpoint
  /data-collection/tenants/endpoint/{endpointId}/invite:
    post:
      operationId: inviteTenantToDataCollectionEndpoint
      parameters:
      - description: ID of the required data collection endpoint
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteDataCollectionEndpointRequest'
        required: true
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Send the link of the data collection endpoint to a tenant
  /data-collection/tenants/items/{itemId}:
    delete:
      description: Delete an existing data collection item
      operationId: deleteDataCollectionItem
      parameters:
      - description: ID of the required data collection item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Delete an existing data collection item
    get:
      description: Get a single data collection item
      operationId: getDataCollectionItem
      parameters:
      - description: ID of the required data collection item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCollectionItem'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get a single data collection item
    put:
      description: Update an already existing data collection item
      operationId: updateDataCollectionItem
      parameters:
      - description: ID of the required data collection item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataCollectionItem'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TenantInfo'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Update an already existing data collection item
  /document-generation/document:
    post:
      operationId: createDocumentGeneration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentGenerationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentGeneration'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new document generation for a template
  /document-generation/documents:
    post:
      operationId: queryDocumentGenerations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryDocumentGenerationsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DocumentGeneration'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Request a list of document generations
  /document-generation/documents/archive:
    post:
      operationId: queryArchivedDocumentGenerations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryDocumentGenerationsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDocumentGenerationsResponse'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Request a list of archived document generations
  /document-generation/documents/{docId}:
    delete:
      operationId: deleteDocumentGeneration
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Delete an existing document generation
    get:
      operationId: getDocumentGeneration
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentGeneration'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get a single document generation
    put:
      operationId: updateDocumentGeneration
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentGeneration'
        required: true
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Update an already existing document generation
  /document-generation/documents/{docId}/archive:
    post:
      operationId: archiveDocumentGeneration
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Move the document generation to the archive
  /document-generation/documents/{docId}/generate-pdf:
    post:
      operationId: generateDocumentPDF
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPDFResponse'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Generate a PDF for the document generation
  /document-generation/documents/{docId}/generate-text:
    post:
      operationId: generateDocumentText
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditorJSDocument'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: "Generate the text for the document, based on template and input data"
  /document-generation/documents/{docId}/esignature/request:
    get:
      operationId: generateESignatureRequest
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentESignatureRequest'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: "Generate an eSignature request for a document, based on template signature\
        \ config"
  /document-generation/documents/{docId}/esignature/download-document:
    get:
      operationId: getSignedDocumentDownload
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPDFResponse'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get the signed document
  /document-generation/documents/{docId}/esignature/download-audits:
    get:
      operationId: getSignedDocumentAuditDownload
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPDFResponse'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get the audit information for the signed document
  /document-generation/documents/{docId}/esignature:
    delete:
      operationId: cancelSignaturesForDocument
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentESignatureStatus'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Cancel a signature request for a document
    get:
      operationId: getESignatureStatusForDocument
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentESignatureStatus'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the singing status for the document
    post:
      operationId: requestESignaturesForDocument
      parameters:
      - description: ID of the document generation
        explode: false
        in: path
        name: docId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentESignatureRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentESignatureStatus'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Trigger a signing request for a document
  /document-generation/template:
    post:
      description: Create a new document template
      operationId: createDocumentTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateDocumentTemplateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplate'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new document template
  /document-generation/templates:
    get:
      operationId: getDocumentTemplates
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DocumentTemplate'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get all available document templates
  /document-generation/template/{templateId}:
    delete:
      operationId: deleteDocumentTemplate
      parameters:
      - description: ID of the document template
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete a document template
    get:
      operationId: getDocumentTemplate
      parameters:
      - description: ID of the document template
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplate'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get a document template
    put:
      operationId: updateDocumentTemplate
      parameters:
      - description: ID of the document template
        explode: false
        in: path
        name: templateId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateDocumentTemplateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTemplate'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update an existing document template
  /faqs/entries:
    get:
      operationId: getFAQEntries
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FAQEntry'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get all available FAQ entries
  /faqs/entry:
    post:
      operationId: createFAQEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateFAQEntryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAQEntry'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new FAQ entry
  /faqs/entry/{entryId}:
    delete:
      operationId: deleteFAQEntry
      parameters:
      - description: ID of the FAQ entry
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete a FAQ entry
    get:
      operationId: getFAQEntry
      parameters:
      - description: ID of the FAQ entry
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAQEntry'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get a FAQ entry
    put:
      operationId: updateFAQEntry
      parameters:
      - description: ID of the FAQ entry
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateFAQEntryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAQEntry'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update an existing FAQ entry
  /feedback:
    post:
      description: Provide any type of feedback for the product
      operationId: feedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
        description: User's feedback
        required: true
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "500":
          content: {}
          description: Internal server error
      summary: User feedback about the product
  /id-generator:
    post:
      operationId: createCustomIDGenerator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateCustomIDGeneratorRequest'
        description: ID generator that will be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomIDGenerator'
          description: Successfully created script
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new customer specififc ID generator
  /id-generators:
    get:
      operationId: getCustomIDGenerators
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomIDGenerator'
                type: array
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get all customer specific ID generators
  /id-generators/{generatorID}:
    delete:
      operationId: deleteCustomIDGenerator
      parameters:
      - description: ID of the custom ID generator
        explode: false
        in: path
        name: generatorID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete the custom ID generator with all its related data
    get:
      operationId: getCustomIDGenerator
      parameters:
      - description: ID of the custom ID generator
        explode: false
        in: path
        name: generatorID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomIDGenerator'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the ID generator with all its attributes
    put:
      operationId: updateCustomIDGenerator
      parameters:
      - description: ID of the custom ID generator
        explode: false
        in: path
        name: generatorID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateCustomIDGeneratorRequest'
        description: Updated custom ID generator
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomIDGenerator'
          description: Successfully updated customer ID generator
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update an already existing ID generator
  /invitation:
    post:
      description: Invite a tenant to a property
      operationId: inviteTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvitationRequest'
        description: Invite a tenant to a property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
          description: Successfully invited user
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Invite a tenant
  /invitation/{invitationId}:
    delete:
      description: Delete an invitation from a landlord/manager for a property
      operationId: deleteInvitation
      parameters:
      - description: ID of the invitation to interact with
        explode: false
        in: path
        name: invitationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete invitation
    post:
      description: Accept or reject an invitation from a landlord/manager for a property
      operationId: respondToInvitation
      parameters:
      - description: ID of the invitation to interact with
        explode: false
        in: path
        name: invitationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RespondToInvitationRequest'
        description: Tenants response to the invitation
        required: true
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Respond to invitation
  /invitations:
    get:
      description: List all active tenancy invitations for the current user
      operationId: getInvitations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Invitation'
                type: array
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: List tenancy invitations
  /meters:
    get:
      description: List all meters for the current user
      operationId: getMeters
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Meter'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: List meters
    post:
      operationId: createMeter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateMeterRequest'
        description: Meter to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meter'
          description: Successfully created meter
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new meter for a property
  /meters/by-property/{propertyId}:
    get:
      description: List all meters for a property
      operationId: getMetersByProperty
      parameters:
      - description: ID of the property to get meters for
        explode: false
        in: path
        name: propertyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Meter'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: List meters for a property
  /meter/{meterId}:
    delete:
      description: Delete a meter by ID
      operationId: deleteMeter
      parameters:
      - description: ID of the required meter
        explode: false
        in: path
        name: meterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete meter
    get:
      description: Get a meter by ID
      operationId: getMeter
      parameters:
      - description: ID of the required meter
        explode: false
        in: path
        name: meterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meter'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get meter
    put:
      description: Update a meter by ID
      operationId: updateMeter
      parameters:
      - description: ID of the required meter
        explode: false
        in: path
        name: meterId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateMeterRequest'
        description: Meter to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meter'
          description: Successfully updated meter
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update meter
  /meter/{meterId}/readings:
    get:
      description: List all meter readings for the current user
      operationId: getMeterReadings
      parameters:
      - description: ID of the required meter
        explode: false
        in: path
        name: meterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MeterReading'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: List meter readings
    post:
      operationId: createMeterReading
      parameters:
      - description: ID of the required meter
        explode: false
        in: path
        name: meterId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateMeterReadingRequest'
        description: Meter reading to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterReading'
          description: Successfully created meter reading
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new meter reading for a meter
  /meter/{meterId}/reading/{readingId}:
    delete:
      description: Delete a meter reading by ID
      operationId: deleteMeterReading
      parameters:
      - description: ID of the required meter
        explode: false
        in: path
        name: meterId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the required meter reading
        explode: false
        in: path
        name: readingId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete meter reading
    get:
      description: Get a meter reading by ID
      operationId: getMeterReading
      parameters:
      - description: ID of the required meter
        explode: false
        in: path
        name: meterId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the required meter reading
        explode: false
        in: path
        name: readingId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterReading'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get meter reading
    put:
      description: Update a meter reading by ID
      operationId: updateMeterReading
      parameters:
      - description: ID of the required meter
        explode: false
        in: path
        name: meterId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the required meter reading
        explode: false
        in: path
        name: readingId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateMeterReadingRequest'
        description: Meter reading to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterReading'
          description: Successfully updated meter reading
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update meter reading
  /note:
    post:
      description: Create a new note for a property or a tenant
      operationId: createNote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNoteRequest'
        description: Note to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
          description: Successfully created note
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Create a new note
  /note/{noteId}:
    delete:
      description: Permantenly delete the note
      operationId: deleteNote
      parameters:
      - description: ID of the required note
        explode: false
        in: path
        name: noteId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete note
    get:
      description: Get the note with all its attributes
      operationId: getNote
      parameters:
      - description: ID of the required note
        explode: false
        in: path
        name: noteId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get note details
    put:
      description: Update an already existing note
      operationId: updateNote
      parameters:
      - description: ID of the required note
        explode: false
        in: path
        name: noteId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNoteRequest'
        description: Updated note object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
          description: Successfully updated note
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update note
  /owner:
    post:
      operationId: createPropertyOwner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdatePropertyOwnerRequest'
        description: Owner to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyOwner'
          description: Successfully created owner
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Create a new property owner
  /owners:
    post:
      operationId: queryPropertyOwners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryPropertyOwnersRequest'
        description: Query parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryPropertyOwnersResponse'
          description: Successfully created owners
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Query property owners
  /owner/{ownerId}:
    delete:
      description: Permantenly delete the property owner
      operationId: deletePropertyOwner
      parameters:
      - description: ID of the required owner
        explode: false
        in: path
        name: ownerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete property owner
    get:
      description: Get the property owner with all its attributes
      operationId: getPropertyOwner
      parameters:
      - description: ID of the required owner
        explode: false
        in: path
        name: ownerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyOwner'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get property owner details
    put:
      description: Update an already existing property owner
      operationId: updatePropertyOwner
      parameters:
      - description: ID of the required owner
        explode: false
        in: path
        name: ownerId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdatePropertyOwnerRequest'
        description: Updated property owner object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyOwner'
          description: Successfully updated property owner
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update property owner
  /profile/company:
    get:
      description: Get the details of the users company profile
      operationId: getCompanyProfile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyProfile'
          description: Successful operation
        "500":
          content: {}
          description: Internal server error
      summary: Get the company profile details
    put:
      description: Update the details of the users company profile
      operationId: updateCompanyProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompanyProfileRequest'
        description: Updated company profile object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyProfile'
          description: Successfully updated company profile
        "500":
          content: {}
          description: Internal server error
      summary: Update company profile
  /preferences:
    get:
      description: Get the details of the user preferences
      operationId: getUserPreferences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
          description: Successful operation
        "500":
          content: {}
          description: Internal server error
      summary: Get the user preferences details
    put:
      description: Update the details of the user preferences
      operationId: updateUserPreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPreferencesRequest'
        description: Updated company profile object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
          description: Successfully updated company profile
        "500":
          content: {}
          description: Internal server error
      summary: Update the user preferences
  /properties:
    post:
      description: Get all properties that are registured under the user's organization
      operationId: queryProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryPropertiesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryPropertiesResponse'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Query properties
  /property:
    post:
      description: Create a new property
      operationId: createProperty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePropertyRequest'
        description: Property that needs to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: Successfully created property
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create property
  /properties/{propId}:
    delete:
      description: Delete the property with all its related data
      operationId: deleteProperty
      parameters:
      - description: ID of the required property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete property
    get:
      description: Get the property with all its attributes
      operationId: getProperty
      parameters:
      - description: ID of the required property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get property details
    put:
      description: Update the base attributes of a property
      operationId: updateProperty
      parameters:
      - description: ID of the required property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertyRequest'
        description: Updated property object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: Successfully updated property
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update property
  /property/{propId}/cases:
    post:
      description: Get all cases of the property that.
      operationId: getPropertyCases
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Case'
                type: array
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get property cases
  /property/{propId}/contacts:
    get:
      description: Get a list of contacts for this property
      operationId: getPropertyContacts
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PropertyContact'
                type: array
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get all contacts for this property
    post:
      description: Link an service provider as a contact to a property
      operationId: createPropertyContact
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdatePropertyContact'
        description: Contact to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyContact'
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Create a property contact
  /property/{propId}/contacts/{entryId}:
    delete:
      description: Delete the property reference to the service provider
      operationId: deletePropertyContact
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the contact
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete a property contact
    get:
      description: Get details of a property contact
      operationId: getPropertyContact
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the contact
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyContact'
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get details of a property contact
    put:
      description: Update an already existing property contact
      operationId: updatePropertyContact
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the contact
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdatePropertyContact'
        description: Contact to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyContact'
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update a property contact
  /property/{propId}/documents:
    get:
      description: Get a list of the documents that were uploaded for this property
      operationId: getPropertyDocumentRepo
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentRepository'
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get all documents for this property
    post:
      description: Create a new document entry with an attachment that
      operationId: createPropertyDocumentRepositoryEntry
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateDocumentRepositoryEntry'
        description: Document repository entry to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentRepositoryEntry'
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Create a new document entry
  /property/{propId}/documents/{entryId}:
    delete:
      description: Delete an entry from a property's document repo
      operationId: deletePropertyDocumentRepositoryEntry
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the entry
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete a single document entry
    get:
      description: Get the details for a document repository entry
      operationId: getPropertyDocumentRepositoryEntry
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the entry
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentRepositoryEntry'
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get details of a document repo entry
    put:
      description: Update an already existing entry from a property's document repository
      operationId: updatePropertyDocumentRepositoryEntry
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the entry
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateDocumentRepositoryEntry'
        description: Updated property object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentRepositoryEntry'
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update an already existing document entry
  /property/{propId}/history:
    get:
      description: Get a list of all events that were captured for the related property
      operationId: getPropertyHistory
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistory'
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get property history
    post:
      description: Create a new entry in the property history
      operationId: createPropertyHistoryEntry
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdatePropertyHistoryEntryRequest'
        description: History entry to be created for property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryEntry'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Create a property history entry
  /property/{propId}/history/{entryId}:
    delete:
      description: Delete the property history entry with all it's attachments
      operationId: deletePropertyHistoryEntry
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the individual history entry to get
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete a history entry
    get:
      description: Get an individual property history entry
      operationId: getPropertyHistoryEntry
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the individual history entry to get
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryEntry'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get property history entry
    put:
      description: Update an already existing
      operationId: updatePropertyHistoryEntry
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the individual history entry to get
        explode: false
        in: path
        name: entryId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdatePropertyHistoryEntryRequest'
        description: Updated property history entry object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryEntry'
          description: Successfully updated property history entry
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update history entry
  /property/{propId}/tenancy:
    get:
      operationId: getPropertyTenancy
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenancy'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the current tenancy for the property
    post:
      operationId: createTenancy
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenancyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenancy'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Create new tenancy for the property
  /property/{propId}/tenancy/history:
    get:
      operationId: getTenancyHistory
      parameters:
      - description: ID of the property
        explode: false
        in: path
        name: propId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tenancy'
                type: array
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the tenancy history for the property
  /reports:
    get:
      description: Get a list of all report definitions that are available for the
        account
      operationId: getReportDefinitions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ReportDefinition'
                type: array
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
  /report:
    post:
      operationId: createReportDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateReportDefinitionRequest'
        description: Report definition that will be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDefinition'
          description: Successfully created report
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new report definition
  /report/{definitionId}:
    delete:
      description: Delete the report definition with all its related data
      operationId: deleteReportDefinition
      parameters:
      - description: ID of the report definition
        explode: false
        in: path
        name: definitionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
    get:
      description: Get the report definition with all its attributes
      operationId: getReportDefinition
      parameters:
      - description: ID of the report definition
        explode: false
        in: path
        name: definitionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDefinition'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
    put:
      description: Update an already existing report definition
      operationId: updateReportDefinition
      parameters:
      - description: ID of the report definition
        explode: false
        in: path
        name: definitionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateReportDefinitionRequest'
        description: Updated report object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDefinition'
          description: Successfully updated report
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
  /report/{definitionId}/execute:
    post:
      description: Execute a report for the given report definition ID
      operationId: executeReport
      parameters:
      - description: ID of the report definition to execute
        explode: false
        in: path
        name: definitionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteReportRequest'
        description: Report execution parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExecution'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
  /reports/executions:
    post:
      operationId: getReportExecutions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryReportExecutionsRequest'
        description: Report execution query criteria
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ReportExecution'
                type: array
          description: successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get all executions that match the given criteria
  /report/executions/{executionId}:
    delete:
      description: Delete the report execution with all its related data
      operationId: deleteReportExecution
      parameters:
      - description: ID of the report execution
        explode: false
        in: path
        name: executionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
    get:
      description: Get the report execution with all its attributes
      operationId: getReportExecution
      parameters:
      - description: ID of the report execution
        explode: false
        in: path
        name: executionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExecution'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get report execution details
  /service-provider:
    post:
      operationId: createServiceProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateServiceProvider'
        description: Service provider that will be created for the account
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvider'
          description: Successfully created service provider
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new service provider for the current account
  /service-providers:
    post:
      operationId: queryServiceProviders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryServiceProvidersRequest'
        description: Service provider query criteria
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryServiceProvidersResponse'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Query all service providers for certain criteria
  /service-provider/{serviceProviderId}:
    delete:
      operationId: deleteServiceProvider
      parameters:
      - description: ID of the required service provider
        explode: false
        in: path
        name: serviceProviderId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete the service provider
    get:
      operationId: getServiceProvider
      parameters:
      - description: ID of the required service provider
        explode: false
        in: path
        name: serviceProviderId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvider'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the service provider with the given ID
    put:
      operationId: updateServiceProvider
      parameters:
      - description: ID of the required service provider
        explode: false
        in: path
        name: serviceProviderId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateServiceProvider'
        description: Updated service provider
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
          description: Successfully updated case
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update the attributes of the service provider
  /summary:
    post:
      operationId: getAccountSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSummaryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSummaryResponse'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get overview of data in the system for current account
  /tenancy/{tenancyId}:
    delete:
      operationId: deleteTenancy
      parameters:
      - description: ID of the tenancy
        explode: false
        in: path
        name: tenancyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete the tenancy with the given ID
    get:
      operationId: getTenancy
      parameters:
      - description: ID of the tenancy
        explode: false
        in: path
        name: tenancyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenancy'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the tenancy with the given ID
    put:
      operationId: updateTenancy
      parameters:
      - description: ID of the tenancy
        explode: false
        in: path
        name: tenancyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenancyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenancy'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update the tenancy with the given ID
  /tenancy/{tenancyId}/updates:
    get:
      operationId: getTenancyUpdates
      parameters:
      - description: ID of the tenancy
        explode: false
        in: path
        name: tenancyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TenancyUpdate'
                type: array
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the tenancy updates for the tenancy
    post:
      operationId: createTenancyUpdate
      parameters:
      - description: ID of the tenancy
        explode: false
        in: path
        name: tenancyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenancyUpdateRequest'
        description: Tenancy update to add to the tenancy
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenancyUpdate'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Create new tenancy update for the tenancy
  /tenancy-update/{tenancyUpdateId}:
    delete:
      operationId: deleteTenancyUpdate
      parameters:
      - description: ID of the tenancy update
        explode: false
        in: path
        name: tenancyUpdateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Operation successfully performed
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete the tenancy update with the given ID
    get:
      operationId: getTenancyUpdate
      parameters:
      - description: ID of the tenancy update
        explode: false
        in: path
        name: tenancyUpdateId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenancyUpdate'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the tenancy update with the given ID
    put:
      operationId: updateTenancyUpdate
      parameters:
      - description: ID of the tenancy update
        explode: false
        in: path
        name: tenancyUpdateId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenancyUpdateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenancyUpdate'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update the tenancy update with the given ID
  /tenants:
    post:
      description: Query the tenants belonging to properties of the account
      operationId: queryTenants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryTenantsRequest'
        description: Tenants query criteria
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryTenantsResponse'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Query all tenants
  /tenant:
    post:
      operationId: createTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: Successfully created tetant
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Create a new tenant and optionally invites them to join the platform
  /tenant/{tenantId}:
    delete:
      description: |
        Delete a tenant, removing it from the property they were assigned to. If the  tenant is a registered user, their account will remain active, however, they  will not be able to access that property any longer.
      operationId: deleteTenant
      parameters:
      - description: ID of the tenant to get
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Invalid input provided
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Remove tenant from property
    get:
      description: Get all details of the tenant
      operationId: getTenant
      parameters:
      - description: ID of the tenant to get
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get tenant details
    put:
      description: Update the contact details of an existing tenant
      operationId: updateTenant
      parameters:
      - description: ID of the tenant to get
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenantRequest'
        description: Tenant to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update tenant information
  /tenant/{tenantId}/tenancies:
    get:
      operationId: getTenantTenancies
      parameters:
      - description: ID of the tenant to get
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tenancy'
                type: array
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get all tenancies for the tenant
  /workflows/definition:
    post:
      operationId: createWorkflowDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateWorkflowDefinitionRequest'
        description: Workflow definition to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDefinition'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new workflow definition
  /workflows/definitions:
    post:
      operationId: queryWorkflowDefinitions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryWorkflowDefinitionsRequest'
        description: Workflow definition query criteria
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryWorkflowDefinitionsResponse'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Query all workflow definitions
  /workflows/definition/{definitionID}:
    delete:
      operationId: deleteWorkflowDefinition
      parameters:
      - description: ID of the workflow definition to get
        explode: false
        in: path
        name: definitionID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete workflow definition
    get:
      operationId: getWorkflowDefinition
      parameters:
      - description: ID of the workflow definition to get
        explode: false
        in: path
        name: definitionID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDefinition'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get workflow definition details
    put:
      operationId: updateWorkflowDefinition
      parameters:
      - description: ID of the workflow definition to get
        explode: false
        in: path
        name: definitionID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateWorkflowDefinitionRequest'
        description: Workflow definition to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDefinition'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update workflow definition
  /workflows/definition/{definitionID}/entrypoint:
    post:
      operationId: createWorkflowEntrypoint
      parameters:
      - description: ID of the workflow definition to get
        explode: false
        in: path
        name: definitionID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateWorkflowEntrypointRequest'
        description: Workflow entry point to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowEntrypoint'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Create a new workflow entry point for the workflow definition
  /workflows/definition/{definitionID}/entrypoints:
    get:
      operationId: getWorkflowEntrypointsForDefinition
      parameters:
      - description: ID of the workflow definition to get
        explode: false
        in: path
        name: definitionID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkflowEntrypoint'
                type: array
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the workflow entry points for the workflow definition
  /workflows/entrypoints:
    get:
      operationId: getWorkflowEntrypoints
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkflowEntrypoint'
                type: array
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get all workflow entry points
  /workflows/entrypoint/{entrypointID}:
    delete:
      operationId: deleteWorkflowEntrypoint
      parameters:
      - description: ID of the workflow entry point to get
        explode: false
        in: path
        name: entrypointID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete workflow entry point
    get:
      operationId: getWorkflowEntrypoint
      parameters:
      - description: ID of the workflow entry point to get
        explode: false
        in: path
        name: entrypointID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowEntrypoint'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get the workflow entry point for the workflow definition
    put:
      operationId: updateWorkflowEntrypoint
      parameters:
      - description: ID of the workflow entry point to get
        explode: false
        in: path
        name: entrypointID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateWorkflowEntrypointRequest'
        description: Workflow entry point to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowEntrypoint'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update workflow entry point
  /workflows/entrypoint/{entrypointID}/execute:
    post:
      operationId: executeWorkflowEntrypoint
      parameters:
      - description: ID of the workflow entry point to execute
        explode: false
        in: path
        name: entrypointID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteWorkflowEntrypointRequest'
        description: Workflow entry point execution parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowExecutionResponse'
          description: Successful operation
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Execute the workflow entry point
  /workflows/executions:
    post:
      operationId: queryWorkflowExecutions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryWorkflowExecutionsRequest'
        description: Workflow execution query criteria
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryWorkflowExecutionsResponse'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: "Get a list of all workflow executions, matching the criteria in the\
        \ request"
  /workflows/execution:
    post:
      operationId: startWorkflowExecution
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartWorkflowExecutionRequest'
        description: Workflow execution to be started
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowExecutionResponse'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Start a new workflow execution
  /workflows/execution/{executionID}:
    delete:
      operationId: deleteWorkflowExecution
      parameters:
      - description: ID of the workflow execution to get
        explode: false
        in: path
        name: executionID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Delete workflow execution
    get:
      operationId: getWorkflowExecution
      parameters:
      - description: ID of the workflow execution to get
        explode: false
        in: path
        name: executionID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowExecution'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Get workflow execution details
    post:
      operationId: executeWorkflowExecutionStep
      parameters:
      - description: ID of the workflow execution to get
        explode: false
        in: path
        name: executionID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteWorkflowStepRequest'
        description: Workflow execution step to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowExecutionResponse'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Execute workflow execution step
    put:
      operationId: updateWorkflowExecution
      parameters:
      - description: ID of the workflow execution to get
        explode: false
        in: path
        name: executionID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflowExecutionRequest'
        description: Workflow execution to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowExecutionResponse'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "404":
          content: {}
          description: Requested entity not found
        "500":
          content: {}
          description: Internal server error
      summary: Update workflow execution
  /workflows/triggers/{executionID}:
    get:
      operationId: getWorkflowExecutionTrigger
      parameters:
      - description: ID of the workflow execution to get
        explode: false
        in: path
        name: executionID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowTrigger'
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get workflow trigger for an execution
  /workflows/trigger/source/{sourceID}:
    get:
      operationId: getWorkflowTriggersForSource
      parameters:
      - description: ID of the source object that triggered a workflow execution
        explode: false
        in: path
        name: sourceID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkflowTrigger'
                type: array
          description: Successful operation
        "400":
          content: {}
          description: Invalid input provided
        "403":
          content: {}
          description: Access denied
        "500":
          content: {}
          description: Internal server error
      summary: Get workflow triggers for a source
components:
  responses:
    resp400:
      content: {}
      description: Invalid input provided
    resp403:
      content: {}
      description: Access denied
    resp500:
      content: {}
      description: Internal server error
    resp200:
      content: {}
      description: Operation successfully performed
    resp404:
      content: {}
      description: Requested entity not found
  schemas:
    ConnectorCustomSyncEntityTenancy:
      description: "Used by connectors to push tenancy data to the backend. \n"
      properties:
        tenancy:
          $ref: '#/components/schemas/Tenancy'
        updates:
          description: list of updates to be applied to the tenancy
          items:
            $ref: '#/components/schemas/TenancyUpdate'
          type: array
      type: object
    Attachment:
      description: |
        A file uploaded and attached to an entity (e.g. case, property, etc.)
      example:
        ref: ref
        thumbnail: thumbnail
        created: 0
        file_type: file_type
        file_name: file_name
        id: id
        file_size: 6
        url: url
      properties:
        id:
          description: the unique ID of the uploaded file
          type: string
        created:
          description: timestamp indicating when the attachment was uploaded
          format: int64
          type: integer
        ref:
          description: "ID of the entity for which this file was uploaded (case, property,\
            \ etc.)"
          type: string
        file_type:
          description: the content type of the attachment
          type: string
        file_size:
          description: the size of the attachment in bytes
          format: int64
          type: integer
        file_name:
          description: the original file name
          type: string
        thumbnail:
          description: optional link to thumbnail (only if file is an image)
          type: string
        url:
          description: "link to the actual file, through whitch it can be downloaded"
          type: string
      type: object
    CreateOrUpdateBankAccountRequest:
      description: The data required to create a new bank account
      example:
        account_holder: account_holder
        iban: iban
        bank_name: bank_name
        description: description
        bic: bic
      properties:
        account_holder:
          description: The name of the account holder (required)
          type: string
        iban:
          description: The IBAN of the bank account (required)
          type: string
        bic:
          description: The BIC of the bank account (optional)
          type: string
        bank_name:
          description: The name of the bank (optional)
          type: string
        description:
          description: "A user friendly label, used to identify the account (optional)"
          type: string
      required:
      - account_holder
      - iban
      type: object
    BankAccount:
      description: Detailed information about a bank account
      example:
        updated_at: 6
        account_holder: account_holder
        iban: iban
        bank_name: bank_name
        created_at: 0
        description: description
        external_id: external_id
        id: id
        bic: bic
        external_source: external_source
      properties:
        id:
          description: The ID of the bank account (auto-generated)
          type: string
        external_id:
          description: "optional external ID, in case acount was created via backend\
            \ integration"
          type: string
        external_source:
          description: "optional external source, in case acount was created via backend\
            \ integration"
          type: string
        created_at:
          description: The timestamp of when the account was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the account was last updated
          format: int64
          type: integer
        account_holder:
          description: The name of the account holder (required)
          type: string
        iban:
          description: The IBAN of the bank account (required)
          type: string
        bic:
          description: The BIC of the bank account (optional)
          type: string
        bank_name:
          description: The name of the bank (optional)
          type: string
        description:
          description: "An optional user friendly label, used to identify the account\
            \ (optional)"
          type: string
      type: object
    QueryBankAccountsRequest:
      description: The data required to query bank accounts
      example:
        offset: 6
        limit: 0
      properties:
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
      type: object
    QueryBankAccountsResponse:
      description: Result of a bank account query
      example:
        total: 1
        offset: 6
        limit: 0
        bank_accounts:
        - updated_at: 6
          account_holder: account_holder
          iban: iban
          bank_name: bank_name
          created_at: 0
          description: description
          external_id: external_id
          id: id
          bic: bic
          external_source: external_source
        - updated_at: 6
          account_holder: account_holder
          iban: iban
          bank_name: bank_name
          created_at: 0
          description: description
          external_id: external_id
          id: id
          bic: bic
          external_source: external_source
      properties:
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        bank_accounts:
          items:
            $ref: '#/components/schemas/BankAccount'
          type: array
      type: object
    CreateCaseRequest:
      description: All the information required for raising a new case
      example:
        property_address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        property_ref: property_ref
        data:
          key: ""
        template_ref: template_ref
        reporter_info:
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
      properties:
        property_ref:
          description: Reference to either property or building for which case is
            rased
          type: string
        property_address:
          $ref: '#/components/schemas/Address'
        reporter_info:
          $ref: '#/components/schemas/ContactData'
        template_ref:
          description: |
            The ID of the case template used to create this case
          type: string
        data:
          additionalProperties: true
          description: |
            Input provided by the user when raising the case as a key-value map
          type: object
      type: object
    Case:
      description: "Case represents a single case, typically raised by a tenant"
      example:
        template: template
        comments:
        - deleted: true
          attachments:
          - ref: ref
            thumbnail: thumbnail
            created: 0
            file_type: file_type
            file_name: file_name
            id: id
            file_size: 6
            url: url
          - ref: ref
            thumbnail: thumbnail
            created: 0
            file_type: file_type
            file_name: file_name
            id: id
            file_size: 6
            url: url
          updated_at: 2
          visibility:
          - ref: ref
            role: null
            name: name
            ref_type: ref_type
          - ref: ref
            role: null
            name: name
            ref_type: ref_type
          author_ref:
            user_role: null
            user_id: user_id
            contact_data:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
          created_at: 5
          id: id
          content: content
        - deleted: true
          attachments:
          - ref: ref
            thumbnail: thumbnail
            created: 0
            file_type: file_type
            file_name: file_name
            id: id
            file_size: 6
            url: url
          - ref: ref
            thumbnail: thumbnail
            created: 0
            file_type: file_type
            file_name: file_name
            id: id
            file_size: 6
            url: url
          updated_at: 2
          visibility:
          - ref: ref
            role: null
            name: name
            ref_type: ref_type
          - ref: ref
            role: null
            name: name
            ref_type: ref_type
          author_ref:
            user_role: null
            user_id: user_id
            contact_data:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
          created_at: 5
          id: id
          content: content
        data:
          key: ""
        status_history:
        - author_ref:
            user_role: null
            user_id: user_id
            contact_data:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
          action: null
          id: id
          assignee:
            contact_ref: contact_ref
            account_ref: 5
          timestamp: 1
          status: null
        - author_ref:
            user_role: null
            user_id: user_id
            contact_data:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
          action: null
          id: id
          assignee:
            contact_ref: contact_ref
            account_ref: 5
          timestamp: 1
          status: null
        created_at: 0
        feedback:
        - form_data:
            key: ""
          visibility:
          - ref: ref
            role: null
            name: name
            ref_type: ref_type
          - ref: ref
            role: null
            name: name
            ref_type: ref_type
          author_ref:
            user_role: null
            user_id: user_id
            contact_data:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
          created_at: 7
          action: null
          feedback_id: feedback_id
          id: id
          source_status: null
        - form_data:
            key: ""
          visibility:
          - ref: ref
            role: null
            name: name
            ref_type: ref_type
          - ref: ref
            role: null
            name: name
            ref_type: ref_type
          author_ref:
            user_role: null
            user_id: user_id
            contact_data:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
          created_at: 7
          action: null
          feedback_id: feedback_id
          id: id
          source_status: null
        archived: true
        property_address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        updated_at: 6
        property_ref: property_ref
        name: name
        parties:
        - ref: ref
          role: null
          name: name
          ref_type: ref_type
        - ref: ref
          role: null
          name: name
          ref_type: ref_type
        id: id
        assignee: assignee
        status: null
      properties:
        id:
          type: string
        created_at:
          format: int64
          type: integer
        updated_at:
          format: int64
          type: integer
        name:
          format: int64
          type: string
        archived:
          description: Indicates if the case has been archived
          type: boolean
        property_ref:
          description: Reference to property
          type: string
        property_address:
          $ref: '#/components/schemas/Address'
        template:
          description: |
            The ID of the case template used to create this case
          type: string
        status:
          $ref: '#/components/schemas/CaseStatusEnum'
        parties:
          description: "List of all accounts that have access to the case (e.g. manager,\
            \ tenenat, and service provider)"
          items:
            $ref: '#/components/schemas/CaseParty'
          type: array
        status_history:
          description: List of all status changes. Latest one is the current one
          items:
            $ref: '#/components/schemas/CaseStatus'
          type: array
        comments:
          items:
            $ref: '#/components/schemas/CaseComment'
          type: array
        feedback:
          description: |
            List of feedback that was provided by the parties when changing the status of the case
          items:
            $ref: '#/components/schemas/CaseFeedbackEntry'
          type: array
        assignee:
          type: string
        data:
          additionalProperties: true
          description: |
            Input provided by the user when raising the case as a key-value map
          type: object
      type: object
    CaseStatusEnum:
      description: "The list of statuses that a case can be in as a result of a status\
        \ change. Each status is a result of a action, where some statuses can be\
        \ reached from multiple actions being triggered. \n"
      enum:
      - ACKNOWLEDGED
      - ANY
      - ARCHIVED
      - AWAITING_ACTION
      - CANCELLED
      - FEEDBACK_REQUESTED
      - IDLE
      - IN_PROGRESS
      - OPEN
      - REJECTED
      - REOPENED
      - RESOLVED
      - WORK_ACCEPTED
      - WORK_COMPLETED
      - WORK_CANCELLED
      - WORK_REJECTED
      - WORK_REQUESTED
      - WORK_SCHEDULED
      type: string
    CaseParty:
      description: CaseParty indicates that the referenced account has access to the
        case.
      example:
        ref: ref
        role: null
        name: name
        ref_type: ref_type
      properties:
        role:
          $ref: '#/components/schemas/UserTypeEnum'
        ref_type:
          description: |
            The type of the reference. Can be either "account" or "external_user". If not set, it will be assumed to be "account"
          type: string
        ref:
          description: the ID of the referenced entity (either string or int64)
          type: string
        name:
          description: |
            The name of the party, derived from the referenced entity
          type: string
      required:
      - account_ref
      - type
      type: object
    CaseStatus:
      description: CaseStatus represents the update to the status of a case
      example:
        author_ref:
          user_role: null
          user_id: user_id
          contact_data:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
        action: null
        id: id
        assignee:
          contact_ref: contact_ref
          account_ref: 5
        timestamp: 1
        status: null
      properties:
        id:
          description: Auto-generated ID of the status update
          type: string
        author_ref:
          $ref: '#/components/schemas/UserReference'
        timestamp:
          format: int64
          type: integer
        action:
          $ref: '#/components/schemas/CaseActionEnum'
        status:
          $ref: '#/components/schemas/CaseStatusEnum'
        assignee:
          $ref: '#/components/schemas/CaseAssignee'
      required:
      - id
      - status
      - timestamp
      type: object
    CaseActionEnum:
      description: |
        The list of actions that can be performed on a case. Each action has a  predetermined target status that is going to be set once the action is performed.
      enum:
      - ACCEPT_WORK
      - ACKNOWLEDGE
      - ARCHIVE
      - ASSIGN
      - CANCEL
      - CANCEL_WORK
      - COMMENT
      - FINISH_WORK
      - OPEN
      - PAUSE_WORK
      - REJECT
      - REJECT_WORK
      - REOPEN
      - REQUEST_FEEDBACK
      - REQUEST_WORK
      - RESCHEDULE_WORK
      - RESOLVE
      - SCHEDULE_WORK
      - START_WORK
      - UNASSIGN
      - UPDATE
      type: string
    CaseAssignee:
      description: Indicates who is currently assigned to work on the case.
      example:
        contact_ref: contact_ref
        account_ref: 5
      properties:
        account_ref:
          description: Set in case the assignee has an account within the plattform
          format: int64
          type: integer
        contact_ref:
          description: |
            Set in case the assignee is a service provider or tenant, without an  account on the plattform
          type: string
      type: object
    CaseComment:
      description: Comment represents a single user comment on a case
      example:
        deleted: true
        attachments:
        - ref: ref
          thumbnail: thumbnail
          created: 0
          file_type: file_type
          file_name: file_name
          id: id
          file_size: 6
          url: url
        - ref: ref
          thumbnail: thumbnail
          created: 0
          file_type: file_type
          file_name: file_name
          id: id
          file_size: 6
          url: url
        updated_at: 2
        visibility:
        - ref: ref
          role: null
          name: name
          ref_type: ref_type
        - ref: ref
          role: null
          name: name
          ref_type: ref_type
        author_ref:
          user_role: null
          user_id: user_id
          contact_data:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
        created_at: 5
        id: id
        content: content
      properties:
        id:
          type: string
        created_at:
          format: int64
          type: integer
        updated_at:
          format: int64
          type: integer
        author_ref:
          $ref: '#/components/schemas/UserReference'
        deleted:
          description: Indicates if the comment has been deleted
          type: boolean
        visibility:
          description: |
            List of paries that should have access to the comment
          items:
            $ref: '#/components/schemas/CaseParty'
          type: array
        content:
          type: string
        attachments:
          description: |
            list of attachments that should be linked to the comment
          items:
            $ref: '#/components/schemas/Attachment'
          type: array
      required:
      - author_ref
      - content
      - created_at
      - id
      type: object
    CaseFeedbackEntry:
      description: |
        Contains the feedback that was provided by a party when changing the status of a case.
      example:
        form_data:
          key: ""
        visibility:
        - ref: ref
          role: null
          name: name
          ref_type: ref_type
        - ref: ref
          role: null
          name: name
          ref_type: ref_type
        author_ref:
          user_role: null
          user_id: user_id
          contact_data:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
        created_at: 7
        action: null
        feedback_id: feedback_id
        id: id
        source_status: null
      properties:
        id:
          description: |
            The unique ID of the feedback entry
          type: string
        created_at:
          format: int64
          type: integer
        author_ref:
          $ref: '#/components/schemas/UserReference'
        source_status:
          $ref: '#/components/schemas/CaseStatusEnum'
        action:
          $ref: '#/components/schemas/CaseActionEnum'
        feedback_id:
          description: |
            The ID of the feedback entry, used to map responses against the config
          type: string
        visibility:
          description: |
            List of paries that should have access to the comment
          items:
            $ref: '#/components/schemas/CaseParty'
          type: array
        form_data:
          additionalProperties: true
          description: |
            Form data that was provided by the party executing the action.
          type: object
      type: object
    UpdateCaseRequest:
      description: All attributes of a case that can be updated
      example:
        property_address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        property_ref: property_ref
        data: data
      properties:
        property_ref:
          description: Reference to property
          type: string
        property_address:
          $ref: '#/components/schemas/Address'
        data:
          description: |
            Input provided by the user when raising the case as a key-value map, serialized as JSON.
          type: string
      type: object
    UpdateCaseStatusRequest:
      description: All the information required for updating the status of a case
      example:
        feedback:
        - form_data:
            key: ""
          comment: comment
          id: id
          attachment_refs:
          - attachment_refs
          - attachment_refs
        - form_data:
            key: ""
          comment: comment
          id: id
          attachment_refs:
          - attachment_refs
          - attachment_refs
        action: null
        assignee:
          contact_ref: contact_ref
          account_ref: 5
      properties:
        action:
          $ref: '#/components/schemas/CaseActionEnum'
        assignee:
          $ref: '#/components/schemas/CaseAssignee'
        feedback:
          description: |
            Feedback that is provided from the party executing the action. This  information will be visible only to the property manager
          items:
            $ref: '#/components/schemas/CaseFeedbackResponse'
          type: array
      type: object
    CaseFeedbackResponse:
      description: |
        Contains the feedback that was provided by a party when changing the status of a case.
      example:
        form_data:
          key: ""
        comment: comment
        id: id
        attachment_refs:
        - attachment_refs
        - attachment_refs
      properties:
        id:
          description: |
            The feedback ID that can be found in the case config
          type: string
        form_data:
          additionalProperties: true
          description: |
            Form data that was provided by the party executing the action.
          type: object
        comment:
          description: comment that was provided in case mode was 'comment'
          type: string
        attachment_refs:
          description: |
            list of IDs of attachments that were provided with the feedback, in case mode was 'comment'
          items:
            type: string
          type: array
      type: object
    CreateCaseCommentRequest:
      description: Request that will create a new comment for a case
      example:
        attachments:
        - ref: ref
          thumbnail: thumbnail
          created: 0
          file_type: file_type
          file_name: file_name
          id: id
          file_size: 6
          url: url
        - ref: ref
          thumbnail: thumbnail
          created: 0
          file_type: file_type
          file_name: file_name
          id: id
          file_size: 6
          url: url
        visibility:
        - ref: ref
          role: null
          name: name
          ref_type: ref_type
        - ref: ref
          role: null
          name: name
          ref_type: ref_type
        content: content
      properties:
        content:
          type: string
        attachments:
          description: |
            list of attachments that should be linked to the comment
          items:
            $ref: '#/components/schemas/Attachment'
          type: array
        visibility:
          description: |
            List of paries that should have access to the comment
          items:
            $ref: '#/components/schemas/CaseParty'
          type: array
      required:
      - content
      type: object
    AssignCaseRequest:
      description: input used to send out case information to service provider
      example:
        contact_ref: contact_ref
        private_message: true
        language: language
        message: message
        attachment_refs:
        - attachment_refs
        - attachment_refs
      properties:
        contact_ref:
          type: string
        language:
          type: string
        message:
          description: a message to be included in the notification to the service
            provider
          type: string
        private_message:
          description: |
            indicates if the message should be visible to the tenant or not
          type: boolean
        attachment_refs:
          items:
            type: string
          type: array
      type: object
    UnssignCaseRequest:
      description: Request used to remove a service provider from a case
      example:
        party:
          ref: ref
          role: null
          name: name
          ref_type: ref_type
      properties:
        party:
          $ref: '#/components/schemas/CaseParty'
      type: object
    QueryCasesRequest:
      description: Request used to get cases by a user
      example:
        archived: true
      properties:
        archived:
          description: "if true, only archived cases will be returned"
          type: boolean
      type: object
    CreateOrUpdateCaseReportingEndpointRequest:
      example:
        property_refs:
        - property_refs
        - property_refs
        name: name
        active: true
        case_templates:
        - case_templates
        - case_templates
      properties:
        name:
          description: |
            The name of the endpoint (only used in admin pages)
          type: string
        active:
          description: |
            Whether the endpoint is enabled or not
          type: boolean
        property_refs:
          description: |
            The IDs of the properties for which the endpoint can be used to raise cases
          items:
            type: string
          type: array
        case_templates:
          description: |
            The IDs of the case templates that should be available on this endpoint
          items:
            type: string
          type: array
      type: object
    CaseReportingEndpoint:
      description: |
        Contains necessary information for displaying a publicly available form,  where tenants who don't have a login can raise cases.
      example:
        code: code
        updated_at: 6
        property_refs:
        - property_refs
        - property_refs
        name: name
        created_at: 0
        active: true
        case_templates:
        - case_templates
        - case_templates
      properties:
        code:
          description: |
            The unique code that identifies the endpoint
          type: string
        created_at:
          description: The timestamp of when the endpoint was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the endpoint was last updated
          format: int64
          type: integer
        name:
          description: |
            The name of the endpoint (only used in admin pages)
          type: string
        active:
          description: |
            Whether the endpoint is enabled or not
          type: boolean
        property_refs:
          items:
            description: |
              Optional IDs of the properties for which the endpoint can be used to  raise cases
            type: string
          type: array
        case_templates:
          description: |
            The IDs of the cases templates that should be available on this endpoint
          items:
            type: string
          type: array
      type: object
    QueryCaseReportingEndpointsRequest:
      example:
        limit: 0
      properties:
        limit:
          description: |
            The maximum number of case endpoints to return
          type: integer
      type: object
    QueryCaseReportingEndpointsResponse:
      example:
        endpoints:
        - code: code
          updated_at: 6
          property_refs:
          - property_refs
          - property_refs
          name: name
          created_at: 0
          active: true
          case_templates:
          - case_templates
          - case_templates
        - code: code
          updated_at: 6
          property_refs:
          - property_refs
          - property_refs
          name: name
          created_at: 0
          active: true
          case_templates:
          - case_templates
          - case_templates
      properties:
        endpoints:
          items:
            $ref: '#/components/schemas/CaseReportingEndpoint'
          type: array
      type: object
    GenerateCaseReportingEndpointNoticeRequest:
      example:
        languages:
        - languages
        - languages
      properties:
        languages:
          description: |
            The language in which the PDF should be generated
          items:
            type: string
          type: array
      type: object
    CreateOrUpdateCaseTemplateRequest:
      example:
        name_expression: name_expression
        info_text:
          key: info_text
        name: name
        icon: icon
        description:
          key: description
        label:
          key: label
        custom_inputs:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        config:
          reminders:
          - schedule:
            - 7
            - 14
            - 30
            status: null
          - schedule:
            - 7
            - 14
            - 30
            status: null
          automatic_status_changes:
          - schedule: 5
            target_status: null
            status: null
          - schedule: 5
            target_status: null
            status: null
          base_config: null
          extend_default_status_config: true
          status_config:
          - feedback:
            - mode: null
              visibility:
              - null
              - null
              form:
                layout:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                inputs:
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                groups:
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                validations:
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
              id: id
            - mode: null
              visibility:
              - null
              - null
              form:
                layout:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                inputs:
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                groups:
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                validations:
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
              id: id
            parties:
            - null
            - null
            action: null
            source_status:
            - null
            - null
            notify:
            - null
            - null
          - feedback:
            - mode: null
              visibility:
              - null
              - null
              form:
                layout:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                inputs:
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                groups:
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                validations:
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
              id: id
            - mode: null
              visibility:
              - null
              - null
              form:
                layout:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                inputs:
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                groups:
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                validations:
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
              id: id
            parties:
            - null
            - null
            action: null
            source_status:
            - null
            - null
            notify:
            - null
            - null
      properties:
        name:
          description: |
            The name of the case template
          type: string
        name_expression:
          description: |
            Optional JS expression used to generate the name of the actual case
          type: string
        label:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        description:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        info_text:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        icon:
          description: |
            The font-awesome icon to use for this template
          type: string
        custom_inputs:
          $ref: '#/components/schemas/CustomForm'
        config:
          $ref: '#/components/schemas/CaseConfig'
      type: object
    CaseConfig:
      description: |
        Defines custom behaviour of a case, based on the case template that was  used to create it.
      example:
        reminders:
        - schedule:
          - 7
          - 14
          - 30
          status: null
        - schedule:
          - 7
          - 14
          - 30
          status: null
        automatic_status_changes:
        - schedule: 5
          target_status: null
          status: null
        - schedule: 5
          target_status: null
          status: null
        base_config: null
        extend_default_status_config: true
        status_config:
        - feedback:
          - mode: null
            visibility:
            - null
            - null
            form:
              layout:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              inputs:
              - view_label:
                  key: view_label
                ephemeral: true
                default_value: default_value
                attributes:
                  key: attributes
                id: id
                label:
                  key: label
                placeholder:
                  key: placeholder
                type: type
                items:
                - items
                - items
                required: true
                target: target
              - view_label:
                  key: view_label
                ephemeral: true
                default_value: default_value
                attributes:
                  key: attributes
                id: id
                label:
                  key: label
                placeholder:
                  key: placeholder
                type: type
                items:
                - items
                - items
                required: true
                target: target
              groups:
              - use_item_group: true
                bottom_divider: true
                top_divider: true
                min_size: 1
                id: id
                label:
                  key: label
                type: type
                items:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                info:
                  key: info
                target: target
              - use_item_group: true
                bottom_divider: true
                top_divider: true
                min_size: 1
                id: id
                label:
                  key: label
                type: type
                items:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                info:
                  key: info
                target: target
              validations:
              - expression: expression
                id: id
                message:
                  key: message
                target: target
              - expression: expression
                id: id
                message:
                  key: message
                target: target
            id: id
          - mode: null
            visibility:
            - null
            - null
            form:
              layout:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              inputs:
              - view_label:
                  key: view_label
                ephemeral: true
                default_value: default_value
                attributes:
                  key: attributes
                id: id
                label:
                  key: label
                placeholder:
                  key: placeholder
                type: type
                items:
                - items
                - items
                required: true
                target: target
              - view_label:
                  key: view_label
                ephemeral: true
                default_value: default_value
                attributes:
                  key: attributes
                id: id
                label:
                  key: label
                placeholder:
                  key: placeholder
                type: type
                items:
                - items
                - items
                required: true
                target: target
              groups:
              - use_item_group: true
                bottom_divider: true
                top_divider: true
                min_size: 1
                id: id
                label:
                  key: label
                type: type
                items:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                info:
                  key: info
                target: target
              - use_item_group: true
                bottom_divider: true
                top_divider: true
                min_size: 1
                id: id
                label:
                  key: label
                type: type
                items:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                info:
                  key: info
                target: target
              validations:
              - expression: expression
                id: id
                message:
                  key: message
                target: target
              - expression: expression
                id: id
                message:
                  key: message
                target: target
            id: id
          parties:
          - null
          - null
          action: null
          source_status:
          - null
          - null
          notify:
          - null
          - null
        - feedback:
          - mode: null
            visibility:
            - null
            - null
            form:
              layout:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              inputs:
              - view_label:
                  key: view_label
                ephemeral: true
                default_value: default_value
                attributes:
                  key: attributes
                id: id
                label:
                  key: label
                placeholder:
                  key: placeholder
                type: type
                items:
                - items
                - items
                required: true
                target: target
              - view_label:
                  key: view_label
                ephemeral: true
                default_value: default_value
                attributes:
                  key: attributes
                id: id
                label:
                  key: label
                placeholder:
                  key: placeholder
                type: type
                items:
                - items
                - items
                required: true
                target: target
              groups:
              - use_item_group: true
                bottom_divider: true
                top_divider: true
                min_size: 1
                id: id
                label:
                  key: label
                type: type
                items:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                info:
                  key: info
                target: target
              - use_item_group: true
                bottom_divider: true
                top_divider: true
                min_size: 1
                id: id
                label:
                  key: label
                type: type
                items:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                info:
                  key: info
                target: target
              validations:
              - expression: expression
                id: id
                message:
                  key: message
                target: target
              - expression: expression
                id: id
                message:
                  key: message
                target: target
            id: id
          - mode: null
            visibility:
            - null
            - null
            form:
              layout:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              inputs:
              - view_label:
                  key: view_label
                ephemeral: true
                default_value: default_value
                attributes:
                  key: attributes
                id: id
                label:
                  key: label
                placeholder:
                  key: placeholder
                type: type
                items:
                - items
                - items
                required: true
                target: target
              - view_label:
                  key: view_label
                ephemeral: true
                default_value: default_value
                attributes:
                  key: attributes
                id: id
                label:
                  key: label
                placeholder:
                  key: placeholder
                type: type
                items:
                - items
                - items
                required: true
                target: target
              groups:
              - use_item_group: true
                bottom_divider: true
                top_divider: true
                min_size: 1
                id: id
                label:
                  key: label
                type: type
                items:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                info:
                  key: info
                target: target
              - use_item_group: true
                bottom_divider: true
                top_divider: true
                min_size: 1
                id: id
                label:
                  key: label
                type: type
                items:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                info:
                  key: info
                target: target
              validations:
              - expression: expression
                id: id
                message:
                  key: message
                target: target
              - expression: expression
                id: id
                message:
                  key: message
                target: target
            id: id
          parties:
          - null
          - null
          action: null
          source_status:
          - null
          - null
          notify:
          - null
          - null
      properties:
        base_config:
          $ref: '#/components/schemas/BaseCaseConfig'
        extend_default_status_config:
          description: |
            Indicates if the default status configuration should be extended with  the custom configuration. If false, the custom configuration will  replace the default configuration. If true, only the actions that are  defined in the custom configuration will override the default ones.
          type: boolean
        status_config:
          description: |
            The configuration for the status transition of a case. This is used to  determine which status changes are allowed by which party at which time.
          items:
            $ref: '#/components/schemas/CaseStatusConfig'
          type: array
        reminders:
          description: |
            The configuration for sending out reminders for a case.
          items:
            $ref: '#/components/schemas/CaseReminderConfig'
          type: array
        automatic_status_changes:
          description: |
            The configuration for automatic status changes of a case. This is used to  determine which status changes are allowed by which party at which time.
          items:
            $ref: '#/components/schemas/CaseAutomaticStatusChangeConfig'
          type: array
      type: object
    BaseCaseConfig:
      description: |
        The list of base case configs that can be used to define the behaviour of a case.
      enum:
      - DEFAULT
      - SIMPLE
      - FULL
      type: string
    CaseStatusConfig:
      description: |
        Contains the configuration for the status of a case. This is used to  determine which status changes are allowed.
      example:
        feedback:
        - mode: null
          visibility:
          - null
          - null
          form:
            layout:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            inputs:
            - view_label:
                key: view_label
              ephemeral: true
              default_value: default_value
              attributes:
                key: attributes
              id: id
              label:
                key: label
              placeholder:
                key: placeholder
              type: type
              items:
              - items
              - items
              required: true
              target: target
            - view_label:
                key: view_label
              ephemeral: true
              default_value: default_value
              attributes:
                key: attributes
              id: id
              label:
                key: label
              placeholder:
                key: placeholder
              type: type
              items:
              - items
              - items
              required: true
              target: target
            groups:
            - use_item_group: true
              bottom_divider: true
              top_divider: true
              min_size: 1
              id: id
              label:
                key: label
              type: type
              items:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              info:
                key: info
              target: target
            - use_item_group: true
              bottom_divider: true
              top_divider: true
              min_size: 1
              id: id
              label:
                key: label
              type: type
              items:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              info:
                key: info
              target: target
            validations:
            - expression: expression
              id: id
              message:
                key: message
              target: target
            - expression: expression
              id: id
              message:
                key: message
              target: target
          id: id
        - mode: null
          visibility:
          - null
          - null
          form:
            layout:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            inputs:
            - view_label:
                key: view_label
              ephemeral: true
              default_value: default_value
              attributes:
                key: attributes
              id: id
              label:
                key: label
              placeholder:
                key: placeholder
              type: type
              items:
              - items
              - items
              required: true
              target: target
            - view_label:
                key: view_label
              ephemeral: true
              default_value: default_value
              attributes:
                key: attributes
              id: id
              label:
                key: label
              placeholder:
                key: placeholder
              type: type
              items:
              - items
              - items
              required: true
              target: target
            groups:
            - use_item_group: true
              bottom_divider: true
              top_divider: true
              min_size: 1
              id: id
              label:
                key: label
              type: type
              items:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              info:
                key: info
              target: target
            - use_item_group: true
              bottom_divider: true
              top_divider: true
              min_size: 1
              id: id
              label:
                key: label
              type: type
              items:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              info:
                key: info
              target: target
            validations:
            - expression: expression
              id: id
              message:
                key: message
              target: target
            - expression: expression
              id: id
              message:
                key: message
              target: target
          id: id
        parties:
        - null
        - null
        action: null
        source_status:
        - null
        - null
        notify:
        - null
        - null
      properties:
        action:
          $ref: '#/components/schemas/CaseActionEnum'
        source_status:
          description: |
            A list of possible statuses in which the case must be, so that the configuration applies.
          items:
            $ref: '#/components/schemas/CaseStatusEnum'
          type: array
        parties:
          description: |
            The parties for which the configuration applies, that is the parties that are allowed to  execute the action when the case is in onf of the source status.
          items:
            $ref: '#/components/schemas/UserTypeEnum'
          type: array
        feedback:
          description: |
            Optional list of feedback that is requested from the party executing the action.
          items:
            $ref: '#/components/schemas/CaseFeedbackConfig'
          type: array
        notify:
          description: |
            The list of parties that should be notified of the status change.
          items:
            $ref: '#/components/schemas/UserTypeEnum'
          type: array
      type: object
    CaseFeedbackConfig:
      example:
        mode: null
        visibility:
        - null
        - null
        form:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        id: id
      properties:
        id:
          description: |
            The ID of the feedback entry, used to map responses against the config
          type: string
        visibility:
          description: |
            The visibility of the feedback entry. This is used to determine which  parties can see the feedback entry.
          items:
            $ref: '#/components/schemas/UserTypeEnum'
          type: array
        mode:
          $ref: '#/components/schemas/CaseFeedbackModeEnum'
        form:
          $ref: '#/components/schemas/CustomForm'
      type: object
    CaseFeedbackModeEnum:
      description: |
        The list of feedback modes that can be used to collect information from a case party.
      enum:
      - OPTIONAL_COMMENT
      - REQUIRED_COMMENT
      - FORM
      type: string
    CaseReminderConfig:
      description: |
        Defines the configuration for sending out reminders for a case.
      example:
        schedule:
        - 7
        - 14
        - 30
        status: null
      properties:
        status:
          $ref: '#/components/schemas/CaseStatusEnum'
        schedule:
          description: |
            The number of days after which the reminder should be sent out. The updated_at attribute is considered for the calculation.
          example:
          - 7
          - 14
          - 30
          items:
            type: integer
          type: array
      type: object
    CaseAutomaticStatusChangeConfig:
      description: |
        Defines the configuration for automatic status changes of a case.
      example:
        schedule: 5
        target_status: null
        status: null
      properties:
        status:
          $ref: '#/components/schemas/CaseStatusEnum'
        schedule:
          description: |
            The number of days after which the status change should be triggered. The updated_at attribute is considered for the calculation.
          type: integer
        target_status:
          $ref: '#/components/schemas/CaseStatusEnum'
      type: object
    CaseTemplate:
      description: |
        Contains the information necessary to create a report of a certain  type from a report endpoint.
      example:
        updated_at: 6
        name_expression: name_expression
        info_text:
          key: info_text
        name: name
        icon: icon
        created_at: 0
        description:
          key: description
        id: id
        label:
          key: label
        custom_inputs:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        config:
          reminders:
          - schedule:
            - 7
            - 14
            - 30
            status: null
          - schedule:
            - 7
            - 14
            - 30
            status: null
          automatic_status_changes:
          - schedule: 5
            target_status: null
            status: null
          - schedule: 5
            target_status: null
            status: null
          base_config: null
          extend_default_status_config: true
          status_config:
          - feedback:
            - mode: null
              visibility:
              - null
              - null
              form:
                layout:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                inputs:
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                groups:
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                validations:
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
              id: id
            - mode: null
              visibility:
              - null
              - null
              form:
                layout:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                inputs:
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                groups:
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                validations:
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
              id: id
            parties:
            - null
            - null
            action: null
            source_status:
            - null
            - null
            notify:
            - null
            - null
          - feedback:
            - mode: null
              visibility:
              - null
              - null
              form:
                layout:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                inputs:
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                groups:
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                validations:
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
              id: id
            - mode: null
              visibility:
              - null
              - null
              form:
                layout:
                - ref_id: ref_id
                  ref_type: ref_type
                - ref_id: ref_id
                  ref_type: ref_type
                inputs:
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                - view_label:
                    key: view_label
                  ephemeral: true
                  default_value: default_value
                  attributes:
                    key: attributes
                  id: id
                  label:
                    key: label
                  placeholder:
                    key: placeholder
                  type: type
                  items:
                  - items
                  - items
                  required: true
                  target: target
                groups:
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                - use_item_group: true
                  bottom_divider: true
                  top_divider: true
                  min_size: 1
                  id: id
                  label:
                    key: label
                  type: type
                  items:
                  - ref_id: ref_id
                    ref_type: ref_type
                  - ref_id: ref_id
                    ref_type: ref_type
                  info:
                    key: info
                  target: target
                validations:
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
                - expression: expression
                  id: id
                  message:
                    key: message
                  target: target
              id: id
            parties:
            - null
            - null
            action: null
            source_status:
            - null
            - null
            notify:
            - null
            - null
      properties:
        id:
          description: |
            The ID of the cases template
          type: string
        created_at:
          description: The timestamp of when the template was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the template was last updated
          format: int64
          type: integer
        name:
          description: |
            The name of the cases template (only used in admin pages). If not set, the name of the template will be used instead.
          type: string
        name_expression:
          description: |
            Optional JS expression used to generate the name of the actual case
          type: string
        label:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        description:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        info_text:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        icon:
          description: |
            The font-awesome icon to use for this template
          type: string
        custom_inputs:
          $ref: '#/components/schemas/CustomForm'
        config:
          $ref: '#/components/schemas/CaseConfig'
      type: object
    QueryCaseTemplatesRequest:
      example:
        limit: 0
      properties:
        limit:
          description: |
            The maximum number of case templates to return.
          type: integer
      type: object
    ConnectorConfig:
      description: "Connector configuration that can be pulled by any connector and\
        \ which indicates what data to be synchronised how often. \n"
      example:
        sync_times: sync_times
        entities:
        - null
        - null
        connector_id: connector_id
        log_level: null
        description: description
        enabled: true
        ping_times: ping_times
      properties:
        connector_id:
          description: |
            unique identifier of the connector. This is used to identify the connector when the backend pushes the config to the connector
          type: string
        description:
          description: short description of the connector
          type: string
        enabled:
          description: |
            indicates whether the connector should push data or not. While disabled the connector will not attempt to push data to the backend, however, it  will continue to ping the backend to check for updates to the config.
          type: boolean
        sync_times:
          description: cron expression that tells the connector how often to sync
            data
          type: string
        ping_times:
          description: |
            cron expression that tells the connector how often to ping the server and  retrieve the config
          type: string
        entities:
          description: list of entity types to be synchronised
          items:
            $ref: '#/components/schemas/ConnectorEntityType'
          type: array
        log_level:
          $ref: '#/components/schemas/ConnectorLogLevelEnum'
      type: object
    ConnectorEntityType:
      description: |
        The type of entity that can be synchronised. This is used to indicate what data to be synchronised by the connector
      enum:
      - BANK_ACCOUNT
      - TENANT
      - TENANCY
      - OWNER
      - PROPERTY
      - SERVICE_PROVIDER
      type: string
    ConnectorLogLevelEnum:
      description: |
        Log level to be used by the connector. If not provided, the connector will use the default log level
      enum:
      - DEBUG
      - INFO
      - WARNING
      - ERROR
      type: string
    CreateConnectorConfigRequest:
      description: Request used to update a connector config
      example:
        sync_times: sync_times
        entities:
        - entities
        - entities
        connector_id: connector_id
        log_level: null
        description: description
        enabled: true
        ping_times: ping_times
      properties:
        connector_id:
          description: id of the connector
          type: string
        description:
          description: short description of the connector
          type: string
        enabled:
          description: |
            indicates whether the connector should push data or not. While disabled the connector will not attempt to push data to the backend, however, it  will continue to ping the backend to check for updates to the config.
          type: boolean
        sync_times:
          description: cron expression that tells the connector how often to sync
            data
          type: string
        ping_times:
          description: |
            cron expression that tells the connector how often to ping the server and  retrieve the config
          type: string
        entities:
          description: list of entities to be synchronised
          items:
            type: string
          type: array
        log_level:
          $ref: '#/components/schemas/ConnectorLogLevelEnum'
      type: object
    ConnectorCredentials:
      description: Connector credentials
      example:
        last_access: 0
        api_key: api_key
        api_secret: api_secret
      properties:
        api_key:
          description: api key of the connector
          type: string
        api_secret:
          description: api secret of the connector
          type: string
        last_access:
          description: timestamp of the last access of the credentials
          format: int64
          type: integer
      type: object
    CreateConnectorCredentialsRequest:
      description: Request used to create connector credentials
      example:
        connector_id: connector_id
      properties:
        connector_id:
          description: id of the connector
          type: string
      type: object
    UpdateConnectorConfigRequest:
      description: Request used to update a connector config
      example:
        sync_times: sync_times
        entities:
        - entities
        - entities
        log_level: null
        description: description
        enabled: true
        ping_times: ping_times
      properties:
        description:
          description: short description of the connector
          type: string
        enabled:
          description: |
            indicates whether the connector should push data or not. While disabled the connector will not attempt to push data to the backend, however, it  will continue to ping the backend to check for updates to the config.
          type: boolean
        sync_times:
          description: cron expression that tells the connector how often to sync
            data
          type: string
        ping_times:
          description: |
            cron expression that tells the connector how often to ping the server and  retrieve the config
          type: string
        entities:
          description: list of entities to be synchronised
          items:
            type: string
          type: array
        log_level:
          $ref: '#/components/schemas/ConnectorLogLevelEnum'
      type: object
    ConnectorStatus:
      description: Information about the status of the connector
      example:
        last_sync: 6
        last_ping: 0
        entity_infos:
        - total_count: 1
          last_update: 5
          progress: progress
          type: null
        - total_count: 1
          last_update: 5
          progress: progress
          type: null
      properties:
        last_ping:
          description: timestamp of the last ping
          format: int64
          type: integer
        last_sync:
          description: timestamp of the last sync
          format: int64
          type: integer
        entity_infos:
          description: list of entities that were synced by the connector
          items:
            $ref: '#/components/schemas/ConnectorEntitySyncInfo'
          type: array
      type: object
    ConnectorEntitySyncInfo:
      description: |
        Used in connector configurations to indicate what data to be synchronised
      example:
        total_count: 1
        last_update: 5
        progress: progress
        type: null
      properties:
        type:
          $ref: '#/components/schemas/ConnectorEntityType'
        total_count:
          description: |
            total count of the entities that are currently available in the Udoma database,  that were synced by the connector.
          format: int64
          type: integer
        last_update:
          description: |
            optional timestamp of the last update. If the timestamp is not provided, the connector will sync all data for the entity
          format: int64
          type: integer
        progress:
          description: |
            a progress indicator that can be used by the connector to know how far it is in the sync process. The backend will not use this value, but it will be returned in the response to the connector.
          type: string
      type: object
    ConnectorPingRequest:
      description: |
        Used by connectors to ping the backend. The request only contains the  connector meta data.
      example:
        connector_meta:
          connector_id: connector_id
          version: version
      properties:
        connector_meta:
          $ref: '#/components/schemas/ConnectorMeta'
      type: object
    ConnectorMeta:
      example:
        connector_id: connector_id
        version: version
      properties:
        connector_id:
          description: id of the connector
          type: string
        version:
          description: version of the connector
          type: string
      type: object
    PingResponse:
      description: Response used for connector pings
      example:
        entities:
        - total_count: 1
          last_update: 5
          progress: progress
          type: null
        - total_count: 1
          last_update: 5
          progress: progress
          type: null
        config:
          sync_times: sync_times
          entities:
          - null
          - null
          connector_id: connector_id
          log_level: null
          description: description
          enabled: true
          ping_times: ping_times
      properties:
        config:
          $ref: '#/components/schemas/ConnectorConfig'
        entities:
          items:
            $ref: '#/components/schemas/ConnectorEntitySyncInfo'
          type: array
      type: object
    ConnectorSyncRequest:
      description: |
        Used by connectors to push data to the backend. It contains a list of entities to be synchronised and the timestamp of the last update, as well as error logs in case the connector failed to sync data.
      example:
        data:
        - data: data
          progress: progress
          type: null
        - data: data
          progress: progress
          type: null
        connector_meta:
          connector_id: connector_id
          version: version
        logs:
        - severity: null
          message: message
          timestamp: 0
        - severity: null
          message: message
          timestamp: 0
      properties:
        connector_meta:
          $ref: '#/components/schemas/ConnectorMeta'
        data:
          description: list of entities to be synchronised
          items:
            $ref: '#/components/schemas/ConnectorSyncEntity'
          type: array
        logs:
          description: list of errors that occurred during the sync
          items:
            $ref: '#/components/schemas/ConnectorSyncLog'
          type: array
      type: object
    ConnectorSyncEntity:
      description: "Used by connectors to push entity data to the backend. \n"
      example:
        data: data
        progress: progress
        type: null
      properties:
        type:
          $ref: '#/components/schemas/ConnectorEntityType'
        data:
          description: json representation of the entity
          type: string
        progress:
          description: |
            a progress indicator that can be used by the connector to know how far it is in the sync process. The backend will not use this value, but it will be returned in the response to the connector.
          type: string
      type: object
    ConnectorSyncLog:
      description: |
        Used by connectors to push error logs to the backend.
      example:
        severity: null
        message: message
        timestamp: 0
      properties:
        timestamp:
          description: timestamp of the error
          format: int64
          type: integer
        severity:
          $ref: '#/components/schemas/ConnectorLogLevelEnum'
        message:
          description: log message
          type: string
      type: object
    CreateOrUpdateCustomerScriptRequest:
      example:
        scope: null
        name: name
        description: description
        script: script
      properties:
        name:
          description: |
            The function name under which the script will be available in the scripting environment
          type: string
        description:
          description: |
            A description of the script
          type: string
        scope:
          $ref: '#/components/schemas/CustomerScriptScope'
        script:
          description: |
            The actual JS script code
          type: string
      type: object
    CustomerScriptScope:
      enum:
      - GLOBAL
      - DOCUMENT
      - WORKFLOW
      - REPORT
      - VALIDATION
      type: string
    CustomerScript:
      example:
        updated_at: 6
        scope: null
        name: name
        created_at: 0
        description: description
        id: id
        script: script
      properties:
        id:
          type: string
        created_at:
          description: The timestamp of when the script was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the script was last updated
          format: int64
          type: integer
        name:
          description: |
            The function name under which the script will be available in the scripting environment
          type: string
        description:
          description: |
            A description of the script
          type: string
        scope:
          $ref: '#/components/schemas/CustomerScriptScope'
        script:
          description: |
            The actual JS script code
          type: string
      type: object
    QueryDataCollectionRequest:
      description: query parameters for loading data collection items
      example:
        offset: 6
        limit: 0
      properties:
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
      type: object
    QueryDataCollectionResponse:
      description: "query result, containing data collection items"
      example:
        data:
        - date: 6
          tenants:
          - profession: profession
            day_of_birth: day_of_birth
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            title: title
            marital_status: marital_status
            employer: employer
            phone_number: phone_number
            id: id
            net_income: 5.962133916683182
            employement_since: 1
            employer_contact:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
            first_name: first_name
            email: email
            id_upload:
              back:
                ref: ref
                thumbnail: thumbnail
                created: 0
                file_type: file_type
                file_name: file_name
                id: id
                file_size: 6
                url: url
              front:
                ref: ref
                thumbnail: thumbnail
                created: 0
                file_type: file_type
                file_name: file_name
                id: id
                file_size: 6
                url: url
          - profession: profession
            day_of_birth: day_of_birth
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            title: title
            marital_status: marital_status
            employer: employer
            phone_number: phone_number
            id: id
            net_income: 5.962133916683182
            employement_since: 1
            employer_contact:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
            first_name: first_name
            email: email
            id_upload:
              back:
                ref: ref
                thumbnail: thumbnail
                created: 0
                file_type: file_type
                file_name: file_name
                id: id
                file_size: 6
                url: url
              front:
                ref: ref
                thumbnail: thumbnail
                created: 0
                file_type: file_type
                file_name: file_name
                id: id
                file_size: 6
                url: url
          property_address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          additional_data:
            key: additional_data
          start_of_tenancy: 0
          property_ref: property_ref
          additional_info:
            commercial_use:
              s: s
              v: true
              "n": 5.637376656633329
            pets:
              s: s
              v: true
              "n": 5.637376656633329
            affidavit:
              s: s
              v: true
              "n": 5.637376656633329
            foreclosure:
              s: s
              v: true
              "n": 5.637376656633329
            subletting:
              s: s
              v: true
              "n": 5.637376656633329
            eviction:
              s: s
              v: true
              "n": 5.637376656633329
            criminal_record:
              s: s
              v: true
              "n": 5.637376656633329
            social_benefits:
              s: s
              v: true
              "n": 5.637376656633329
            rent_arrears: true
            bankruptcy:
              s: s
              v: true
              "n": 5.637376656633329
            musical_instruments:
              s: s
              v: true
              "n": 5.637376656633329
          endpoint_id: endpoint_id
          id: id
          additional_tenants:
          - day_of_birth: day_of_birth
            name: name
            relationship: relationship
          - day_of_birth: day_of_birth
            name: name
            relationship: relationship
        - date: 6
          tenants:
          - profession: profession
            day_of_birth: day_of_birth
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            title: title
            marital_status: marital_status
            employer: employer
            phone_number: phone_number
            id: id
            net_income: 5.962133916683182
            employement_since: 1
            employer_contact:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
            first_name: first_name
            email: email
            id_upload:
              back:
                ref: ref
                thumbnail: thumbnail
                created: 0
                file_type: file_type
                file_name: file_name
                id: id
                file_size: 6
                url: url
              front:
                ref: ref
                thumbnail: thumbnail
                created: 0
                file_type: file_type
                file_name: file_name
                id: id
                file_size: 6
                url: url
          - profession: profession
            day_of_birth: day_of_birth
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            title: title
            marital_status: marital_status
            employer: employer
            phone_number: phone_number
            id: id
            net_income: 5.962133916683182
            employement_since: 1
            employer_contact:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
            first_name: first_name
            email: email
            id_upload:
              back:
                ref: ref
                thumbnail: thumbnail
                created: 0
                file_type: file_type
                file_name: file_name
                id: id
                file_size: 6
                url: url
              front:
                ref: ref
                thumbnail: thumbnail
                created: 0
                file_type: file_type
                file_name: file_name
                id: id
                file_size: 6
                url: url
          property_address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          additional_data:
            key: additional_data
          start_of_tenancy: 0
          property_ref: property_ref
          additional_info:
            commercial_use:
              s: s
              v: true
              "n": 5.637376656633329
            pets:
              s: s
              v: true
              "n": 5.637376656633329
            affidavit:
              s: s
              v: true
              "n": 5.637376656633329
            foreclosure:
              s: s
              v: true
              "n": 5.637376656633329
            subletting:
              s: s
              v: true
              "n": 5.637376656633329
            eviction:
              s: s
              v: true
              "n": 5.637376656633329
            criminal_record:
              s: s
              v: true
              "n": 5.637376656633329
            social_benefits:
              s: s
              v: true
              "n": 5.637376656633329
            rent_arrears: true
            bankruptcy:
              s: s
              v: true
              "n": 5.637376656633329
            musical_instruments:
              s: s
              v: true
              "n": 5.637376656633329
          endpoint_id: endpoint_id
          id: id
          additional_tenants:
          - day_of_birth: day_of_birth
            name: name
            relationship: relationship
          - day_of_birth: day_of_birth
            name: name
            relationship: relationship
        offset: 7
        limit: 2
      properties:
        data:
          items:
            $ref: '#/components/schemas/DataCollectionItem'
          type: array
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
      type: object
    DataCollectionItem:
      description: Data that must be collected from tenants
      example:
        date: 6
        tenants:
        - profession: profession
          day_of_birth: day_of_birth
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          title: title
          marital_status: marital_status
          employer: employer
          phone_number: phone_number
          id: id
          net_income: 5.962133916683182
          employement_since: 1
          employer_contact:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
          first_name: first_name
          email: email
          id_upload:
            back:
              ref: ref
              thumbnail: thumbnail
              created: 0
              file_type: file_type
              file_name: file_name
              id: id
              file_size: 6
              url: url
            front:
              ref: ref
              thumbnail: thumbnail
              created: 0
              file_type: file_type
              file_name: file_name
              id: id
              file_size: 6
              url: url
        - profession: profession
          day_of_birth: day_of_birth
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          title: title
          marital_status: marital_status
          employer: employer
          phone_number: phone_number
          id: id
          net_income: 5.962133916683182
          employement_since: 1
          employer_contact:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
          first_name: first_name
          email: email
          id_upload:
            back:
              ref: ref
              thumbnail: thumbnail
              created: 0
              file_type: file_type
              file_name: file_name
              id: id
              file_size: 6
              url: url
            front:
              ref: ref
              thumbnail: thumbnail
              created: 0
              file_type: file_type
              file_name: file_name
              id: id
              file_size: 6
              url: url
        property_address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        additional_data:
          key: additional_data
        start_of_tenancy: 0
        property_ref: property_ref
        additional_info:
          commercial_use:
            s: s
            v: true
            "n": 5.637376656633329
          pets:
            s: s
            v: true
            "n": 5.637376656633329
          affidavit:
            s: s
            v: true
            "n": 5.637376656633329
          foreclosure:
            s: s
            v: true
            "n": 5.637376656633329
          subletting:
            s: s
            v: true
            "n": 5.637376656633329
          eviction:
            s: s
            v: true
            "n": 5.637376656633329
          criminal_record:
            s: s
            v: true
            "n": 5.637376656633329
          social_benefits:
            s: s
            v: true
            "n": 5.637376656633329
          rent_arrears: true
          bankruptcy:
            s: s
            v: true
            "n": 5.637376656633329
          musical_instruments:
            s: s
            v: true
            "n": 5.637376656633329
        endpoint_id: endpoint_id
        id: id
        additional_tenants:
        - day_of_birth: day_of_birth
          name: name
          relationship: relationship
        - day_of_birth: day_of_birth
          name: name
          relationship: relationship
      properties:
        id:
          description: the ID of the item that is generated by the system once the
            data is submitted
          type: string
        endpoint_id:
          description: the ID of the endpoint that was used to collect the data
          type: string
        property_address:
          $ref: '#/components/schemas/Address'
        property_ref:
          description: a reference to the property
          type: string
        start_of_tenancy:
          description: the date at which the tenancy will officially begin
          format: int64
          type: integer
        date:
          description: time of submission of the data collection item (generated by
            the server)
          format: int64
          type: integer
        tenants:
          items:
            $ref: '#/components/schemas/TenantInfo'
          type: array
        additional_tenants:
          items:
            $ref: '#/components/schemas/AdditionalTenant'
          type: array
        additional_info:
          $ref: '#/components/schemas/TenantsAdditionalInfo'
        additional_data:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
      type: object
    TenantInfo:
      description: "Information about an individual potential tenant, collected via\
        \ the public form"
      example:
        profession: profession
        day_of_birth: day_of_birth
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        last_name: last_name
        title: title
        marital_status: marital_status
        employer: employer
        phone_number: phone_number
        id: id
        net_income: 5.962133916683182
        employement_since: 1
        employer_contact:
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
        first_name: first_name
        email: email
        id_upload:
          back:
            ref: ref
            thumbnail: thumbnail
            created: 0
            file_type: file_type
            file_name: file_name
            id: id
            file_size: 6
            url: url
          front:
            ref: ref
            thumbnail: thumbnail
            created: 0
            file_type: file_type
            file_name: file_name
            id: id
            file_size: 6
            url: url
      properties:
        id:
          type: string
        title:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        marital_status:
          type: string
        day_of_birth:
          type: string
        phone_number:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        profession:
          type: string
        employer:
          type: string
        employement_since:
          format: int64
          type: integer
        employer_contact:
          $ref: '#/components/schemas/ContactData'
        net_income:
          type: number
        id_upload:
          $ref: '#/components/schemas/IDUpload'
      type: object
    AdditionalTenant:
      description: additional tenants who will not be included in the contract
      example:
        day_of_birth: day_of_birth
        name: name
        relationship: relationship
      properties:
        name:
          type: string
        day_of_birth:
          type: string
        relationship:
          type: string
      type: object
    TenantsAdditionalInfo:
      description: "Additional information about future tenantes, collected via public\
        \ form"
      example:
        commercial_use:
          s: s
          v: true
          "n": 5.637376656633329
        pets:
          s: s
          v: true
          "n": 5.637376656633329
        affidavit:
          s: s
          v: true
          "n": 5.637376656633329
        foreclosure:
          s: s
          v: true
          "n": 5.637376656633329
        subletting:
          s: s
          v: true
          "n": 5.637376656633329
        eviction:
          s: s
          v: true
          "n": 5.637376656633329
        criminal_record:
          s: s
          v: true
          "n": 5.637376656633329
        social_benefits:
          s: s
          v: true
          "n": 5.637376656633329
        rent_arrears: true
        bankruptcy:
          s: s
          v: true
          "n": 5.637376656633329
        musical_instruments:
          s: s
          v: true
          "n": 5.637376656633329
      properties:
        rent_arrears:
          description: has one of the tenants have any rent arrears from previous
            tenancies
          type: boolean
        eviction:
          $ref: '#/components/schemas/YesNoOrValue'
        foreclosure:
          $ref: '#/components/schemas/YesNoOrValue'
        affidavit:
          $ref: '#/components/schemas/YesNoOrValue'
        bankruptcy:
          $ref: '#/components/schemas/YesNoOrValue'
        criminal_record:
          $ref: '#/components/schemas/YesNoOrValue'
        social_benefits:
          $ref: '#/components/schemas/YesNoOrValue'
        commercial_use:
          $ref: '#/components/schemas/YesNoOrValue'
        subletting:
          $ref: '#/components/schemas/YesNoOrValue'
        musical_instruments:
          $ref: '#/components/schemas/YesNoOrValue'
        pets:
          $ref: '#/components/schemas/YesNoOrValue'
      type: object
    DataCollectionConfiguration:
      description: the configuration of the data collection setup
      example:
        default_endpoint_enabled: true
        inputs:
        - id: id
          collect: skip
        - id: id
          collect: skip
        additional_questions:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        default_endpoint_code: default_endpoint_code
      properties:
        default_endpoint_enabled:
          description: "if true, the default endpoint will be enabled for this setup"
          type: boolean
        default_endpoint_code:
          description: the code that is used for the default endpoint
          type: string
        inputs:
          items:
            $ref: '#/components/schemas/DefaultInputConfig'
          type: array
        additional_questions:
          $ref: '#/components/schemas/CustomForm'
      type: object
    UpdateDataCollectionConfiguration:
      description: request to update the data collection setup
      example:
        default_endpoint_enabled: true
        inputs:
        - id: id
          collect: skip
        - id: id
          collect: skip
        additional_questions:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
      properties:
        default_endpoint_enabled:
          description: "if true, the default endpoint will be enabled for this setup"
          type: boolean
        inputs:
          items:
            $ref: '#/components/schemas/DefaultInputConfig'
          type: array
        additional_questions:
          $ref: '#/components/schemas/CustomForm'
      type: object
    CreateDataCollectionEndpointRequest:
      description: request used to create a new custom data collection endpoint
      example:
        property_refs:
        - property_refs
        - property_refs
        single_use: true
        message: message
        additional_questions:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        tenant:
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
        property_addresses:
        - property_addresses
        - property_addresses
        send_to_tenant: true
      properties:
        single_use:
          description: "if true, the endpoint will be disabled after it has been used\
            \ once"
          type: boolean
        property_refs:
          items:
            description: "optional list of IDs of the properties, for which this endpoint\
              \ is valid"
            type: string
          type: array
        property_addresses:
          items:
            description: temporarily we will just use the address of the property.
              Later this will be replaced by a reference to the property instead
            type: string
          type: array
        additional_questions:
          $ref: '#/components/schemas/CustomForm'
        send_to_tenant:
          description: "if true, the tenant will receive an email with the data collection\
            \ link"
          type: boolean
        tenant:
          $ref: '#/components/schemas/ContactData'
        message:
          description: a custom message that is included in the email to the tenant
          type: string
      type: object
    DataCollectionEndpoint:
      description: custom data collection endpoint
      example:
        code: code
        data_items: 6
        property_refs:
        - property_refs
        - property_refs
        single_use: true
        creation_date: 0
        additional_questions:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        property_addresses:
        - property_addresses
        - property_addresses
      properties:
        code:
          type: string
        creation_date:
          description: the date at which the endpoint was created
          format: int64
          type: integer
        single_use:
          description: "if true, the endpoint will be disabled after it has been used\
            \ once"
          type: boolean
        data_items:
          description: the number of data items that have been collected using this
            endpoint
          format: int32
          type: integer
        property_refs:
          items:
            description: "optional list of IDs of the properties, for which this endpoint\
              \ is valid"
            type: string
          type: array
        property_addresses:
          items:
            description: "alternatively, a list of addresses can be specified (deprecated)"
            type: string
          type: array
        additional_questions:
          $ref: '#/components/schemas/CustomForm'
      type: object
    QueryDataCollectionEndpointsRequest:
      description: query parameters for loading data collection endpoints
      example:
        offset: 6
        limit: 0
      properties:
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
      type: object
    QueryDataCollectionEndpointsResponse:
      description: "query result, containing data collection endpoints"
      example:
        endpoints:
        - code: code
          data_items: 6
          property_refs:
          - property_refs
          - property_refs
          single_use: true
          creation_date: 0
          additional_questions:
            layout:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            inputs:
            - view_label:
                key: view_label
              ephemeral: true
              default_value: default_value
              attributes:
                key: attributes
              id: id
              label:
                key: label
              placeholder:
                key: placeholder
              type: type
              items:
              - items
              - items
              required: true
              target: target
            - view_label:
                key: view_label
              ephemeral: true
              default_value: default_value
              attributes:
                key: attributes
              id: id
              label:
                key: label
              placeholder:
                key: placeholder
              type: type
              items:
              - items
              - items
              required: true
              target: target
            groups:
            - use_item_group: true
              bottom_divider: true
              top_divider: true
              min_size: 1
              id: id
              label:
                key: label
              type: type
              items:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              info:
                key: info
              target: target
            - use_item_group: true
              bottom_divider: true
              top_divider: true
              min_size: 1
              id: id
              label:
                key: label
              type: type
              items:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              info:
                key: info
              target: target
            validations:
            - expression: expression
              id: id
              message:
                key: message
              target: target
            - expression: expression
              id: id
              message:
                key: message
              target: target
          property_addresses:
          - property_addresses
          - property_addresses
        - code: code
          data_items: 6
          property_refs:
          - property_refs
          - property_refs
          single_use: true
          creation_date: 0
          additional_questions:
            layout:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            inputs:
            - view_label:
                key: view_label
              ephemeral: true
              default_value: default_value
              attributes:
                key: attributes
              id: id
              label:
                key: label
              placeholder:
                key: placeholder
              type: type
              items:
              - items
              - items
              required: true
              target: target
            - view_label:
                key: view_label
              ephemeral: true
              default_value: default_value
              attributes:
                key: attributes
              id: id
              label:
                key: label
              placeholder:
                key: placeholder
              type: type
              items:
              - items
              - items
              required: true
              target: target
            groups:
            - use_item_group: true
              bottom_divider: true
              top_divider: true
              min_size: 1
              id: id
              label:
                key: label
              type: type
              items:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              info:
                key: info
              target: target
            - use_item_group: true
              bottom_divider: true
              top_divider: true
              min_size: 1
              id: id
              label:
                key: label
              type: type
              items:
              - ref_id: ref_id
                ref_type: ref_type
              - ref_id: ref_id
                ref_type: ref_type
              info:
                key: info
              target: target
            validations:
            - expression: expression
              id: id
              message:
                key: message
              target: target
            - expression: expression
              id: id
              message:
                key: message
              target: target
          property_addresses:
          - property_addresses
          - property_addresses
        offset: 6
        limit: 0
      properties:
        endpoints:
          items:
            $ref: '#/components/schemas/DataCollectionEndpoint'
          type: array
        limit:
          format: int64
          type: integer
        offset:
          format: int64
          type: integer
      type: object
    UpdateDataCollectionEndpointRequest:
      description: request used to update an existing data collection endpoint
      example:
        property_refs:
        - property_refs
        - property_refs
        single_use: true
        additional_questions:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        property_addresses:
        - property_addresses
        - property_addresses
      properties:
        single_use:
          description: "if true, the endpoint will be disabled after it has been used\
            \ once"
          type: boolean
        property_refs:
          items:
            description: "optional list of IDs of the properties, for which this endpoint\
              \ is valid"
            type: string
          type: array
        property_addresses:
          items:
            description: temporarily we will just use the address of the property.
              Later this will be replaced by a reference to the property instead
            type: string
          type: array
        additional_questions:
          $ref: '#/components/schemas/CustomForm'
      type: object
    InviteDataCollectionEndpointRequest:
      description: request used to send an exsting data collection endpoint to a tenant
      example:
        message: message
        tenant:
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
      properties:
        tenant:
          $ref: '#/components/schemas/ContactData'
        message:
          description: a custom message that is included in the email to the tenant
          type: string
      type: object
    CreateDocumentGenerationRequest:
      description: |
        Start a new document generation based on the given template. This will also trigger the initialisation of the inputs, defined in the template and store the result in the new generation object.
      example:
        template: template
        init_data: init_data
      properties:
        template:
          description: The template based on which a document shall be generated
          type: string
        init_data:
          description: |
            Optional initialisation data for the inputs of the template. If not set, the default values of the inputs will be used. To be provided as JSON serialised object, where the values are  NOT JSON serialised themselves.
          type: string
      type: object
    DocumentGeneration:
      description: "The status and content of a document generation \n"
      example:
        template: template
        input_data: input_data
        archived: true
        updated_at: 6
        data: data
        esignature_triggered: true
        pdf_generation_date: 1
        name: name
        created_at: 0
        pdf_url: pdf_url
        id: id
      properties:
        id:
          description: The unique ID of the document generation
          type: string
        created_at:
          description: The date the document generation was created
          format: int64
          type: integer
        updated_at:
          description: The date the document generation was last updated
          format: int64
          type: integer
        archived:
          description: True if the document generation has been archived
          type: boolean
        template:
          description: |
            The ID of the template used to generate the document
          type: string
        name:
          description: "The name of the document, as computed using the name expression\
            \ of the template"
          type: string
        input_data:
          description: "The data from the template custom form, serialised as JSON"
          type: string
        data:
          description: Optional EditorJS data used to generate the document (JSON
            of the data object)
          type: string
        pdf_url:
          description: The reference to the generated document
          type: string
        pdf_generation_date:
          description: The date and time the document was generated
          format: int64
          type: integer
        esignature_triggered:
          description: True if the document was sent to the signing service
          type: boolean
      type: object
    QueryDocumentGenerationsRequest:
      description: |
        Request a list of document generations
      example:
        offset: 6
        limit: 0
      properties:
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
      type: object
    QueryDocumentGenerationsResponse:
      description: Result of a document generation query
      example:
        total: 1
        offset: 6
        documents:
        - template: template
          input_data: input_data
          archived: true
          updated_at: 6
          data: data
          esignature_triggered: true
          pdf_generation_date: 1
          name: name
          created_at: 0
          pdf_url: pdf_url
          id: id
        - template: template
          input_data: input_data
          archived: true
          updated_at: 6
          data: data
          esignature_triggered: true
          pdf_generation_date: 1
          name: name
          created_at: 0
          pdf_url: pdf_url
          id: id
        limit: 0
      properties:
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        documents:
          items:
            $ref: '#/components/schemas/DocumentGeneration'
          type: array
      type: object
    DocumentPDFResponse:
      description: link to generated document
      example:
        document_url: document_url
      properties:
        document_url:
          description: The URL of the generated document
          type: string
      type: object
    EditorJSDocument:
      description: A document in EditorJS format
      example:
        data: data
      properties:
        data:
          description: JSON formatted data
          type: string
      type: object
    DocumentESignatureRequest:
      description: |
        The request to start a document signing process
      example:
        signers:
        - last_name: last_name
          phone_number: phone_number
          locale: locale
          first_name: first_name
          email: email
          status: status
        - last_name: last_name
          phone_number: phone_number
          locale: locale
          first_name: first_name
          email: email
          status: status
        message: message
        expiration_date: 0
        qes: true
      properties:
        signers:
          description: The list of signers
          items:
            $ref: '#/components/schemas/DocumentSigner'
          type: array
        message:
          description: The message to be included in the invitation to the signers
          type: string
        expiration_date:
          description: The date the document signing request expires
          format: int64
          type: integer
        qes:
          description: Whether the document shall be signed using QES
          type: boolean
      type: object
    DocumentSigner:
      description: |
        The signer of a document
      example:
        last_name: last_name
        phone_number: phone_number
        locale: locale
        first_name: first_name
        email: email
        status: status
      properties:
        first_name:
          description: The first name of the signer
          type: string
        last_name:
          description: The last name of the signer
          type: string
        email:
          description: The email of the signer
          type: string
        phone_number:
          description: The phone number of the signer
          type: string
        locale:
          description: The locale of the signer
          type: string
        status:
          description: Indicates if the signer has signed the documenт
          type: string
      type: object
    DocumentESignatureStatus:
      description: |
        The status of a document eSignature request
      example:
        creation_time: 0
        signers:
        - last_name: last_name
          phone_number: phone_number
          locale: locale
          first_name: first_name
          email: email
          status: status
        - last_name: last_name
          phone_number: phone_number
          locale: locale
          first_name: first_name
          email: email
          status: status
        signed_doc_ref: signed_doc_ref
        expiration_time: 6
        signed_doc_audit_ref: signed_doc_audit_ref
        id: id
        status: status
      properties:
        id:
          description: The unique ID of the document signing request
          type: string
        creation_time:
          description: The date the document signing request was created
          format: int64
          type: integer
        expiration_time:
          description: The date the document signing request expires
          format: int64
          type: integer
        status:
          description: The status of the document signing process
          type: string
        signers:
          description: The list of signers
          items:
            $ref: '#/components/schemas/DocumentSigner'
          type: array
        signed_doc_ref:
          description: "The reference to the signed document, once all signatures\
            \ are completed (link to attachment)"
          type: string
        signed_doc_audit_ref:
          description: "The reference to the signed document audit, once all signatures\
            \ are completed (link to attachment)"
          type: string
      type: object
    CreateOrUpdateDocumentTemplateRequest:
      description: |
        Create or update a document template
      example:
        name_expression: name_expression
        inputs:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        name: name
        options:
          allow_text_edit: true
          include_page_numbers: true
          include_footer_branding: true
        placeholders:
        - repeat_tokens_expression: repeat_tokens_expression
          value_expression: value_expression
          value: value
          repeated: true
          repeat_values_expression: repeat_values_expression
          token: token
        - repeat_tokens_expression: repeat_tokens_expression
          value_expression: value_expression
          value: value
          repeated: true
          repeat_values_expression: repeat_values_expression
          token: token
        description: description
        content: content
        signatures:
          signers:
          - contact_data:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
            contact_data_expression: contact_data_expression
            repeated: true
          - contact_data:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
            contact_data_expression: contact_data_expression
            repeated: true
          custom_message: custom_message
          expiration_days: 0
          esignatures_enabled: true
      properties:
        name:
          description: The name of the template
          type: string
        description:
          description: A description of the template
          type: string
        options:
          $ref: '#/components/schemas/DocumentTemplateOptions'
        name_expression:
          description: |
            An optional JS expression to be used to compute the name of the template. If not set, the name of the template will be used for new documents.
          type: string
        content:
          description: "The source of the template, used to generate the document"
          type: string
        inputs:
          $ref: '#/components/schemas/CustomForm'
        placeholders:
          description: The list of placeholders used in the template
          items:
            $ref: '#/components/schemas/DocumentPlaceholder'
          type: array
        signatures:
          $ref: '#/components/schemas/DocumentTemplateSignatureConfguration'
      type: object
    DocumentTemplateOptions:
      description: |
        Additional options for a document template
      example:
        allow_text_edit: true
        include_page_numbers: true
        include_footer_branding: true
      properties:
        allow_text_edit:
          description: True if the generated document may be edited by the user
          type: boolean
        include_footer_branding:
          description: True if the footer branding should be included in the document
            PDF
          type: boolean
        include_page_numbers:
          description: True if page numbers should be included in the document PDF
          type: boolean
      type: object
    DocumentPlaceholder:
      description: |
        A placeholder definition for a template
      example:
        repeat_tokens_expression: repeat_tokens_expression
        value_expression: value_expression
        value: value
        repeated: true
        repeat_values_expression: repeat_values_expression
        token: token
      properties:
        token:
          description: The placeholder token itself
          type: string
        value:
          description: |
            An optional initial value, either set directly, or computed using the value_expression.
          type: string
        value_expression:
          description: |
            An optional JS expression to be used to compute the initial value of the placeholder. This will  be used, if no value is set and will be ignored, if a placeholder is repeated.
          type: string
        repeated:
          description: |
            True if the placeholder can be set for multiple values, as defined in the repeat_values_expression
          type: boolean
        repeat_tokens_expression:
          description: |
            An optional JS expression to be used to compute the tokens of a repeated placeholder.  Must be set, if the placeholder is repeated.
          type: string
        repeat_values_expression:
          description: |
            An optional JS expression to be used to compute the values for the repeated placeholder. If set, must return an array of values.
          type: string
      type: object
    DocumentTemplateSignatureConfguration:
      description: |
        The configuration for electronic signatures
      example:
        signers:
        - contact_data:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
          contact_data_expression: contact_data_expression
          repeated: true
        - contact_data:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
          contact_data_expression: contact_data_expression
          repeated: true
        custom_message: custom_message
        expiration_days: 0
        esignatures_enabled: true
      properties:
        signers:
          description: The list of signers of the document
          items:
            $ref: '#/components/schemas/DocumentTemplateSignerDefinition'
          type: array
        esignatures_enabled:
          description: True if electronic signatures are enabled for the template
          type: boolean
        expiration_days:
          description: |
            The number of days after which the signature request expires. If not  specified, the default value is 7 days.
          format: int32
          type: integer
        custom_message:
          description: |
            A custom message to be included in the signature request. If not  specified, the default message is used.
          type: string
      type: object
    DocumentTemplateSignerDefinition:
      description: |
        Indicates where to get data to generate info of a signer
      example:
        contact_data:
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
        contact_data_expression: contact_data_expression
        repeated: true
      properties:
        contact_data:
          $ref: '#/components/schemas/ContactData'
        contact_data_expression:
          description: JS expression to compute the contact data of the signer
          type: string
        repeated:
          description: |
            If set to true, the signer definition will be repeated for each value of the name and  contract data expressions.
          type: boolean
      type: object
    DocumentTemplate:
      description: |
        A template for generating documents
      example:
        name_expression: name_expression
        inputs:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        name: name
        options:
          allow_text_edit: true
          include_page_numbers: true
          include_footer_branding: true
        placeholders:
        - repeat_tokens_expression: repeat_tokens_expression
          value_expression: value_expression
          value: value
          repeated: true
          repeat_values_expression: repeat_values_expression
          token: token
        - repeat_tokens_expression: repeat_tokens_expression
          value_expression: value_expression
          value: value
          repeated: true
          repeat_values_expression: repeat_values_expression
          token: token
        description: description
        id: id
        content: content
        signatures:
          signers:
          - contact_data:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
            contact_data_expression: contact_data_expression
            repeated: true
          - contact_data:
              address:
                line1: 1 ZestLabs Blvd
                line2: CSS District
                city: Mannheim
                postcode: 680001
                province: Baden-Wuerttemberg
                country: Germany
              last_name: last_name
              company: company
              phone_number: phone_number
              id: id
              title: title
              first_name: first_name
              email: email
            contact_data_expression: contact_data_expression
            repeated: true
          custom_message: custom_message
          expiration_days: 0
          esignatures_enabled: true
      properties:
        id:
          description: The unique ID of the template
          type: string
        name:
          description: The name of the template
          type: string
        description:
          description: A description of the template
          type: string
        options:
          $ref: '#/components/schemas/DocumentTemplateOptions'
        name_expression:
          description: |
            An optional JS expression to be used to compute the name of the template. If not set, the name of the template will be used for new documents.
          type: string
        content:
          description: "The source of the template, used to generate the document"
          type: string
        inputs:
          $ref: '#/components/schemas/CustomForm'
        placeholders:
          description: The list of placeholders used in the template
          items:
            $ref: '#/components/schemas/DocumentPlaceholder'
          type: array
        signatures:
          $ref: '#/components/schemas/DocumentTemplateSignatureConfguration'
      type: object
    FAQEntry:
      example:
        question:
          key: question
        answer:
          key: answer
        id: id
      properties:
        id:
          type: string
        question:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        answer:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
      type: object
    CreateOrUpdateFAQEntryRequest:
      example:
        question:
          key: question
        answer:
          key: answer
      properties:
        question:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        answer:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
      type: object
    FeedbackRequest:
      example:
        rating: 0.8008281904610115
        type: null
        content: content
      properties:
        type:
          $ref: '#/components/schemas/FeedbackType'
        rating:
          description: Optional rating the user can provide (1-5 stars)
          type: number
        content:
          description: An optional message the user can provide
          type: string
      type: object
    FeedbackType:
      enum:
      - COMMENT_AND_RATE
      - FEATURE_REQUEST
      - ISSUE_REPORT
      type: string
    CreateOrUpdateCustomIDGeneratorRequest:
      example:
        last_generated_id: last_generated_id
        name: name
        generation_script: generation_script
      properties:
        name:
          description: |
            The user friendly name of the ID generator.
          type: string
        generation_script:
          description: |
            A JS script code that will be used to generate the ID.
          type: string
        last_generated_id:
          description: |
            The last generated ID. This is used to keep track of the last generated ID.
          type: string
      type: object
    CustomIDGenerator:
      example:
        updated_at: 6
        last_generated_id: last_generated_id
        name: name
        created_at: 0
        id: id
        generation_script: generation_script
      properties:
        id:
          type: string
        created_at:
          description: The timestamp of when the script was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the script was last updated
          format: int64
          type: integer
        name:
          description: |
            The user friendly name of the ID generator.
          type: string
        generation_script:
          description: |
            A JS script code that will be used to generate the ID.
          type: string
        last_generated_id:
          description: |
            The last generated ID. This is used to keep track of the last generated ID.
          type: string
      type: object
    CreateInvitationRequest:
      description: |
        Request issued by a property manager to invite an existing tenant to the platform
      example:
        tenant_id: tenant_id
        property_ref: property_ref
      properties:
        tenant_id:
          description: The ID of the tenant who should be invited
          type: string
        property_ref:
          description: The ID of the property that the tenant is renting
          type: string
      type: object
    Invitation:
      example:
        processed: 6
        user_email: user_email
        created: 0
        property:
          parent_name: parent_name
          bank_account_ref: bank_account_ref
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          parent_address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          notes:
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          created_at: 1
          external_id: external_id
          type: null
          parent_ref: parent_ref
          updated_at: 5
          owner_ref: owner_ref
          name: name
          details:
            floor: 3A
            area: 120
            rooms: 6
            bedrooms: 2
            bathrooms: 1
            balcony: 1
            construction_year: 2018
            parking: PARKING_SPOT
            floor_type:
            - LAMINATE
            - TILES
            heating_type:
            - CENTRAL_HEATING
            - FLOOR_HEATING
            - AC
            window_type:
            - TRIPLE_PANE
            - DOUBLE_SASH
            furnishing: FULL_FURNISHING
            historic_property: false
            rent: 750
            running_costs: 150
          id: id
          external_source: external_source
        id: id
        status: null
      properties:
        id:
          description: The unique ID of the invitation
          type: string
        created:
          description: The timestamp of when the invitation was created
          format: int64
          type: integer
        processed:
          description: The timestamp of when the invitation was accepted or rejected
          format: int64
          type: integer
        user_email:
          description: The email of the tenant who was invited
          type: string
        status:
          $ref: '#/components/schemas/InvitationStatus'
        property:
          $ref: '#/components/schemas/Property'
      type: object
    InvitationStatus:
      enum:
      - UNKNOWN
      - NONE
      - OPEN
      - ACCEPTED
      - REJECTED
      type: string
    RespondToInvitationRequest:
      description: |
        Respond to an invitation from a property manager, by either accepting or rejecting it.
      example:
        action: null
      properties:
        action:
          $ref: '#/components/schemas/InvitationResponseAction'
      type: object
    InvitationResponseAction:
      description: Accept or reject an invitation for tenancy
      enum:
      - ACCEPT
      - REJECT
      type: string
    Meter:
      description: a meter installed in a property to measure some kind of utility
        amount
      example:
        unit: unit
        calibration_validity: 5
        updated_at: 6
        property_ref: property_ref
        calibration_date: 1
        name: name
        created_at: 0
        location: location
        serial_number: serial_number
        id: id
        meter_type: null
      properties:
        id:
          type: string
        created_at:
          description: The timestamp of when the meter was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the meter was last updated
          format: int64
          type: integer
        property_ref:
          type: string
        meter_type:
          $ref: '#/components/schemas/MeterTypeEnum'
        unit:
          type: string
        name:
          type: string
        location:
          type: string
        serial_number:
          type: string
        calibration_date:
          format: int64
          type: integer
        calibration_validity:
          format: int64
          type: integer
      type: object
    MeterTypeEnum:
      enum:
      - OTHER
      - WARM_WATER
      - COLD_WATER
      - ELECTRICITY
      - GAS
      - HEATER
      type: string
    CreateOrUpdateMeterRequest:
      description: All the information required for creating a new meter
      example:
        unit: unit
        calibration_validity: 6
        property_ref: property_ref
        calibration_date: 0
        name: name
        location: location
        serial_number: serial_number
        meter_type: null
      properties:
        property_ref:
          type: string
        meter_type:
          $ref: '#/components/schemas/MeterTypeEnum'
        unit:
          type: string
        name:
          type: string
        location:
          type: string
        serial_number:
          type: string
        calibration_date:
          format: int64
          type: integer
        calibration_validity:
          format: int64
          type: integer
      type: object
    MeterReading:
      description: a single reading of a meter
      example:
        date: 1
        updated_at: 6
        meter_ref: meter_ref
        created_at: 0
        id: id
        attachment_ref: attachment_ref
        reporter_ref: reporter_ref
        value:
          f: 5
          i: 5
      properties:
        id:
          type: string
        created_at:
          description: The timestamp of when the meter reading was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the meter reading was last updated
          format: int64
          type: integer
        meter_ref:
          type: string
        date:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/FloatNumber'
        reporter_ref:
          type: string
        attachment_ref:
          type: string
      type: object
    CreateOrUpdateMeterReadingRequest:
      description: All the information required for tracking a meter reading
      example:
        date: 0
        attachment_ref: attachment_ref
        value:
          f: 5
          i: 5
      properties:
        date:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/FloatNumber'
        attachment_ref:
          type: string
      type: object
    CreateNoteRequest:
      description: |
        A request to create a new note (for a property or a tenant)
      example:
        ref: p-J2sWCmCMSVpgZ6iRvTQb7
        text: "Expecting a major renovation to be due by the end of 2022. \n"
      properties:
        ref:
          description: ID of the entity for which this note is meant (property or
            tenant)
          type: string
        text:
          description: the contents of the note
          type: string
      required:
      - ref
      - text
      type: object
    Note:
      description: "A note is a free text annotation to a property or a tenant. \n"
      example:
        id: n-SVWCmJ2sZ6iRvCMgphtQb5
        created: 1615725028902
        ref: p-J2sWCmCMSVpgZ6iRvTQb7
        text: "Expecting a major renovation to be due by the end of 2022. \n"
      properties:
        id:
          description: generated unique ID
          type: string
        created:
          description: timestamp indicating when the note was created
          format: int64
          type: integer
        ref:
          description: ID of the entity for which this note is meant (property or
            tenant)
          type: string
        author:
          description: the user who created the note
          type: string
        text:
          description: the contents of the note
          type: string
      required:
      - created
      - id
      - text
      type: object
    UpdateNoteRequest:
      description: |
        A request to update an existing note
      example:
        text: "Expecting a major renovation to be due by early 2023. \n"
      properties:
        text:
          description: the contents of the note
          type: string
      required:
      - text
      type: object
    CreateOrUpdatePropertyOwnerRequest:
      description: Request used to create a new property owner
      example:
        bank_account_ref: bank_account_ref
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        last_name: last_name
        company: company
        phone_number: phone_number
        title: title
        first_name: first_name
        email: email
      properties:
        title:
          description: the title of the owner
          type: string
        first_name:
          description: |
            First name(s) of the property owners. In case of a company, this is the first name of the contact person within the company.
          type: string
        last_name:
          description: |
            Last name of the property owners. In case of a company, this is the last name of the contact person within the company.
          type: string
        company:
          description: |
            Optional name of the company.
          type: string
        email:
          description: the email of the owner
          type: string
        phone_number:
          description: the phone number of the owner
          type: string
        address:
          $ref: '#/components/schemas/Address'
        bank_account_ref:
          description: the reference to the bank account of the owner
          type: string
      type: object
    PropertyOwner:
      description: Information about the owner of a property
      example:
        bank_account_ref: bank_account_ref
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        created_at: 0
        last_name: last_name
        external_id: external_id
        title: title
        updated_at: 6
        company: company
        phone_number: phone_number
        id: id
        first_name: first_name
        email: email
        external_source: external_source
      properties:
        id:
          description: the ID of the owner
          type: string
        external_id:
          description: "optional external ID, in case acount was created via backend\
            \ integration"
          type: string
        external_source:
          description: "optional external source, in case acount was created via backend\
            \ integration"
          type: string
        created_at:
          description: The timestamp of when the property owners was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the property owners was last updated
          format: int64
          type: integer
        title:
          description: "The salutation to be used for the property owners (Miss, Mister,\
            \ Family)"
          type: string
        first_name:
          description: |
            First name(s) of the property owners. In case of a company, this is the first name of the contact person within the company.
          type: string
        last_name:
          description: |
            Last name of the property owners. In case of a company, this is the last name of the contact person within the company.
          type: string
        company:
          description: "Optional name of the company. \n"
          type: string
        email:
          description: the email of the owner
          type: string
        phone_number:
          description: the phone number of the owner
          type: string
        address:
          $ref: '#/components/schemas/Address'
        bank_account_ref:
          description: the reference to the bank account of the owner
          type: string
      type: object
    QueryPropertyOwnersRequest:
      description: Request used to get a list of property owners for the curent user
      example:
        offset: 6
        limit: 0
      properties:
        limit:
          description: number of items to include in the result
          format: int64
          type: integer
        offset:
          description: number of items to skip from the result
          format: int64
          type: integer
      type: object
    QueryPropertyOwnersResponse:
      description: A list of all property owners that are requested by the user
      example:
        offset: 6
        total_count: 1
        limit: 0
        property_owners:
        - bank_account_ref: bank_account_ref
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          created_at: 0
          last_name: last_name
          external_id: external_id
          title: title
          updated_at: 6
          company: company
          phone_number: phone_number
          id: id
          first_name: first_name
          email: email
          external_source: external_source
        - bank_account_ref: bank_account_ref
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          created_at: 0
          last_name: last_name
          external_id: external_id
          title: title
          updated_at: 6
          company: company
          phone_number: phone_number
          id: id
          first_name: first_name
          email: email
          external_source: external_source
      properties:
        limit:
          description: number of items to include in the result
          format: int64
          type: integer
        offset:
          description: number of items to skip from the result
          format: int64
          type: integer
        property_owners:
          description: list of property owners that match the query request
          items:
            $ref: '#/components/schemas/PropertyOwner'
          type: array
        total_count:
          description: total number of owners available
          format: int64
          type: integer
      type: object
    CompanyProfile:
      description: "Details about a company (property management, or service provider)"
      example:
        website: website
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        name: name
        phone_number: phone_number
        email: email
      properties:
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        email:
          description: |
            The default email address at which the company should be contacted. This information can potentially be visible to other users of the platform.
          type: string
        phone_number:
          description: |
            The default phone number at which the company should be contacted. This information can potentially be visible to other users of the platform.
          type: string
        website:
          description: URL to the company website. This information can potentially
            be visible to other users of the platform.
          type: string
      type: object
    UpdateCompanyProfileRequest:
      description: Request used to update the company profile details
      example:
        website: website
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        name: name
        phone_number: phone_number
        email: email
      properties:
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        email:
          description: |
            The default email address at which the company should be contacted. This information can potentially be visible to other users of the platform.
          type: string
        phone_number:
          description: |
            The default phone number at which the company should be contacted. This information can potentially be visible to other users of the platform.
          type: string
        website:
          description: URL to the company website. This information can potentially
            be visible to other users of the platform.
          type: string
      type: object
    UserPreferences:
      description: Notification preferences for individual users
      example:
        notify_on_case_update:
        - null
        - null
        notify_on_new_data_capture:
        - null
        - null
        notify_on_new_case:
        - null
        - null
      properties:
        notify_on_new_case:
          description: |
            Notify when a new case has been raised for the account. For property  managers or service providers, this will be triggered when a new case is raised for their company/any of the properties the company manages. For tenants it is triggered, when a case is raised for the property  they live in.
          items:
            $ref: '#/components/schemas/NotificationType'
          type: array
        notify_on_case_update:
          description: |
            Notify when a new case has been updated, which the user or their  company has been active on.
          items:
            $ref: '#/components/schemas/NotificationType'
          type: array
        notify_on_new_data_capture:
          description: |
            Notify a manager when new tenant data has been submitted.
          items:
            $ref: '#/components/schemas/NotificationType'
          type: array
      type: object
    NotificationType:
      enum:
      - EMAIL
      type: string
    UpdateUserPreferencesRequest:
      description: Change the preferences of the current user
      example:
        notify_on_case_update:
        - null
        - null
        notify_on_new_data_capture:
        - null
        - null
        notify_on_new_case:
        - null
        - null
      properties:
        notify_on_new_case:
          description: |
            Notify when a new case has been raised for the account. For property  managers or service providers, this will be triggered when a new case is raised for their company/any of the properties the company manages. For tenants it is triggered, when a case is raised for the property  they live in.
          items:
            $ref: '#/components/schemas/NotificationType'
          type: array
        notify_on_case_update:
          description: |
            Notify when a new case has been updated, which the user or their  company has been active on.
          items:
            $ref: '#/components/schemas/NotificationType'
          type: array
        notify_on_new_data_capture:
          description: |
            Notify a manager when new tenant data has been submitted.
          items:
            $ref: '#/components/schemas/NotificationType'
          type: array
      type: object
    QueryPropertiesRequest:
      description: Request used to get a list of properties for the curent user
      example:
        parent_ref: parent_ref
        offset: 6
        owner_ref: owner_ref
        limit: 0
        name: name
      properties:
        limit:
          description: number of items to include in the result
          format: int64
          type: integer
        offset:
          description: number of items to skip from the result
          format: int64
          type: integer
        name:
          description: like search for the name of the property
          type: string
        parent_ref:
          description: |
            optional property ID, if set only properties that are children of the given  property are returned
          type: string
        owner_ref:
          description: |
            optional property owner ID, if set only properties that are owned by the  given owner are returned
          type: string
      type: object
    QueryPropertiesResponse:
      description: |
        A list of all properties that are requested by the user
      example:
        offset: 6
        total_count: 0
        properties:
        - parent_name: parent_name
          bank_account_ref: bank_account_ref
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          parent_address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          notes:
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          created_at: 1
          external_id: external_id
          type: null
          parent_ref: parent_ref
          updated_at: 5
          owner_ref: owner_ref
          name: name
          details:
            floor: 3A
            area: 120
            rooms: 6
            bedrooms: 2
            bathrooms: 1
            balcony: 1
            construction_year: 2018
            parking: PARKING_SPOT
            floor_type:
            - LAMINATE
            - TILES
            heating_type:
            - CENTRAL_HEATING
            - FLOOR_HEATING
            - AC
            window_type:
            - TRIPLE_PANE
            - DOUBLE_SASH
            furnishing: FULL_FURNISHING
            historic_property: false
            rent: 750
            running_costs: 150
          id: id
          external_source: external_source
        - parent_name: parent_name
          bank_account_ref: bank_account_ref
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          parent_address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          notes:
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          created_at: 1
          external_id: external_id
          type: null
          parent_ref: parent_ref
          updated_at: 5
          owner_ref: owner_ref
          name: name
          details:
            floor: 3A
            area: 120
            rooms: 6
            bedrooms: 2
            bathrooms: 1
            balcony: 1
            construction_year: 2018
            parking: PARKING_SPOT
            floor_type:
            - LAMINATE
            - TILES
            heating_type:
            - CENTRAL_HEATING
            - FLOOR_HEATING
            - AC
            window_type:
            - TRIPLE_PANE
            - DOUBLE_SASH
            furnishing: FULL_FURNISHING
            historic_property: false
            rent: 750
            running_costs: 150
          id: id
          external_source: external_source
      properties:
        properties:
          description: list of properties that match the query request
          items:
            $ref: '#/components/schemas/Property'
          type: array
        total_count:
          description: total number of properties available
          format: int64
          type: integer
        offset:
          description: number of items that were skipped in the result
          format: int32
          type: integer
      type: object
    Property:
      description: |
        Property holds the information about a single accommodation unit (Wohneinheit).
      example:
        parent_name: parent_name
        bank_account_ref: bank_account_ref
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        parent_address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        notes:
        - id: n-SVWCmJ2sZ6iRvCMgphtQb5
          created: 1615725028902
          ref: p-J2sWCmCMSVpgZ6iRvTQb7
          text: "Expecting a major renovation to be due by the end of 2022. \n"
        - id: n-SVWCmJ2sZ6iRvCMgphtQb5
          created: 1615725028902
          ref: p-J2sWCmCMSVpgZ6iRvTQb7
          text: "Expecting a major renovation to be due by the end of 2022. \n"
        created_at: 1
        external_id: external_id
        type: null
        parent_ref: parent_ref
        updated_at: 5
        owner_ref: owner_ref
        name: name
        details:
          floor: 3A
          area: 120
          rooms: 6
          bedrooms: 2
          bathrooms: 1
          balcony: 1
          construction_year: 2018
          parking: PARKING_SPOT
          floor_type:
          - LAMINATE
          - TILES
          heating_type:
          - CENTRAL_HEATING
          - FLOOR_HEATING
          - AC
          window_type:
          - TRIPLE_PANE
          - DOUBLE_SASH
          furnishing: FULL_FURNISHING
          historic_property: false
          rent: 750
          running_costs: 150
        id: id
        external_source: external_source
      properties:
        id:
          description: generated unique ID
          type: string
        external_id:
          description: "optional external ID, in case property was created via backend\
            \ integration"
          type: string
        external_source:
          description: "optional external source, in case property was created via\
            \ backend integration"
          type: string
        created_at:
          description: The timestamp of when the tenant was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the tenant was last updated
          format: int64
          type: integer
        name:
          description: "e.g. 'Whg 12', or 'Etage 2/Links'"
          type: string
        type:
          $ref: '#/components/schemas/PropertyType'
        address:
          $ref: '#/components/schemas/Address'
        owner_ref:
          description: Optional reference to the property owner
          type: string
        parent_ref:
          description: Optional reference to the parent property
          type: string
        parent_name:
          description: Optional name of the parent property
          type: string
        parent_address:
          $ref: '#/components/schemas/Address'
        bank_account_ref:
          description: Optional reference to the bank account associated with the
            property
          type: string
        notes:
          items:
            $ref: '#/components/schemas/Note'
          type: array
        details:
          $ref: '#/components/schemas/PropertyDetails'
      required:
      - id
      - manager
      - name
      - type
      type: object
    PropertyType:
      enum:
      - APARTMENT
      - ATTIC
      - BASEMENT
      - BUILDING
      - COMMERCIAL_SPACE
      - GARAGE
      - GARDEN
      - HOUSE
      - LAND
      - OFFICE
      - PARKING_LOT
      - ROOM
      - SEMIDETACHED_HOUSE
      - OTHER
      type: string
    PropertyDetails:
      description: |
        Holds extra details about a property
      example:
        floor: 3A
        area: 120
        rooms: 6
        bedrooms: 2
        bathrooms: 1
        balcony: 1
        construction_year: 2018
        parking: PARKING_SPOT
        floor_type:
        - LAMINATE
        - TILES
        heating_type:
        - CENTRAL_HEATING
        - FLOOR_HEATING
        - AC
        window_type:
        - TRIPLE_PANE
        - DOUBLE_SASH
        furnishing: FULL_FURNISHING
        historic_property: false
        rent: 750
        running_costs: 150
      properties:
        floor:
          description: |
            Floor/storey of a building.
          type: string
        unit_number:
          description: |
            Unit number within a building.
          type: string
        area:
          type: number
        rooms:
          type: number
        bedrooms:
          type: number
        bathrooms:
          type: number
        balcony:
          type: number
        construction_year:
          type: number
        parking:
          $ref: '#/components/schemas/PropertyParkingTypeEnum'
        floor_type:
          description: |
            List of Floor types present in a property
          items:
            $ref: '#/components/schemas/PropertyFloorTypeEnum'
          type: array
        heating_type:
          description: |
            List of Heating types present in a property
          items:
            $ref: '#/components/schemas/PropertyHeatingTypeEnum'
          type: array
        window_type:
          description: |
            List of window types present in a property
          items:
            $ref: '#/components/schemas/PropertyWindowTypeEnum'
          type: array
        furnishing:
          $ref: '#/components/schemas/PropertyFurnishingEnum'
        historic_property:
          description: "A building with special architectural or historic interest,considered\
            \ to be of national importance and therefor worth being preserved/protected"
          type: boolean
      type: object
    PropertyParkingTypeEnum:
      enum:
      - GARAGE
      - PARKING_SPOT
      - UNDERGROUND
      type: string
    PropertyFloorTypeEnum:
      enum:
      - LAMINATE
      - TILES
      - PARQUET
      type: string
    PropertyHeatingTypeEnum:
      enum:
      - CENTRAL_HEATING
      - FLOOR_HEATING
      - GAS_HEATING
      - ELECTRICAL_HEATING
      - HEAT_PUMP
      - AC
      type: string
    PropertyWindowTypeEnum:
      enum:
      - SINGLE_PANE
      - DOUBLE_PANE
      - TRIPLE_PANE
      - DOUBLE_SASH
      type: string
    PropertyFurnishingEnum:
      enum:
      - FULL_FURNISHING
      - PARTIAL_FURNISHING
      - NO_FURNISHING
      type: string
    CreatePropertyRequest:
      description: |
        A requests that holds all necessary information to create a property.
      example:
        parent_ref: parent_ref
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        owner_ref: owner_ref
        name: name
        details:
          floor: 3A
          area: 120
          rooms: 6
          bedrooms: 2
          bathrooms: 1
          balcony: 1
          construction_year: 2018
          parking: PARKING_SPOT
          floor_type:
          - LAMINATE
          - TILES
          heating_type:
          - CENTRAL_HEATING
          - FLOOR_HEATING
          - AC
          window_type:
          - TRIPLE_PANE
          - DOUBLE_SASH
          furnishing: FULL_FURNISHING
          historic_property: false
          rent: 750
          running_costs: 150
        type: null
      properties:
        name:
          description: "e.g. 'Whg 12', or 'Etage 2/Links'"
          type: string
        type:
          $ref: '#/components/schemas/PropertyType'
        owner_ref:
          description: Optional reference to the property owner
          type: string
        parent_ref:
          description: Optional parent property (e.g. building) to which this property
            belongs
          type: string
        address:
          $ref: '#/components/schemas/Address'
        details:
          $ref: '#/components/schemas/PropertyDetails'
      required:
      - name
      - type
      type: object
    UpdatePropertyRequest:
      description: |
        A requests that holds all necessary information to update an already existing property.
      example:
        parent_ref: parent_ref
        bank_account_ref: bank_account_ref
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        owner_ref: owner_ref
        name: name
        details:
          floor: 3A
          area: 120
          rooms: 6
          bedrooms: 2
          bathrooms: 1
          balcony: 1
          construction_year: 2018
          parking: PARKING_SPOT
          floor_type:
          - LAMINATE
          - TILES
          heating_type:
          - CENTRAL_HEATING
          - FLOOR_HEATING
          - AC
          window_type:
          - TRIPLE_PANE
          - DOUBLE_SASH
          furnishing: FULL_FURNISHING
          historic_property: false
          rent: 750
          running_costs: 150
        type: null
      properties:
        name:
          description: "e.g. 'Whg 12', or 'Etage 2/Links'"
          type: string
        type:
          $ref: '#/components/schemas/PropertyType'
        owner_ref:
          description: Optional reference to the property owner
          type: string
        parent_ref:
          description: Optional reference to the parent property
          type: string
        bank_account_ref:
          description: Optional reference to the bank account associated with the
            property
          type: string
        address:
          $ref: '#/components/schemas/Address'
        details:
          $ref: '#/components/schemas/PropertyDetails'
      required:
      - id
      - name
      - type
      type: object
    PropertyContact:
      description: |
        A contact that is linked to a property. Can either be made  available to tenants, or just used as internal reference.
      example:
        public: true
        property_ref: property_ref
        contact:
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          created_at: 0
          last_name: last_name
          external_id: external_id
          title: title
          connected: true
          updated_at: 6
          company: company
          phone_number: phone_number
          id: id
          category: null
          first_name: first_name
          email: email
          external_source: external_source
        id: id
        label: label
      properties:
        id:
          description: unique ID of this contact
          type: string
        label:
          description: "human-friendly label, describing the relationship and context\
            \ of the contact"
          type: string
        public:
          description: identifies if the contact is visible to the tenants or on a
            public form
          type: boolean
        contact:
          $ref: '#/components/schemas/ServiceProvider'
        property_ref:
          description: the ID of the property for which the contact is maintained
          type: string
      type: object
    ServiceProvider:
      description: ServiceProvider is used by PMs to manage the list of service providers
        the work with in the respective category and subcategory
      example:
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        created_at: 0
        last_name: last_name
        external_id: external_id
        title: title
        connected: true
        updated_at: 6
        company: company
        phone_number: phone_number
        id: id
        category: null
        first_name: first_name
        email: email
        external_source: external_source
      properties:
        id:
          description: the unique ID of this entry
          type: string
        external_id:
          description: "optional external ID, in case tenancy was created via backend\
            \ integration"
          type: string
        external_source:
          description: "optional external source, in case tenancy was created via\
            \ backend integration"
          type: string
        created_at:
          description: The timestamp of when the tenant was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the tenant was last updated
          format: int64
          type: integer
        title:
          description: "The salutation to be used for the contant person (Miss, Mister)"
          type: string
        first_name:
          description: optional first name of contact person
          type: string
        last_name:
          description: optional last name of contact person
          type: string
        company:
          description: the name of the company
          type: string
        email:
          description: the email address at which the company can be contacted by
            the platform
          type: string
        phone_number:
          description: a phone number at which the company can be reached
          type: string
        category:
          $ref: '#/components/schemas/ServiceCategoryEnum'
        connected:
          description: |
            Indicates whether the service provider has an active account with Udoma. If so, it will be possible to assign cases directly to them.
          type: boolean
        address:
          $ref: '#/components/schemas/Address'
      type: object
    CreateOrUpdatePropertyContact:
      description: |
        Request used for creating a new contact for a property.
      example:
        public: true
        contact: contact
        label: label
      properties:
        label:
          description: "human-friendly label, describing the relationship and context\
            \ of the contact"
          type: string
        public:
          description: identifies if the contact is visible to the tenants or on a
            public form
          type: boolean
        contact:
          description: reference to the service provider that is linked as a contact
          type: string
      type: object
    DocumentRepository:
      description: |
        A structured list of documents attached to a property
      example:
        entries:
        - path: path
          public: true
          attachment:
            ref: ref
            thumbnail: thumbnail
            created: 0
            file_type: file_type
            file_name: file_name
            id: id
            file_size: 6
            url: url
          name: name
          id: id
        - path: path
          public: true
          attachment:
            ref: ref
            thumbnail: thumbnail
            created: 0
            file_type: file_type
            file_name: file_name
            id: id
            file_size: 6
            url: url
          name: name
          id: id
        prop_ref: prop_ref
      properties:
        prop_ref:
          description: the ID of the property for which the documents are uploaded
          type: string
        entries:
          items:
            $ref: '#/components/schemas/DocumentRepositoryEntry'
          type: array
      type: object
    DocumentRepositoryEntry:
      description: |
        A single document uploaded in a document repository
      example:
        path: path
        public: true
        attachment:
          ref: ref
          thumbnail: thumbnail
          created: 0
          file_type: file_type
          file_name: file_name
          id: id
          file_size: 6
          url: url
        name: name
        id: id
      properties:
        id:
          description: the unique ID of the document entry
          type: string
        path:
          type: string
        name:
          description: The name of the document entry
          type: string
        public:
          type: boolean
        attachment:
          $ref: '#/components/schemas/Attachment'
      type: object
    CreateOrUpdateDocumentRepositoryEntry:
      description: |
        Attributes needed for creating or updating document repository entries
      example:
        path: path
        public: true
        name: name
        attachment_ref: attachment_ref
      properties:
        attachment_ref:
          description: The ID of the previously uploaded attachment
          type: string
        path:
          description: The relative folder path of the document
          type: string
        name:
          description: The name of the document entry
          type: string
        public:
          description: "Indicator, controlling whether tenants can see the document"
          type: boolean
      type: object
    PropertyHistory:
      example:
        entries:
        - date: 2019-11-01 12:00
          evenType: CONSTRUCTION
          comment: Building construction was finalized
          automatic: false
        - date: 2019-11-01 12:00
          evenType: CONSTRUCTION
          comment: Building construction was finalized
          automatic: false
        property_ref: property_ref
      properties:
        property_ref:
          description: Reference to the property for which this history object applies
          type: string
        entries:
          items:
            $ref: '#/components/schemas/PropertyHistoryEntry'
          type: array
      type: object
    PropertyHistoryEntry:
      example:
        date: 2019-11-01 12:00
        evenType: CONSTRUCTION
        comment: Building construction was finalized
        automatic: false
      properties:
        id:
          description: unique ID of the entry
          type: string
        date:
          description: "Time of the entry, e.g. `1952`"
          type: string
        eventType:
          $ref: '#/components/schemas/PropertyHistoryEventTypeEnum'
        automatic:
          description: Indicates if the event was created by the system
          type: boolean
        comment:
          description: Text describing the event
          type: string
      type: object
    PropertyHistoryEventTypeEnum:
      enum:
      - BUILT
      - RENTED
      - FREED
      - RENOVATED
      - DAMAGE_OCCURED
      - DAMAGE_FIXED
      - CASE_RAISED
      - CASE_CLOSED
      - OTHER
      type: string
    CreateOrUpdatePropertyHistoryEntryRequest:
      example:
        date: date
        comment: comment
        eventType: eventType
      properties:
        date:
          description: "Time of the entry, e.g. `1952-10-01 12:00`"
          type: string
        eventType:
          $ref: '#/components/schemas/PropertyHistoryEventTypeEnum'
        comment:
          description: Text describing the event
          type: string
      required:
      - date
      - eventType
      type: object
    Tenancy:
      description: "A tenancy is a contract between a tenant and a property manager.\
        \ \n"
      example:
        end_date: 5
        contract_type: null
        tenants:
        - notes:
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          updated_at: 4
          created_at: 2
          last_name: last_name
          external_id: external_id
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
          external_source: external_source
        - notes:
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          updated_at: 4
          created_at: 2
          last_name: last_name
          external_id: external_id
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
          external_source: external_source
        rent_information:
          rent_type: null
          monthly_rent:
            rent: 5.637376656633329
            incidentals: 2.3021358869347655
          deposit: 7.061401241503109
          index_month: 9
          index_points: 3.616076749251911
        updated_at: 6
        property_ref: property_ref
        created_at: 0
        active: true
        external_id: external_id
        id: id
        external_source: external_source
        start_date: 1
      properties:
        id:
          description: generated unique ID
          type: string
        external_id:
          description: "optional external ID, in case tenancy was created via backend\
            \ integration"
          type: string
        external_source:
          description: "optional external source, in case tenancy was created via\
            \ backend integration"
          type: string
        created_at:
          description: The timestamp of when the tenant was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the tenant was last updated
          format: int64
          type: integer
        property_ref:
          description: The ID of the property that is being rented out
          type: string
        active:
          description: |
            Indicates whether the tenancy is active. Active tenancies indicate the current contract between the tenants and the property manager.
          type: boolean
        start_date:
          description: The timestamp of when the tenancy has started
          format: int64
          type: integer
        end_date:
          description: The timestamp of when the tenancy has ended or is scheduled
            to end (optional)
          format: int64
          type: integer
        contract_type:
          $ref: '#/components/schemas/TenancyContractTypeEnum'
        rent_information:
          $ref: '#/components/schemas/RentInformation'
        tenants:
          description: The IDs of the tenants
          items:
            $ref: '#/components/schemas/Tenant'
          type: array
      type: object
    TenancyContractTypeEnum:
      description: |
        The type of tenancy contract. This is used to determine which fields are required for the tenancy contract.
      enum:
      - STANDARD
      - FIXED_TERM
      - COMMERCIAL_LEASE
      - GRADUATED_RENT
      - INDEXED_RENT
      - GRATUITOUS_TRANSFER
      type: string
    Tenant:
      description: "A person or company, renting a particular property. \n"
      example:
        notes:
        - id: n-SVWCmJ2sZ6iRvCMgphtQb5
          created: 1615725028902
          ref: p-J2sWCmCMSVpgZ6iRvTQb7
          text: "Expecting a major renovation to be due by the end of 2022. \n"
        - id: n-SVWCmJ2sZ6iRvCMgphtQb5
          created: 1615725028902
          ref: p-J2sWCmCMSVpgZ6iRvTQb7
          text: "Expecting a major renovation to be due by the end of 2022. \n"
        updated_at: 4
        created_at: 2
        last_name: last_name
        external_id: external_id
        company: company
        phone_number: phone_number
        id: id
        title: title
        first_name: first_name
        email: email
        external_source: external_source
      properties:
        id:
          description: generated unique ID
          type: string
        external_id:
          description: "optional external ID, in case tenant was created via backend\
            \ integration"
          type: string
        external_source:
          description: "optional external source, in case tenant was created via backend\
            \ integration"
          type: string
        created_at:
          description: The timestamp of when the tenant was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the tenant was last updated
          format: int64
          type: integer
        title:
          description: "The salutation to be used for the tenant (Miss, Mister, Family)"
          type: string
        first_name:
          description: |
            First name(s) of the tenant. In case of a company, this is the first name of the contact person within the company.
          type: string
        last_name:
          description: |
            Last name of the tenant. In case of a company, this is the last name of the contact person within the company.
          type: string
        company:
          description: |
            Name of the company. Only used in case tenancy is between lessor and a company,  otherwise this field is empty.
          type: string
        email:
          description: |
            The email address of the tenant. Used for sending communication to them, as well as used for invitations.
          type: string
        phone_number:
          description: |
            The phone number of the tenant. Not directly used by the system, but can be used by managers and service providers to contact the tenant.
          type: string
        notes:
          description: "a list of notes regarding that tenant. Can only be seen by\
            \ the manager, not the tenante."
          items:
            $ref: '#/components/schemas/Note'
          type: array
      required:
      - email
      - first_name
      - id
      - last_name
      - phone_number
      - registered
      - title
      type: object
    CreateTenancyRequest:
      description: |
        Request issued by a property manager to create a new tenancy for a property
      example:
        end_date: 6
        contract_type: null
        tenants:
        - address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
        - address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
        end_previous_tenancy: true
        invite_tenants: true
        rent_information:
          rent_type: null
          monthly_rent:
            rent: 5.637376656633329
            incidentals: 2.3021358869347655
          deposit: 7.061401241503109
          index_month: 9
          index_points: 3.616076749251911
        active: true
        start_date: 0
      properties:
        active:
          description: |
            Indicates whether the tenancy is active. Active tenancies indicate the current contract between the tenants and the property manager. Per default, new tenancies are active. This just provides a way to add past tenancies.
          type: boolean
        start_date:
          description: The timestamp of when the tenancy has started
          format: int64
          type: integer
        end_date:
          description: The timestamp of when the tenancy has ended or is scheduled
            to end (optional)
          format: int64
          type: integer
        contract_type:
          $ref: '#/components/schemas/TenancyContractTypeEnum'
        rent_information:
          $ref: '#/components/schemas/RentInformation'
        tenants:
          description: |
            The list of tenants that are part of this tenancy. Can be empty, or include  new or existing tenants.
          items:
            $ref: '#/components/schemas/ContactData'
          type: array
        end_previous_tenancy:
          description: |
            Indicates whether the previous tenancy should be ended. If set to true, the previous tenancy will be marked inactive. If set to false, the call will fail if there is an active tenancy for the property.
          type: boolean
        invite_tenants:
          description: "If true, directly send invitation to new tenants to join Udoma"
          type: boolean
      type: object
    ReportDefinition:
      example:
        result_schema:
          is_list: true
          properties:
          - sequence: 0
            id: id
            label:
              key: label
          - sequence: 0
            id: id
            label:
              key: label
        name: name
        description: description
        id: id
        result_mapper: result_mapper
        parameters:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        script: script
      properties:
        id:
          type: string
        name:
          description: The name of the report
          type: string
        description:
          description: The description of the report
          type: string
        result_schema:
          $ref: '#/components/schemas/ReportResultSchema'
        result_mapper:
          description: The JS script to execute to map the result to the result schema
          type: string
        parameters:
          $ref: '#/components/schemas/CustomForm'
        script:
          description: The JS script to execute to generate the report result
          type: string
      type: object
    ReportResultSchema:
      example:
        is_list: true
        properties:
        - sequence: 0
          id: id
          label:
            key: label
        - sequence: 0
          id: id
          label:
            key: label
      properties:
        is_list:
          description: Whether the result is a list of items
          type: boolean
        properties:
          items:
            $ref: '#/components/schemas/ReportResultSchemaProperty'
          type: array
      type: object
    ReportResultSchemaProperty:
      example:
        sequence: 0
        id: id
        label:
          key: label
      properties:
        id:
          type: string
        label:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        sequence:
          format: int32
          type: integer
      type: object
    CreateOrUpdateReportDefinitionRequest:
      example:
        result_schema:
          is_list: true
          properties:
          - sequence: 0
            id: id
            label:
              key: label
          - sequence: 0
            id: id
            label:
              key: label
        name: name
        description: description
        result_mapper: result_mapper
        parameters:
          layout:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          inputs:
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          - view_label:
              key: view_label
            ephemeral: true
            default_value: default_value
            attributes:
              key: attributes
            id: id
            label:
              key: label
            placeholder:
              key: placeholder
            type: type
            items:
            - items
            - items
            required: true
            target: target
          groups:
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          - use_item_group: true
            bottom_divider: true
            top_divider: true
            min_size: 1
            id: id
            label:
              key: label
            type: type
            items:
            - ref_id: ref_id
              ref_type: ref_type
            - ref_id: ref_id
              ref_type: ref_type
            info:
              key: info
            target: target
          validations:
          - expression: expression
            id: id
            message:
              key: message
            target: target
          - expression: expression
            id: id
            message:
              key: message
            target: target
        script: script
      properties:
        name:
          description: The name of the report
          type: string
        description:
          description: The description of the report
          type: string
        result_schema:
          $ref: '#/components/schemas/ReportResultSchema'
        result_mapper:
          description: The JS script to execute to map the result to the result schema
          type: string
        parameters:
          $ref: '#/components/schemas/CustomForm'
        script:
          description: The JS script to execute to generate the report result
          type: string
      type: object
    ExecuteReportRequest:
      description: The data required to execute a report
      example:
        parameters:
          key: ""
      properties:
        parameters:
          additionalProperties: true
          description: The parameters used to execute the report as a data map
          type: object
      type: object
    ReportExecution:
      example:
        result: result
        updated_at: 6
        created_at: 0
        id: id
        report_ref: report_ref
        error: error
        parameters:
          key: ""
        status: null
      properties:
        id:
          type: string
        created_at:
          description: The timestamp of when the report execution was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the report execution was last updated
          format: int64
          type: integer
        report_ref:
          type: string
        status:
          $ref: '#/components/schemas/ReportExecutionStatusEnum'
        parameters:
          additionalProperties: true
          description: The parameters used to execute the report as a data map
          type: object
        result:
          description: The result of the report execution as a JSON string
          type: string
        error:
          description: Error message should the report execution fail
          type: string
      type: object
    ReportExecutionStatusEnum:
      enum:
      - SCHEDULED
      - RUNNING
      - COMPLETED
      - FAILED
      type: string
    QueryReportExecutionsRequest:
      description: The data required to query report executions
      example:
        limit: 0
        report_ref: report_ref
        status: null
      properties:
        report_ref:
          type: string
        status:
          $ref: '#/components/schemas/ReportExecutionStatusEnum'
        limit:
          format: int32
          type: integer
      type: object
    CreateOrUpdateServiceProvider:
      description: Request used to create a new service provider
      example:
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        last_name: last_name
        company: company
        phone_number: phone_number
        title: title
        category: null
        first_name: first_name
        email: email
      properties:
        title:
          description: "The salutation to be used for the contant person (Miss, Mister)"
          type: string
        first_name:
          description: optional first name of contact person
          type: string
        last_name:
          description: optional last name of contact person
          type: string
        company:
          description: the name of the company
          type: string
        email:
          description: the email address at which the company can be contacted by
            the platform
          type: string
        phone_number:
          description: a phone number at which the company can be reached
          type: string
        category:
          $ref: '#/components/schemas/ServiceCategoryEnum'
        address:
          $ref: '#/components/schemas/Address'
      type: object
    QueryServiceProvidersRequest:
      description: Search criteria for querying service providers
      example:
        connected: null
      properties:
        connected:
          $ref: '#/components/schemas/QueryBooleanParameter'
      type: object
    QueryServiceProvidersResponse:
      description: Response to a query for service providers
      example:
        service_providers:
        - address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          created_at: 0
          last_name: last_name
          external_id: external_id
          title: title
          connected: true
          updated_at: 6
          company: company
          phone_number: phone_number
          id: id
          category: null
          first_name: first_name
          email: email
          external_source: external_source
        - address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          created_at: 0
          last_name: last_name
          external_id: external_id
          title: title
          connected: true
          updated_at: 6
          company: company
          phone_number: phone_number
          id: id
          category: null
          first_name: first_name
          email: email
          external_source: external_source
      properties:
        service_providers:
          description: list of service providers
          items:
            $ref: '#/components/schemas/ServiceProvider'
          type: array
      type: object
    GetSummaryRequest:
      description: Request used to get a summary of the account
      example:
        total_properties: true
        total_service_providers: true
        total_cases: true
        active_document_generation_flows: true
        total_tenancies: true
        total_tenants: true
        active_data_collection_items: true
      properties:
        total_properties:
          description: "If true, the total number of properties will be returned"
          type: boolean
        total_tenants:
          description: "If true, the total number of tenants will be returned"
          type: boolean
        total_tenancies:
          description: "If true, the total number of tenancies will be returned"
          type: boolean
        total_cases:
          description: "If true, the total number of cases will be returned"
          type: boolean
        total_service_providers:
          description: "If true, the total number of service providers will be returned"
          type: boolean
        active_data_collection_items:
          description: "If true, the total number of data collection items will be\
            \ returned that were not archived"
          type: boolean
        active_document_generation_flows:
          description: "If true, the total number of document generation flows will\
            \ be returned that were not archived"
          type: boolean
      type: object
    GetSummaryResponse:
      description: Contains a summary of the account
      example:
        total_properties: 0
        total_service_providers: 5
        total_cases: 5
        active_document_generation_flows: 7
        total_tenancies: 1
        total_tenants: 6
        active_data_collection_items: 2
      properties:
        total_properties:
          description: The total number of properties
          format: int64
          type: integer
        total_tenants:
          description: The total number of tenants
          format: int64
          type: integer
        total_tenancies:
          description: The total number of tenancies
          format: int64
          type: integer
        total_cases:
          description: The total number of cases
          format: int64
          type: integer
        total_service_providers:
          description: The total number of service providers
          format: int64
          type: integer
        active_data_collection_items:
          description: The total number of data collection items that were not archived
          format: int64
          type: integer
        active_document_generation_flows:
          description: The total number of document generation flows that were not
            archived
          format: int64
          type: integer
      type: object
    UpdateTenancyRequest:
      description: |
        Request issued by a property manager to update a tenancy for a property
      example:
        end_date: 6
        contract_type: null
        rent_information:
          rent_type: null
          monthly_rent:
            rent: 5.637376656633329
            incidentals: 2.3021358869347655
          deposit: 7.061401241503109
          index_month: 9
          index_points: 3.616076749251911
        active: true
        start_date: 0
      properties:
        active:
          description: |
            Indicates whether the tenancy is active. Active tenancies indicate the current contract between the tenants and the property manager.
          type: boolean
        start_date:
          description: The timestamp of when the tenancy has started
          format: int64
          type: integer
        end_date:
          description: The timestamp of when the tenancy has ended or is scheduled
            to end (optional)
          format: int64
          type: integer
        contract_type:
          $ref: '#/components/schemas/TenancyContractTypeEnum'
        rent_information:
          $ref: '#/components/schemas/RentInformation'
      type: object
    TenancyUpdate:
      description: |
        A tenancy update is a change to a tenancy contract between one or more tenants and a property manager.
      example:
        updated_at: 6
        tenant_changes:
        - action: null
          entry_into_force: 5
          tenant:
            notes:
            - id: n-SVWCmJ2sZ6iRvCMgphtQb5
              created: 1615725028902
              ref: p-J2sWCmCMSVpgZ6iRvTQb7
              text: "Expecting a major renovation to be due by the end of 2022. \n"
            - id: n-SVWCmJ2sZ6iRvCMgphtQb5
              created: 1615725028902
              ref: p-J2sWCmCMSVpgZ6iRvTQb7
              text: "Expecting a major renovation to be due by the end of 2022. \n"
            updated_at: 4
            created_at: 2
            last_name: last_name
            external_id: external_id
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
            external_source: external_source
        - action: null
          entry_into_force: 5
          tenant:
            notes:
            - id: n-SVWCmJ2sZ6iRvCMgphtQb5
              created: 1615725028902
              ref: p-J2sWCmCMSVpgZ6iRvTQb7
              text: "Expecting a major renovation to be due by the end of 2022. \n"
            - id: n-SVWCmJ2sZ6iRvCMgphtQb5
              created: 1615725028902
              ref: p-J2sWCmCMSVpgZ6iRvTQb7
              text: "Expecting a major renovation to be due by the end of 2022. \n"
            updated_at: 4
            created_at: 2
            last_name: last_name
            external_id: external_id
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
            external_source: external_source
        created_at: 0
        id: id
        entry_into_force: 1
        tenancy_id: tenancy_id
        new_rent:
          rent: 5.637376656633329
          incidentals: 2.3021358869347655
      properties:
        id:
          description: generated unique ID
          type: string
        created_at:
          description: The timestamp of when the tenant was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the tenant was last updated
          format: int64
          type: integer
        tenancy_id:
          description: The ID of the tenancy that this update is for
          type: string
        entry_into_force:
          description: The date when the update will enter into force
          format: int64
          type: integer
        new_rent:
          $ref: '#/components/schemas/RentData'
        tenant_changes:
          description: |
            Optional changes to the tenants.
          items:
            $ref: '#/components/schemas/TenantChange'
          type: array
      type: object
    TenantChange:
      description: |
        A change to the tenants of a property. This is used to indicate that a tenant has moved out or moved in. To be able to know whe stayed in the property, we also provide the list of tenants that remained.
      example:
        action: null
        entry_into_force: 5
        tenant:
          notes:
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          updated_at: 4
          created_at: 2
          last_name: last_name
          external_id: external_id
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
          external_source: external_source
      properties:
        tenant:
          $ref: '#/components/schemas/Tenant'
        entry_into_force:
          description: Optional date when the change will enter into force
          format: int64
          type: integer
        action:
          $ref: '#/components/schemas/TenantChangeActionEnum'
      type: object
    TenantChangeActionEnum:
      description: Indication whether the tenant is moving in or moving out
      enum:
      - MOVE_IN
      - MOVE_OUT
      - REMAIN
      type: string
    CreateTenancyUpdateRequest:
      description: |
        Request issued by a property manager to create a new update for a tenancy
      example:
        tenant_changes:
        - action: null
          entry_into_force: 6
          tenant:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
        - action: null
          entry_into_force: 6
          tenant:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
        entry_into_force: 0
        new_rent:
          rent: 5.637376656633329
          incidentals: 2.3021358869347655
      properties:
        entry_into_force:
          description: The date when the update will enter into force
          format: int64
          type: integer
        new_rent:
          $ref: '#/components/schemas/RentData'
        tenant_changes:
          description: |
            Optional change to the tenants.
          items:
            $ref: '#/components/schemas/TenantChangeRequest'
          type: array
      type: object
    TenantChangeRequest:
      description: |
        A change to the tenants of a property. This is used to indicate that a tenant has moved out or moved in.
      example:
        action: null
        entry_into_force: 6
        tenant:
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
      properties:
        tenant:
          $ref: '#/components/schemas/ContactData'
        entry_into_force:
          description: Optional date when the change will enter into force
          format: int64
          type: integer
        action:
          $ref: '#/components/schemas/TenantChangeActionEnum'
      type: object
    UpdateTenancyUpdateRequest:
      description: |
        Request issued by a property manager to update an existing update for a tenancy
      example:
        tenant_changes:
        - action: null
          entry_into_force: 6
          tenant:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
        - action: null
          entry_into_force: 6
          tenant:
            address:
              line1: 1 ZestLabs Blvd
              line2: CSS District
              city: Mannheim
              postcode: 680001
              province: Baden-Wuerttemberg
              country: Germany
            last_name: last_name
            company: company
            phone_number: phone_number
            id: id
            title: title
            first_name: first_name
            email: email
        entry_into_force: 0
        new_rent:
          rent: 5.637376656633329
          incidentals: 2.3021358869347655
      properties:
        entry_into_force:
          description: The date when the update will enter into force
          format: int64
          type: integer
        new_rent:
          $ref: '#/components/schemas/RentData'
        tenant_changes:
          description: |
            Optional change to the tenants.
          items:
            $ref: '#/components/schemas/TenantChangeRequest'
          type: array
      type: object
    QueryTenantsRequest:
      description: Search criteria for querying tenants
      example:
        offset: 6
        limit: 0
      properties:
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
      type: object
    QueryTenantsResponse:
      description: Result of a tenants query
      example:
        tenants:
        - notes:
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          updated_at: 4
          created_at: 2
          last_name: last_name
          external_id: external_id
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
          external_source: external_source
        - notes:
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          - id: n-SVWCmJ2sZ6iRvCMgphtQb5
            created: 1615725028902
            ref: p-J2sWCmCMSVpgZ6iRvTQb7
            text: "Expecting a major renovation to be due by the end of 2022. \n"
          updated_at: 4
          created_at: 2
          last_name: last_name
          external_id: external_id
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
          external_source: external_source
        offset: 6
        limit: 0
      properties:
        limit:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
        tenants:
          items:
            $ref: '#/components/schemas/Tenant'
          type: array
      type: object
    CreateTenantRequest:
      description: |
        Request issued by a property manager to create a new tenant, who is not yet  assigned to a property
      example:
        last_name: last_name
        company: company
        phone_number: phone_number
        title: title
        first_name: first_name
        email: email
      properties:
        title:
          description: "The salutation to be used for the tenant (Miss, Mister, Family)"
          type: string
        first_name:
          description: |
            First name(s) of the tenant. In case of a company, this is the first name of the contact person within the company.
          type: string
        last_name:
          description: |
            Last name of the tenant. In case of a company, this is the last name of the contact person within the company.
          type: string
        company:
          description: |
            Name of the company. Only used in case tenancy is between lessor and a company,  otherwise this field is empty.
          type: string
        email:
          description: |
            The email address of the tenant. Used for sending communication to them, as well as used for invitations.
          type: string
        phone_number:
          description: |
            The phone number of the tenant. Not directly used by the system, but can be used by managers and service providers to contact the tenant.
          type: string
      type: object
    UpdateTenantRequest:
      description: |
        Request issued by a property manager to add a new tenant to an existing property
      example:
        last_name: last_name
        company: company
        phone_number: phone_number
        title: title
        first_name: first_name
        email: email
      properties:
        title:
          description: "The salutation to be used for the tenant (Miss, Mister, Family)"
          type: string
        first_name:
          description: |
            First name(s) of the tenant. In case of a company, this is the first name of the contact person within the company.
          type: string
        last_name:
          description: |
            Last name of the tenant. In case of a company, this is the last name of the contact person within the company.
          type: string
        company:
          description: |
            Name of the company. Only used in case tenancy is between lessor and a company,  otherwise this field is empty.
          type: string
        email:
          description: |
            The email address of the tenant. Used for sending communication to them, as well as used for invitations.
          type: string
        phone_number:
          description: |
            The phone number of the tenant. Not directly used by the system, but can be used by managers and service providers to contact the tenant.
          type: string
      type: object
    CreateOrUpdateWorkflowDefinitionRequest:
      description: a request for creating a new or updating an existing workflow
      example:
        first_step_id: first_step_id
        name_expression: name_expression
        billing_id: billing_id
        name: name
        icon: icon
        description: description
        billing_expression: billing_expression
        steps:
        - group_name: group_name
          dynamic_parameters:
            key: dynamic_parameters
          icon: icon
          name: name
          can_be_executed_expression: can_be_executed_expression
          prerun_action:
            button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          id: id
          type: type
          parameters:
            key: ""
          actions:
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
        - group_name: group_name
          dynamic_parameters:
            key: dynamic_parameters
          icon: icon
          name: name
          can_be_executed_expression: can_be_executed_expression
          prerun_action:
            button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          id: id
          type: type
          parameters:
            key: ""
          actions:
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
        released: true
        env_vars:
          key: env_vars
        billing_gate: billing_gate
        init_step:
          group_name: group_name
          dynamic_parameters:
            key: dynamic_parameters
          icon: icon
          name: name
          can_be_executed_expression: can_be_executed_expression
          prerun_action:
            button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          id: id
          type: type
          parameters:
            key: ""
          actions:
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
      properties:
        name:
          type: string
        description:
          type: string
        name_expression:
          description: |
            a JS expression that determines the name of the workflow execution
          type: string
        icon:
          description: |
            The icon of the workflow (shown in the menu). If empty, the default icon  of the workflow type will be used.
          type: string
        env_vars:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        billing_gate:
          description: |
            The ID of the step that will cause billing to be triggered for an  execution of this workflow. If empty, billing will be triggered upon creation of the workflow execution.
          type: string
        billing_id:
          description: |
            The ID of the billing plan that will be used for billing of this workflow. If empty, no billing will be triggered.
          type: string
        billing_expression:
          description: |
            a JS expression that determines the billing plan of the workflow execution. If set, this will override the billing_id.
          type: string
        released:
          description: whether the workflow is released or not
          type: boolean
        first_step_id:
          description: "ID of the first step of the workflow, which will be executed\
            \ when the workflow is started"
          type: string
        init_step:
          $ref: '#/components/schemas/WorkflowStepDefinition'
        steps:
          items:
            $ref: '#/components/schemas/WorkflowStepDefinition'
          type: array
      type: object
    WorkflowStepDefinition:
      description: a step of a workflow
      example:
        group_name: group_name
        dynamic_parameters:
          key: dynamic_parameters
        icon: icon
        name: name
        can_be_executed_expression: can_be_executed_expression
        prerun_action:
          button_modifier: button_modifier
          child_execution_iterator_expression: child_execution_iterator_expression
          child_execution_context_expression: child_execution_context_expression
          icon: icon
          label: label
          next_step_id: next_step_id
          can_be_executed_expression: can_be_executed_expression
          ui_filter: ui_filter
          id: id
          execBefore: execBefore
          parameters:
            key: ""
          execAfter: execAfter
          start_child_workflow: start_child_workflow
        id: id
        type: type
        parameters:
          key: ""
        actions:
        - button_modifier: button_modifier
          child_execution_iterator_expression: child_execution_iterator_expression
          child_execution_context_expression: child_execution_context_expression
          icon: icon
          label: label
          next_step_id: next_step_id
          can_be_executed_expression: can_be_executed_expression
          ui_filter: ui_filter
          id: id
          execBefore: execBefore
          parameters:
            key: ""
          execAfter: execAfter
          start_child_workflow: start_child_workflow
        - button_modifier: button_modifier
          child_execution_iterator_expression: child_execution_iterator_expression
          child_execution_context_expression: child_execution_context_expression
          icon: icon
          label: label
          next_step_id: next_step_id
          can_be_executed_expression: can_be_executed_expression
          ui_filter: ui_filter
          id: id
          execBefore: execBefore
          parameters:
            key: ""
          execAfter: execAfter
          start_child_workflow: start_child_workflow
      nullable: true
      properties:
        id:
          description: "the ID of the step, unique within the workflow"
          type: string
        type:
          description: the type of the step
          type: string
        icon:
          description: |
            The icon of the step (shown in the menu). If empty, the default icon  of the step type will be used.
          type: string
        name:
          description: |
            The name of the step (shown as title and in the menu). If empty, the  default name of the step type will be used.
          type: string
        group_name:
          description: |
            Optional name of the group of the step. If a group is provided, steps within the same group will be grouped together in the UI as a drawer.
          type: string
        parameters:
          additionalProperties: true
          description: |
            a parameter of a workflow step or step action. The value of the parameter is contextual and can vary in type and meaning depending on the step or action that uses it. If used in a step, the parameter will be available in the UI and will not be interpreted, i.e. JS expressions are not allowed. In actions however, the parameter might be interpreted as a JS expression, if the action type requires it.
          type: object
        dynamic_parameters:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        prerun_action:
          $ref: '#/components/schemas/WorkflowStepAction'
        can_be_executed_expression:
          description: |
            An optional JS expression that determines whether the step can be executed or  not. If not set, this will default to true, once the previous step has been  executed.
          type: string
        actions:
          items:
            $ref: '#/components/schemas/WorkflowStepAction'
          type: array
      type: object
    WorkflowParameters:
      additionalProperties: true
      description: |
        a parameter of a workflow step or step action. The value of the parameter is contextual and can vary in type and meaning depending on the step or action that uses it. If used in a step, the parameter will be available in the UI and will not be interpreted, i.e. JS expressions are not allowed. In actions however, the parameter might be interpreted as a JS expression, if the action type requires it.
      type: object
    WorkflowStepAction:
      description: an action that can be performed on a workflow step
      example:
        button_modifier: button_modifier
        child_execution_iterator_expression: child_execution_iterator_expression
        child_execution_context_expression: child_execution_context_expression
        icon: icon
        label: label
        next_step_id: next_step_id
        can_be_executed_expression: can_be_executed_expression
        ui_filter: ui_filter
        id: id
        execBefore: execBefore
        parameters:
          key: ""
        execAfter: execAfter
        start_child_workflow: start_child_workflow
      properties:
        id:
          description: the ID of the action
          type: string
        icon:
          description: the icon of the action
          type: string
        label:
          description: the button label for the action
          type: string
        button_modifier:
          description: optional button modifier of the action
          type: string
        ui_filter:
          description: optional filter that can be used by the UI to show or hide
            the action
          type: string
        parameters:
          additionalProperties: true
          description: |
            a parameter of a workflow step or step action. The value of the parameter is contextual and can vary in type and meaning depending on the step or action that uses it. If used in a step, the parameter will be available in the UI and will not be interpreted, i.e. JS expressions are not allowed. In actions however, the parameter might be interpreted as a JS expression, if the action type requires it.
          type: object
        can_be_executed_expression:
          description: |
            An optional JS expression that determines whether the action can be executed or  not. If not set, this will default to true.
          type: string
        next_step_id:
          description: the ID of the next step of the workflow
          type: string
        execBefore:
          description: |
            Optional JS expression that will be executed before any step- and action-specific logic is executed.
          type: string
        execAfter:
          description: |
            Optional JS expression that will be executed after the step- and action-specific logic is executed.
          type: string
        start_child_workflow:
          description: optional ID of a workflow definition that should be executed
          type: string
        child_execution_iterator_expression:
          description: |
            An optional JS expression that returns an array of entities. For each entity, a new workflow execution will be started. The entity will be available as a parameter `iterator` in the child execution context expression.
          type: string
        child_execution_context_expression:
          description: |
            An optional JS expression that determines the context of the child workflow execution. If not set, the context of the parent workflow execution will be used.
          type: string
      type: object
    WorkflowDefinition:
      description: a workflow that can guide the user through a process
      example:
        first_step_id: first_step_id
        name_expression: name_expression
        billing_id: billing_id
        icon: icon
        created_at: 0
        description: description
        billing_expression: billing_expression
        steps:
        - group_name: group_name
          dynamic_parameters:
            key: dynamic_parameters
          icon: icon
          name: name
          can_be_executed_expression: can_be_executed_expression
          prerun_action:
            button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          id: id
          type: type
          parameters:
            key: ""
          actions:
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
        - group_name: group_name
          dynamic_parameters:
            key: dynamic_parameters
          icon: icon
          name: name
          can_be_executed_expression: can_be_executed_expression
          prerun_action:
            button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          id: id
          type: type
          parameters:
            key: ""
          actions:
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
        env_vars:
          key: env_vars
        billing_gate: billing_gate
        updated_at: 6
        name: name
        id: id
        released: true
        init_step:
          group_name: group_name
          dynamic_parameters:
            key: dynamic_parameters
          icon: icon
          name: name
          can_be_executed_expression: can_be_executed_expression
          prerun_action:
            button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          id: id
          type: type
          parameters:
            key: ""
          actions:
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
      properties:
        id:
          type: string
        created_at:
          description: The timestamp of when the workflow was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the workflow was last updated
          format: int64
          type: integer
        name:
          type: string
        description:
          type: string
        icon:
          description: |
            The icon of the workflow (shown in the menu). If empty, a default icon  will be used.
          type: string
        name_expression:
          description: |
            a JS expression that determines the name of the workflow execution
          type: string
        env_vars:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        billing_gate:
          description: |
            The ID of the step that will cause billing to be triggered for an  execution of this workflow. If empty, billing will be triggered upon creation of the workflow execution.
          type: string
        billing_id:
          description: |
            The ID of the billing plan that will be used for billing of this workflow. If empty, no billing will be triggered.
          type: string
        billing_expression:
          description: |
            a JS expression that determines the billing plan of the workflow execution. If set, this will override the billing_id.
          type: string
        released:
          description: whether the workflow is released or not
          type: boolean
        init_step:
          $ref: '#/components/schemas/WorkflowStepDefinition'
        first_step_id:
          description: "ID of the first step of the workflow, which will be executed\
            \ when the workflow is started"
          type: string
        steps:
          items:
            $ref: '#/components/schemas/WorkflowStepDefinition'
          type: array
      type: object
    QueryWorkflowDefinitionsRequest:
      description: a request for querying workflow definitions
      example:
        limit: 0
      properties:
        limit:
          format: int32
          type: integer
      type: object
    QueryWorkflowDefinitionsResponse:
      description: a response for querying workflow definitions
      example:
        workflows:
        - first_step_id: first_step_id
          name_expression: name_expression
          billing_id: billing_id
          icon: icon
          created_at: 0
          description: description
          billing_expression: billing_expression
          steps:
          - group_name: group_name
            dynamic_parameters:
              key: dynamic_parameters
            icon: icon
            name: name
            can_be_executed_expression: can_be_executed_expression
            prerun_action:
              button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
          - group_name: group_name
            dynamic_parameters:
              key: dynamic_parameters
            icon: icon
            name: name
            can_be_executed_expression: can_be_executed_expression
            prerun_action:
              button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
          env_vars:
            key: env_vars
          billing_gate: billing_gate
          updated_at: 6
          name: name
          id: id
          released: true
          init_step:
            group_name: group_name
            dynamic_parameters:
              key: dynamic_parameters
            icon: icon
            name: name
            can_be_executed_expression: can_be_executed_expression
            prerun_action:
              button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
        - first_step_id: first_step_id
          name_expression: name_expression
          billing_id: billing_id
          icon: icon
          created_at: 0
          description: description
          billing_expression: billing_expression
          steps:
          - group_name: group_name
            dynamic_parameters:
              key: dynamic_parameters
            icon: icon
            name: name
            can_be_executed_expression: can_be_executed_expression
            prerun_action:
              button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
          - group_name: group_name
            dynamic_parameters:
              key: dynamic_parameters
            icon: icon
            name: name
            can_be_executed_expression: can_be_executed_expression
            prerun_action:
              button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
          env_vars:
            key: env_vars
          billing_gate: billing_gate
          updated_at: 6
          name: name
          id: id
          released: true
          init_step:
            group_name: group_name
            dynamic_parameters:
              key: dynamic_parameters
            icon: icon
            name: name
            can_be_executed_expression: can_be_executed_expression
            prerun_action:
              button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
      properties:
        workflows:
          items:
            $ref: '#/components/schemas/WorkflowDefinition'
          type: array
      type: object
    CreateOrUpdateWorkflowEntrypointRequest:
      description: an app entrypoint to a workflow execution
      example:
        init_script: init_script
        workflow_definition_ref: workflow_definition_ref
        app_location: null
        icon: icon
        label:
          key: label
        skip_init_step: true
        location_filter: location_filter
      properties:
        workflow_definition_ref:
          description: the ID of the workflow definition
          type: string
        app_location:
          $ref: '#/components/schemas/WorkflowEntrypointLocation'
        location_filter:
          description: |
            optional filter that can be used to limit where the entrypoint is shown, e.g. for cases this can be the case template, for reports this can be the report  definition, etc.
          type: string
        icon:
          description: |
            Optional icon of the entrypoint
          type: string
        label:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        init_script:
          description: optional JS script to be executed before the workflow is started
          type: string
        skip_init_step:
          description: whether the init step should be skipped or not
          type: boolean
      type: object
    WorkflowEntrypointLocation:
      enum:
      - manual
      - property
      - tenancy
      - tenant
      - case
      - report
      - data_collection
      type: string
    WorkflowEntrypoint:
      description: an app entrypoint to a workflow execution
      example:
        init_script: init_script
        updated_at: 6
        workflow_definition_ref: workflow_definition_ref
        app_location: null
        icon: icon
        created_at: 0
        id: id
        label:
          key: label
        skip_init_step: true
        location_filter: location_filter
      properties:
        id:
          description: the ID of the entrypoint
          type: string
        created_at:
          description: The timestamp of when the workflow was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the workflow was last updated
          format: int64
          type: integer
        workflow_definition_ref:
          description: the ID of the workflow definition
          type: string
        app_location:
          $ref: '#/components/schemas/WorkflowEntrypointLocation'
        location_filter:
          description: |
            optional filter that can be used to limit where the entrypoint is shown, e.g. for cases this can be the case template, for reports this can be the report  definition, etc.
          type: string
        icon:
          description: |
            Optional icon of the entrypoint
          type: string
        label:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        init_script:
          description: optional JS script to be executed before the workflow is started
          type: string
        skip_init_step:
          description: whether the init step should be skipped or not
          type: boolean
      type: object
    ExecuteWorkflowEntrypointRequest:
      description: a request for starting a workflow execution via an entry point
      example:
        data:
          key: ""
        source_ref: source_ref
      properties:
        source_ref:
          description: "optional ID of the source object, for which this entrypoint\
            \ was triggered"
          type: string
        data:
          additionalProperties: true
          description: "the data to be passed to the workflow execution \n"
          type: object
      type: object
    WorkflowExecutionResponse:
      description: a response for starting or executing a step in a workflow execution
      example:
        result: result
        next_step: next_step
        success: true
        workflow_execution:
          definition_ref: definition_ref
          created_at: 0
          step_history:
          - data: data
            executed_at: 1
            action: action
            step_ref: step_ref
          - data: data
            executed_at: 1
            action: action
            step_ref: step_ref
          steps:
          - can_be_executed: true
            group_name: group_name
            icon: icon
            name: name
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            is_completed: true
          - can_be_executed: true
            group_name: group_name
            icon: icon
            name: name
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            is_completed: true
          parent_ref: parent_ref
          archived: true
          updated_at: 6
          name: name
          context: context
          id: id
          current_step_name: current_step_name
          status: null
          current_step: current_step
      properties:
        success:
          type: boolean
        result:
          description: the result of the workflow execution as JSON
          type: string
        next_step:
          description: the ID of the next step of the workflow execution
          type: string
        workflow_execution:
          $ref: '#/components/schemas/WorkflowExecution'
      type: object
    WorkflowExecution:
      description: an execution of a workflow
      example:
        definition_ref: definition_ref
        created_at: 0
        step_history:
        - data: data
          executed_at: 1
          action: action
          step_ref: step_ref
        - data: data
          executed_at: 1
          action: action
          step_ref: step_ref
        steps:
        - can_be_executed: true
          group_name: group_name
          icon: icon
          name: name
          id: id
          type: type
          parameters:
            key: ""
          actions:
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          is_completed: true
        - can_be_executed: true
          group_name: group_name
          icon: icon
          name: name
          id: id
          type: type
          parameters:
            key: ""
          actions:
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          - button_modifier: button_modifier
            child_execution_iterator_expression: child_execution_iterator_expression
            child_execution_context_expression: child_execution_context_expression
            icon: icon
            label: label
            next_step_id: next_step_id
            can_be_executed_expression: can_be_executed_expression
            ui_filter: ui_filter
            id: id
            execBefore: execBefore
            parameters:
              key: ""
            execAfter: execAfter
            start_child_workflow: start_child_workflow
          is_completed: true
        parent_ref: parent_ref
        archived: true
        updated_at: 6
        name: name
        context: context
        id: id
        current_step_name: current_step_name
        status: null
        current_step: current_step
      properties:
        id:
          type: string
        created_at:
          description: The timestamp of when the workflow execution was created
          format: int64
          type: integer
        updated_at:
          description: The timestamp of when the workflow execution was last updated
          format: int64
          type: integer
        definition_ref:
          description: the ID of the workflow definition on which the workflow execution
            is based
          type: string
        parent_ref:
          description: optional ID of the parent workflow execution
          type: string
        name:
          description: the name of the workflow execution
          type: string
        status:
          $ref: '#/components/schemas/WorkflowExecutionStatus'
        archived:
          description: whether the workflow execution is archived or not
          type: boolean
        current_step:
          description: the ID of the step that is the current step of the workflow
            execution
          type: string
        current_step_name:
          description: the name of the step that is the current step of the workflow
            execution
          type: string
        context:
          description: |
            the data collected and generated during the workflow execution as JSON
          type: string
        steps:
          items:
            $ref: '#/components/schemas/WorkflowExecutionStep'
          type: array
        step_history:
          items:
            $ref: '#/components/schemas/WorkflowExecutionStepResult'
          type: array
      type: object
    WorkflowExecutionStatus:
      enum:
      - started
      - finished
      - canceled
      - archived
      type: string
    WorkflowExecutionStep:
      description: a step of a workflow
      example:
        can_be_executed: true
        group_name: group_name
        icon: icon
        name: name
        id: id
        type: type
        parameters:
          key: ""
        actions:
        - button_modifier: button_modifier
          child_execution_iterator_expression: child_execution_iterator_expression
          child_execution_context_expression: child_execution_context_expression
          icon: icon
          label: label
          next_step_id: next_step_id
          can_be_executed_expression: can_be_executed_expression
          ui_filter: ui_filter
          id: id
          execBefore: execBefore
          parameters:
            key: ""
          execAfter: execAfter
          start_child_workflow: start_child_workflow
        - button_modifier: button_modifier
          child_execution_iterator_expression: child_execution_iterator_expression
          child_execution_context_expression: child_execution_context_expression
          icon: icon
          label: label
          next_step_id: next_step_id
          can_be_executed_expression: can_be_executed_expression
          ui_filter: ui_filter
          id: id
          execBefore: execBefore
          parameters:
            key: ""
          execAfter: execAfter
          start_child_workflow: start_child_workflow
        is_completed: true
      nullable: true
      properties:
        id:
          description: "the ID of the step, unique within the workflow"
          type: string
        type:
          description: the type of the step
          type: string
        icon:
          description: |
            The icon of the step (shown in the menu). If empty, the default icon  of the step type will be used.
          type: string
        name:
          description: |
            The name of the step (shown as title and in the menu). If empty, the  default name of the step type will be used.
          type: string
        parameters:
          additionalProperties: true
          description: |
            a parameter of a workflow step or step action. The value of the parameter is contextual and can vary in type and meaning depending on the step or action that uses it. If used in a step, the parameter will be available in the UI and will not be interpreted, i.e. JS expressions are not allowed. In actions however, the parameter might be interpreted as a JS expression, if the action type requires it.
          type: object
        group_name:
          description: |
            Optional name of the group of the step. If a group is provided, steps within the same group will be grouped together in the UI as a drawer.
          type: string
        actions:
          items:
            $ref: '#/components/schemas/WorkflowStepAction'
          type: array
        is_completed:
          description: |
            Indicates whether the step has been completed or not.
          type: boolean
        can_be_executed:
          description: |
            Indicates whether the step can be executed or not.
          type: boolean
      type: object
    WorkflowExecutionStepResult:
      description: an execution result of a workflow step
      example:
        data: data
        executed_at: 1
        action: action
        step_ref: step_ref
      properties:
        step_ref:
          type: string
        action:
          description: the ID of the action that was executed
          type: string
        executed_at:
          description: The timestamp of when the workflow step execution was executed
          format: int64
          type: integer
        data:
          description: the result of the workflow step execution as JSON
          type: string
      type: object
    QueryWorkflowExecutionsRequest:
      description: a request for querying workflow executions
      example:
        parent_workflow_execution_ref: parent_workflow_execution_ref
        archived: null
        limit: 0
        active: null
        finished: null
        workflow_ref: workflow_ref
      properties:
        workflow_ref:
          nullable: true
          type: string
        parent_workflow_execution_ref:
          nullable: true
          type: string
        active:
          $ref: '#/components/schemas/QueryBooleanParameter'
        finished:
          $ref: '#/components/schemas/QueryBooleanParameter'
        archived:
          $ref: '#/components/schemas/QueryBooleanParameter'
        limit:
          format: int32
          type: integer
      type: object
    QueryWorkflowExecutionsResponse:
      description: a response for querying workflow executions
      example:
        workflow_executions:
        - definition_ref: definition_ref
          created_at: 0
          step_history:
          - data: data
            executed_at: 1
            action: action
            step_ref: step_ref
          - data: data
            executed_at: 1
            action: action
            step_ref: step_ref
          steps:
          - can_be_executed: true
            group_name: group_name
            icon: icon
            name: name
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            is_completed: true
          - can_be_executed: true
            group_name: group_name
            icon: icon
            name: name
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            is_completed: true
          parent_ref: parent_ref
          archived: true
          updated_at: 6
          name: name
          context: context
          id: id
          current_step_name: current_step_name
          status: null
          current_step: current_step
        - definition_ref: definition_ref
          created_at: 0
          step_history:
          - data: data
            executed_at: 1
            action: action
            step_ref: step_ref
          - data: data
            executed_at: 1
            action: action
            step_ref: step_ref
          steps:
          - can_be_executed: true
            group_name: group_name
            icon: icon
            name: name
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            is_completed: true
          - can_be_executed: true
            group_name: group_name
            icon: icon
            name: name
            id: id
            type: type
            parameters:
              key: ""
            actions:
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            - button_modifier: button_modifier
              child_execution_iterator_expression: child_execution_iterator_expression
              child_execution_context_expression: child_execution_context_expression
              icon: icon
              label: label
              next_step_id: next_step_id
              can_be_executed_expression: can_be_executed_expression
              ui_filter: ui_filter
              id: id
              execBefore: execBefore
              parameters:
                key: ""
              execAfter: execAfter
              start_child_workflow: start_child_workflow
            is_completed: true
          parent_ref: parent_ref
          archived: true
          updated_at: 6
          name: name
          context: context
          id: id
          current_step_name: current_step_name
          status: null
          current_step: current_step
      properties:
        workflow_executions:
          items:
            $ref: '#/components/schemas/WorkflowExecution'
          type: array
      type: object
    StartWorkflowExecutionRequest:
      description: a request for starting a workflow execution
      example:
        parent_workflow_execution_ref: parent_workflow_execution_ref
        context: context
        workflow_ref: workflow_ref
      properties:
        workflow_ref:
          type: string
        parent_workflow_execution_ref:
          type: string
        context:
          description: |
            the initial context of the workflow execution as JSON
          type: string
      type: object
    UpdateWorkflowExecutionRequest:
      description: a request for updating a workflow execution
      example:
        status: null
      properties:
        status:
          $ref: '#/components/schemas/WorkflowExecutionStatus'
      type: object
    ExecuteWorkflowStepRequest:
      description: a request for executing a workflow step
      example:
        data: data
        action: action
        step_ref: step_ref
      properties:
        step_ref:
          type: string
        action:
          description: the action that was executed on the step
          type: string
        data:
          description: |
            the data to be used for executing the workflow step as JSON
          type: string
      type: object
    WorkflowTrigger:
      description: information for the trigger of a workflow execution
      example:
        entrypoint_type: null
        execution_ref: execution_ref
        created_at: 0
        source_ref: source_ref
        label: label
      properties:
        execution_ref:
          description: the ID of the workflow execution
          type: string
        entrypoint_type:
          $ref: '#/components/schemas/WorkflowEntrypointLocation'
        source_ref:
          description: the ID of the source object
          type: string
        created_at:
          description: The timestamp of when the workflow was created
          format: int64
          type: integer
        label:
          description: the name of the related workflow execution
          type: string
      type: object
    Address:
      description: "Address is the physical address of a property, a person, or an\
        \ organization"
      example:
        line1: 1 ZestLabs Blvd
        line2: CSS District
        city: Mannheim
        postcode: 680001
        province: Baden-Wuerttemberg
        country: Germany
      properties:
        line1:
          type: string
        line2:
          type: string
        city:
          type: string
        postcode:
          type: string
        province:
          type: string
        country:
          type: string
      type: object
    ContactData:
      description: a common set of attributes used to identify a person or a company
      example:
        address:
          line1: 1 ZestLabs Blvd
          line2: CSS District
          city: Mannheim
          postcode: 680001
          province: Baden-Wuerttemberg
          country: Germany
        last_name: last_name
        company: company
        phone_number: phone_number
        id: id
        title: title
        first_name: first_name
        email: email
      properties:
        id:
          description: "optional ID referencing another existing entity (e.g. Tenant,\
            \ Owner, etc.)"
          type: string
        title:
          description: "the title of the party (e.g. Mr, Mrs, Company, etc.)"
          type: string
        first_name:
          description: |
            First name(s) of the contact. In case of a company, this is the first name of the contact person within the company.
          type: string
        last_name:
          description: |
            Last name of the contact. In case of a company, this is the last name of the contact person within the company.
          type: string
        company:
          description: |
            Name of the company. Only used in case contact is a company, otherwise this  field should be left empty.
          type: string
        email:
          description: optional email of the party
          type: string
        phone_number:
          description: optional phone number of the party
          type: string
        address:
          $ref: '#/components/schemas/Address'
      type: object
    UserTypeEnum:
      enum:
      - ANY
      - TENANT
      - MANAGER
      - SERVICE_PROVIDER
      type: string
    UserReference:
      description: Contains information about a user referenced in other entities
      example:
        user_role: null
        user_id: user_id
        contact_data:
          address:
            line1: 1 ZestLabs Blvd
            line2: CSS District
            city: Mannheim
            postcode: 680001
            province: Baden-Wuerttemberg
            country: Germany
          last_name: last_name
          company: company
          phone_number: phone_number
          id: id
          title: title
          first_name: first_name
          email: email
      properties:
        user_id:
          description: "The ID of the user, can be undefined, if user is not registered,\
            \ or was already deleted"
          type: string
        user_role:
          $ref: '#/components/schemas/UserTypeEnum'
        contact_data:
          $ref: '#/components/schemas/ContactData'
      type: object
    ValueMap:
      additionalProperties:
        type: string
      description: "a map of values, where the key and values are strings"
      type: object
    CustomForm:
      description: a custom form that is used to collect data from the user
      example:
        layout:
        - ref_id: ref_id
          ref_type: ref_type
        - ref_id: ref_id
          ref_type: ref_type
        inputs:
        - view_label:
            key: view_label
          ephemeral: true
          default_value: default_value
          attributes:
            key: attributes
          id: id
          label:
            key: label
          placeholder:
            key: placeholder
          type: type
          items:
          - items
          - items
          required: true
          target: target
        - view_label:
            key: view_label
          ephemeral: true
          default_value: default_value
          attributes:
            key: attributes
          id: id
          label:
            key: label
          placeholder:
            key: placeholder
          type: type
          items:
          - items
          - items
          required: true
          target: target
        groups:
        - use_item_group: true
          bottom_divider: true
          top_divider: true
          min_size: 1
          id: id
          label:
            key: label
          type: type
          items:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          info:
            key: info
          target: target
        - use_item_group: true
          bottom_divider: true
          top_divider: true
          min_size: 1
          id: id
          label:
            key: label
          type: type
          items:
          - ref_id: ref_id
            ref_type: ref_type
          - ref_id: ref_id
            ref_type: ref_type
          info:
            key: info
          target: target
        validations:
        - expression: expression
          id: id
          message:
            key: message
          target: target
        - expression: expression
          id: id
          message:
            key: message
          target: target
      properties:
        layout:
          description: "the layout of the form, which groups and inputs will be displayed"
          items:
            $ref: '#/components/schemas/FormItem'
          type: array
        groups:
          description: the groups of inputs that will be displayed to the user
          items:
            $ref: '#/components/schemas/FormGroup'
          type: array
        inputs:
          description: the inputs that will be displayed to the user
          items:
            $ref: '#/components/schemas/FormInput'
          type: array
        validations:
          description: the validations that will be performed on the data provided
            by the user
          items:
            $ref: '#/components/schemas/FormValidation'
          type: array
      type: object
    FormItem:
      description: "an item in a form group, referencing another entity in the form"
      example:
        ref_id: ref_id
        ref_type: ref_type
      properties:
        ref_id:
          description: the ID of the entity that will be referenced
          type: string
        ref_type:
          $ref: '#/components/schemas/FormItemType'
      type: object
    FormItemType:
      enum:
      - input
      - group
      type: string
    FormGroup:
      description: a group of inputs that will be displayed together in the UI
      example:
        use_item_group: true
        bottom_divider: true
        top_divider: true
        min_size: 1
        id: id
        label:
          key: label
        type: type
        items:
        - ref_id: ref_id
          ref_type: ref_type
        - ref_id: ref_id
          ref_type: ref_type
        info:
          key: info
        target: target
      properties:
        id:
          description: the ID of the group
          type: string
        type:
          $ref: '#/components/schemas/FormGroupType'
        label:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        info:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        items:
          description: the IDs of the inputs that will be displayed in the group
          items:
            $ref: '#/components/schemas/FormItem'
          type: array
        target:
          description: the attribute name to use when exporting the result of this
            group (only used for repeat groups)
          type: string
        top_divider:
          description: "if true, a divider will be displayed above the group"
          type: boolean
        bottom_divider:
          description: "if true, a divider will be displayed below the group"
          type: boolean
        use_item_group:
          description: "if true, the inputs will be displayed in a group, otherwise\
            \ they will be displayed in a row"
          type: boolean
        min_size:
          description: the minimum number of items that must be submitted in the group
            (only used for repeat groups)
          type: integer
      type: object
    FormGroupType:
      enum:
      - section
      - repeat_group
      - row
      type: string
    FormInput:
      description: a custom input that is used in dynamic forms to collect data from
        the user
      example:
        view_label:
          key: view_label
        ephemeral: true
        default_value: default_value
        attributes:
          key: attributes
        id: id
        label:
          key: label
        placeholder:
          key: placeholder
        type: type
        items:
        - items
        - items
        required: true
        target: target
      properties:
        id:
          description: "the ID of the input field, used to identify it and later access\
            \ the data"
          type: string
        label:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        view_label:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        placeholder:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        type:
          $ref: '#/components/schemas/FormInputType'
        default_value:
          description: optional default value for the input field (as a JSON string)
          type: string
        required:
          description: "if true, the user will be required to provide a value"
          type: boolean
        ephemeral:
          description: "if true, the value of the input will not be persisted"
          type: boolean
        target:
          description: the attribute name to use when exporting the result of this
            input
          type: string
        attributes:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
        items:
          description: only used when the type is select or multi select. This is
            a list of values that the user can choose from
          items:
            type: string
          type: array
      type: object
    FormInputType:
      enum:
      - text
      - number
      - date
      - boolean
      - single_select
      - multi_select
      - file
      - id_upload
      - address
      - contact_data
      - rent
      - bank_account
      - yes_no_or_value
      - service_provider_ref
      type: string
    FormValidation:
      description: a custom validation that is used to validate data provided by the
        user
      example:
        expression: expression
        id: id
        message:
          key: message
        target: target
      properties:
        id:
          description: "the ID of the validation, used to identify it"
          type: string
        expression:
          description: a JS expression that will be evaluated to determine if the
            validation passes or fails
          type: string
        target:
          description: the index of the input should be highlighted if the validation
            fails (nesting is supported via dot notation)
          type: string
        message:
          additionalProperties:
            type: string
          description: "a map of values, where the key and values are strings"
          type: object
      type: object
    IDUpload:
      description: |
        an ID document uploaded by the user, consisting of a photo from the front and back of the ID
      example:
        back:
          ref: ref
          thumbnail: thumbnail
          created: 0
          file_type: file_type
          file_name: file_name
          id: id
          file_size: 6
          url: url
        front:
          ref: ref
          thumbnail: thumbnail
          created: 0
          file_type: file_type
          file_name: file_name
          id: id
          file_size: 6
          url: url
      properties:
        front:
          $ref: '#/components/schemas/Attachment'
        back:
          $ref: '#/components/schemas/Attachment'
      type: object
    YesNoOrValue:
      example:
        s: s
        v: true
        "n": 5.637376656633329
      properties:
        v:
          description: true or false value
          type: boolean
        s:
          description: additional string value (e.g. if value set to true)
          type: string
        "n":
          description: additional numeric value (e.g. if value set to true)
          type: number
      type: object
    DefaultInputConfig:
      description: "configuration of default predefault inputs, e.g. given by a template"
      example:
        id: id
        collect: skip
      properties:
        id:
          description: "the id of the input, used to identify it"
          type: string
        collect:
          description: "whether the input is required, optional or skipped (not displayed\
            \ to the tenant)"
          enum:
          - skip
          - required
          - optional
          type: string
      type: object
    FloatNumber:
      example:
        f: 5
        i: 5
      properties:
        i:
          description: the integer value (the part before the decimal point)
          format: int32
          type: integer
        f:
          description: the fractiopnal value (the part after the decimal point)
          format: int32
          type: integer
      type: object
    ServiceCategoryEnum:
      enum:
      - OTHERS
      - ARCHITECT
      - CARPENTER
      - CHIMNEY_SWEEP
      - CLEANING_AND_WASTE_DISPOSAL
      - DOORS_AND_WINDOWS
      - ELECTRICIAN
      - ELEVATOR_AND_LIFT
      - FLOORING
      - GARDENING
      - HEATING
      - INSURANCE
      - INSTALLATION
      - JANITOR
      - LOCKSMITH
      - MASONRY
      - METER_READING
      - KEY_SERVICE
      - PAINTING
      - PEST_CONTROL
      - ROOFER
      - SANITARY
      - SOLAR_PANELS
      - TILER
      - VENTILATION_AND_AIR_CONDITIONING
      type: string
    RentInformation:
      description: the rent information for a property
      example:
        rent_type: null
        monthly_rent:
          rent: 5.637376656633329
          incidentals: 2.3021358869347655
        deposit: 7.061401241503109
        index_month: 9
        index_points: 3.616076749251911
      properties:
        monthly_rent:
          $ref: '#/components/schemas/RentData'
        deposit:
          description: the deposit amount
          format: double
          type: number
        rent_type:
          $ref: '#/components/schemas/RentTypeEnum'
        index_month:
          description: the month of the year when the rent index is applied
          format: int64
          type: integer
        index_points:
          description: the number of points that the rent index is increased by
          format: double
          type: number
      type: object
    RentData:
      description: Information about the rent of a property
      example:
        rent: 5.637376656633329
        incidentals: 2.3021358869347655
      properties:
        rent:
          description: the monthly rent amount
          format: double
          type: number
        incidentals:
          description: the amount of incidentals paid monthly
          format: double
          type: number
      type: object
    RentTypeEnum:
      enum:
      - REGULAR
      - INDEXED
      - STAGGERED
      type: string
    QueryBooleanParameter:
      enum:
      - IS_TRUE
      - IS_FALSE
      - ANY
      type: string
    uploadAttachment_request:
      properties:
        data:
          format: binary
          type: string
      type: object
