/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// ConnectorEntity the model 'ConnectorEntity'
type ConnectorEntity string

// List of ConnectorEntity
const (
	CONNECTORENTITY_BANK_ACCOUNT     ConnectorEntity = "BANK_ACCOUNT"
	CONNECTORENTITY_PROPERTY         ConnectorEntity = "PROPERTY"
	CONNECTORENTITY_PROPERTY_OWNER   ConnectorEntity = "PROPERTY_OWNER"
	CONNECTORENTITY_TENANT           ConnectorEntity = "TENANT"
	CONNECTORENTITY_TENANCY          ConnectorEntity = "TENANCY"
	CONNECTORENTITY_SERVICE_PROVIDER ConnectorEntity = "SERVICE_PROVIDER"
)

// All allowed values of ConnectorEntity enum
var AllowedConnectorEntityEnumValues = []ConnectorEntity{
	"BANK_ACCOUNT",
	"PROPERTY",
	"PROPERTY_OWNER",
	"TENANT",
	"TENANCY",
	"SERVICE_PROVIDER",
}

func (v *ConnectorEntity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorEntity(value)
	for _, existing := range AllowedConnectorEntityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorEntity", value)
}

// NewConnectorEntityFromValue returns a pointer to a valid ConnectorEntity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorEntityFromValue(v string) (*ConnectorEntity, error) {
	ev := ConnectorEntity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorEntity: valid values are %v", v, AllowedConnectorEntityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorEntity) IsValid() bool {
	for _, existing := range AllowedConnectorEntityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorEntity value
func (v ConnectorEntity) Ptr() *ConnectorEntity {
	return &v
}

type NullableConnectorEntity struct {
	value *ConnectorEntity
	isSet bool
}

func (v NullableConnectorEntity) Get() *ConnectorEntity {
	return v.value
}

func (v *NullableConnectorEntity) Set(val *ConnectorEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorEntity(val *ConnectorEntity) *NullableConnectorEntity {
	return &NullableConnectorEntity{value: val, isSet: true}
}

func (v NullableConnectorEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
