/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the Tenancy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tenancy{}

// Tenancy A tenancy is a contract between a tenant and a property manager.
type Tenancy struct {
	// generated unique ID
	Id *string `json:"id,omitempty"`
	// optional external ID, in case tenancy was created via backend integration
	ExternalId *string `json:"external_id,omitempty"`
	// optional external source, in case tenancy was created via backend integration
	ExternalSource *string `json:"external_source,omitempty"`
	// The timestamp of when the tenant was created
	CreatedAt *int64 `json:"created_at,omitempty"`
	// The timestamp of when the tenant was last updated
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// The ID of the property that is being rented out
	PropertyRef *string `json:"property_ref,omitempty"`
	// Indicates whether the tenancy is active. Active tenancies indicate the current contract between the tenants and the property manager.
	Active *bool `json:"active,omitempty"`
	// The timestamp of when the tenancy has started
	StartDate *int64 `json:"start_date,omitempty"`
	// The timestamp of when the tenancy has ended or is scheduled to end (optional)
	EndDate         *int64                   `json:"end_date,omitempty"`
	ContractType    *TenancyContractTypeEnum `json:"contract_type,omitempty"`
	RentInformation *RentInformation         `json:"rent_information,omitempty"`
	// The IDs of the tenants
	Tenants []Tenant `json:"tenants,omitempty"`
}

// NewTenancy instantiates a new Tenancy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenancy() *Tenancy {
	this := Tenancy{}
	return &this
}

// NewTenancyWithDefaults instantiates a new Tenancy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenancyWithDefaults() *Tenancy {
	this := Tenancy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Tenancy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Tenancy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Tenancy) SetId(v string) {
	o.Id = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *Tenancy) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *Tenancy) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *Tenancy) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetExternalSource returns the ExternalSource field value if set, zero value otherwise.
func (o *Tenancy) GetExternalSource() string {
	if o == nil || IsNil(o.ExternalSource) {
		var ret string
		return ret
	}
	return *o.ExternalSource
}

// GetExternalSourceOk returns a tuple with the ExternalSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetExternalSourceOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalSource) {
		return nil, false
	}
	return o.ExternalSource, true
}

// HasExternalSource returns a boolean if a field has been set.
func (o *Tenancy) HasExternalSource() bool {
	if o != nil && !IsNil(o.ExternalSource) {
		return true
	}

	return false
}

// SetExternalSource gets a reference to the given string and assigns it to the ExternalSource field.
func (o *Tenancy) SetExternalSource(v string) {
	o.ExternalSource = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Tenancy) GetCreatedAt() int64 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetCreatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Tenancy) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *Tenancy) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Tenancy) GetUpdatedAt() int64 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Tenancy) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *Tenancy) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetPropertyRef returns the PropertyRef field value if set, zero value otherwise.
func (o *Tenancy) GetPropertyRef() string {
	if o == nil || IsNil(o.PropertyRef) {
		var ret string
		return ret
	}
	return *o.PropertyRef
}

// GetPropertyRefOk returns a tuple with the PropertyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetPropertyRefOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyRef) {
		return nil, false
	}
	return o.PropertyRef, true
}

// HasPropertyRef returns a boolean if a field has been set.
func (o *Tenancy) HasPropertyRef() bool {
	if o != nil && !IsNil(o.PropertyRef) {
		return true
	}

	return false
}

// SetPropertyRef gets a reference to the given string and assigns it to the PropertyRef field.
func (o *Tenancy) SetPropertyRef(v string) {
	o.PropertyRef = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Tenancy) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Tenancy) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Tenancy) SetActive(v bool) {
	o.Active = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Tenancy) GetStartDate() int64 {
	if o == nil || IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetStartDateOk() (*int64, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Tenancy) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *Tenancy) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Tenancy) GetEndDate() int64 {
	if o == nil || IsNil(o.EndDate) {
		var ret int64
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Tenancy) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int64 and assigns it to the EndDate field.
func (o *Tenancy) SetEndDate(v int64) {
	o.EndDate = &v
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *Tenancy) GetContractType() TenancyContractTypeEnum {
	if o == nil || IsNil(o.ContractType) {
		var ret TenancyContractTypeEnum
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetContractTypeOk() (*TenancyContractTypeEnum, bool) {
	if o == nil || IsNil(o.ContractType) {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *Tenancy) HasContractType() bool {
	if o != nil && !IsNil(o.ContractType) {
		return true
	}

	return false
}

// SetContractType gets a reference to the given TenancyContractTypeEnum and assigns it to the ContractType field.
func (o *Tenancy) SetContractType(v TenancyContractTypeEnum) {
	o.ContractType = &v
}

// GetRentInformation returns the RentInformation field value if set, zero value otherwise.
func (o *Tenancy) GetRentInformation() RentInformation {
	if o == nil || IsNil(o.RentInformation) {
		var ret RentInformation
		return ret
	}
	return *o.RentInformation
}

// GetRentInformationOk returns a tuple with the RentInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetRentInformationOk() (*RentInformation, bool) {
	if o == nil || IsNil(o.RentInformation) {
		return nil, false
	}
	return o.RentInformation, true
}

// HasRentInformation returns a boolean if a field has been set.
func (o *Tenancy) HasRentInformation() bool {
	if o != nil && !IsNil(o.RentInformation) {
		return true
	}

	return false
}

// SetRentInformation gets a reference to the given RentInformation and assigns it to the RentInformation field.
func (o *Tenancy) SetRentInformation(v RentInformation) {
	o.RentInformation = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *Tenancy) GetTenants() []Tenant {
	if o == nil || IsNil(o.Tenants) {
		var ret []Tenant
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenancy) GetTenantsOk() ([]Tenant, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *Tenancy) HasTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []Tenant and assigns it to the Tenants field.
func (o *Tenancy) SetTenants(v []Tenant) {
	o.Tenants = v
}

func (o Tenancy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tenancy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !IsNil(o.ExternalSource) {
		toSerialize["external_source"] = o.ExternalSource
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.PropertyRef) {
		toSerialize["property_ref"] = o.PropertyRef
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.ContractType) {
		toSerialize["contract_type"] = o.ContractType
	}
	if !IsNil(o.RentInformation) {
		toSerialize["rent_information"] = o.RentInformation
	}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	return toSerialize, nil
}

type NullableTenancy struct {
	value *Tenancy
	isSet bool
}

func (v NullableTenancy) Get() *Tenancy {
	return v.value
}

func (v *NullableTenancy) Set(val *Tenancy) {
	v.value = val
	v.isSet = true
}

func (v NullableTenancy) IsSet() bool {
	return v.isSet
}

func (v *NullableTenancy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenancy(val *Tenancy) *NullableTenancy {
	return &NullableTenancy{value: val, isSet: true}
}

func (v NullableTenancy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenancy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
