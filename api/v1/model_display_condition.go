/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DisplayCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisplayCondition{}

// DisplayCondition struct for DisplayCondition
type DisplayCondition struct {
	// The path to the source data that will be used to evaluate the condition
	Source  string               `json:"source"`
	Operand ConditionOperandEnum `json:"operand"`
	// The value that will be used to compare the source data with, as a JSON  string. This can be a string, number, or boolean.
	Value string `json:"value"`
}

type _DisplayCondition DisplayCondition

// NewDisplayCondition instantiates a new DisplayCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisplayCondition(source string, operand ConditionOperandEnum, value string) *DisplayCondition {
	this := DisplayCondition{}
	this.Source = source
	this.Operand = operand
	this.Value = value
	return &this
}

// NewDisplayConditionWithDefaults instantiates a new DisplayCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisplayConditionWithDefaults() *DisplayCondition {
	this := DisplayCondition{}
	return &this
}

// GetSource returns the Source field value
func (o *DisplayCondition) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *DisplayCondition) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *DisplayCondition) SetSource(v string) {
	o.Source = v
}

// GetOperand returns the Operand field value
func (o *DisplayCondition) GetOperand() ConditionOperandEnum {
	if o == nil {
		var ret ConditionOperandEnum
		return ret
	}

	return o.Operand
}

// GetOperandOk returns a tuple with the Operand field value
// and a boolean to check if the value has been set.
func (o *DisplayCondition) GetOperandOk() (*ConditionOperandEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operand, true
}

// SetOperand sets field value
func (o *DisplayCondition) SetOperand(v ConditionOperandEnum) {
	o.Operand = v
}

// GetValue returns the Value field value
func (o *DisplayCondition) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DisplayCondition) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DisplayCondition) SetValue(v string) {
	o.Value = v
}

func (o DisplayCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisplayCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["operand"] = o.Operand
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *DisplayCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"operand",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDisplayCondition := _DisplayCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDisplayCondition)

	if err != nil {
		return err
	}

	*o = DisplayCondition(varDisplayCondition)

	return err
}

type NullableDisplayCondition struct {
	value *DisplayCondition
	isSet bool
}

func (v NullableDisplayCondition) Get() *DisplayCondition {
	return v.value
}

func (v *NullableDisplayCondition) Set(val *DisplayCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayCondition(val *DisplayCondition) *NullableDisplayCondition {
	return &NullableDisplayCondition{value: val, isSet: true}
}

func (v NullableDisplayCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
