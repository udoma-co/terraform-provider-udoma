/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the CaseDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseDetails{}

// CaseDetails All details of a case, raised via a case report endpoint
type CaseDetails struct {
	Case      *Case          `json:"case,omitempty"`
	Reporter  *UserReference `json:"reporter,omitempty"`
	CaseParty *CaseParty     `json:"case_party,omitempty"`
	Template  *CaseTemplate  `json:"template,omitempty"`
	Property  *Property      `json:"property,omitempty"`
}

// NewCaseDetails instantiates a new CaseDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseDetails() *CaseDetails {
	this := CaseDetails{}
	return &this
}

// NewCaseDetailsWithDefaults instantiates a new CaseDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseDetailsWithDefaults() *CaseDetails {
	this := CaseDetails{}
	return &this
}

// GetCase returns the Case field value if set, zero value otherwise.
func (o *CaseDetails) GetCase() Case {
	if o == nil || IsNil(o.Case) {
		var ret Case
		return ret
	}
	return *o.Case
}

// GetCaseOk returns a tuple with the Case field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseDetails) GetCaseOk() (*Case, bool) {
	if o == nil || IsNil(o.Case) {
		return nil, false
	}
	return o.Case, true
}

// HasCase returns a boolean if a field has been set.
func (o *CaseDetails) HasCase() bool {
	if o != nil && !IsNil(o.Case) {
		return true
	}

	return false
}

// SetCase gets a reference to the given Case and assigns it to the Case field.
func (o *CaseDetails) SetCase(v Case) {
	o.Case = &v
}

// GetReporter returns the Reporter field value if set, zero value otherwise.
func (o *CaseDetails) GetReporter() UserReference {
	if o == nil || IsNil(o.Reporter) {
		var ret UserReference
		return ret
	}
	return *o.Reporter
}

// GetReporterOk returns a tuple with the Reporter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseDetails) GetReporterOk() (*UserReference, bool) {
	if o == nil || IsNil(o.Reporter) {
		return nil, false
	}
	return o.Reporter, true
}

// HasReporter returns a boolean if a field has been set.
func (o *CaseDetails) HasReporter() bool {
	if o != nil && !IsNil(o.Reporter) {
		return true
	}

	return false
}

// SetReporter gets a reference to the given UserReference and assigns it to the Reporter field.
func (o *CaseDetails) SetReporter(v UserReference) {
	o.Reporter = &v
}

// GetCaseParty returns the CaseParty field value if set, zero value otherwise.
func (o *CaseDetails) GetCaseParty() CaseParty {
	if o == nil || IsNil(o.CaseParty) {
		var ret CaseParty
		return ret
	}
	return *o.CaseParty
}

// GetCasePartyOk returns a tuple with the CaseParty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseDetails) GetCasePartyOk() (*CaseParty, bool) {
	if o == nil || IsNil(o.CaseParty) {
		return nil, false
	}
	return o.CaseParty, true
}

// HasCaseParty returns a boolean if a field has been set.
func (o *CaseDetails) HasCaseParty() bool {
	if o != nil && !IsNil(o.CaseParty) {
		return true
	}

	return false
}

// SetCaseParty gets a reference to the given CaseParty and assigns it to the CaseParty field.
func (o *CaseDetails) SetCaseParty(v CaseParty) {
	o.CaseParty = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *CaseDetails) GetTemplate() CaseTemplate {
	if o == nil || IsNil(o.Template) {
		var ret CaseTemplate
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseDetails) GetTemplateOk() (*CaseTemplate, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *CaseDetails) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given CaseTemplate and assigns it to the Template field.
func (o *CaseDetails) SetTemplate(v CaseTemplate) {
	o.Template = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *CaseDetails) GetProperty() Property {
	if o == nil || IsNil(o.Property) {
		var ret Property
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseDetails) GetPropertyOk() (*Property, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *CaseDetails) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given Property and assigns it to the Property field.
func (o *CaseDetails) SetProperty(v Property) {
	o.Property = &v
}

func (o CaseDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Case) {
		toSerialize["case"] = o.Case
	}
	if !IsNil(o.Reporter) {
		toSerialize["reporter"] = o.Reporter
	}
	if !IsNil(o.CaseParty) {
		toSerialize["case_party"] = o.CaseParty
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	return toSerialize, nil
}

type NullableCaseDetails struct {
	value *CaseDetails
	isSet bool
}

func (v NullableCaseDetails) Get() *CaseDetails {
	return v.value
}

func (v *NullableCaseDetails) Set(val *CaseDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseDetails(val *CaseDetails) *NullableCaseDetails {
	return &NullableCaseDetails{value: val, isSet: true}
}

func (v NullableCaseDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
