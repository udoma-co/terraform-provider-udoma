/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// SignatureStatusType the model 'SignatureStatusType'
type SignatureStatusType string

// List of SignatureStatusType
const (
	SIGNATURESTATUSTYPE_INITIATED SignatureStatusType = "initiated"
	SIGNATURESTATUSTYPE_DONE      SignatureStatusType = "done"
	SIGNATURESTATUSTYPE_EXPIRED   SignatureStatusType = "expired"
)

// All allowed values of SignatureStatusType enum
var AllowedSignatureStatusTypeEnumValues = []SignatureStatusType{
	"initiated",
	"done",
	"expired",
}

func (v *SignatureStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SignatureStatusType(value)
	for _, existing := range AllowedSignatureStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SignatureStatusType", value)
}

// NewSignatureStatusTypeFromValue returns a pointer to a valid SignatureStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSignatureStatusTypeFromValue(v string) (*SignatureStatusType, error) {
	ev := SignatureStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SignatureStatusType: valid values are %v", v, AllowedSignatureStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SignatureStatusType) IsValid() bool {
	for _, existing := range AllowedSignatureStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SignatureStatusType value
func (v SignatureStatusType) Ptr() *SignatureStatusType {
	return &v
}

type NullableSignatureStatusType struct {
	value *SignatureStatusType
	isSet bool
}

func (v NullableSignatureStatusType) Get() *SignatureStatusType {
	return v.value
}

func (v *NullableSignatureStatusType) Set(val *SignatureStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureStatusType(val *SignatureStatusType) *NullableSignatureStatusType {
	return &NullableSignatureStatusType{value: val, isSet: true}
}

func (v NullableSignatureStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
