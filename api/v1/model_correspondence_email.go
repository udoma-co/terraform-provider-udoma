/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CorrespondenceEmail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorrespondenceEmail{}

// CorrespondenceEmail struct for CorrespondenceEmail
type CorrespondenceEmail struct {
	// The subject of the email
	Subject string `json:"subject"`
	// A custom message to send in the email
	Message string `json:"message"`
}

type _CorrespondenceEmail CorrespondenceEmail

// NewCorrespondenceEmail instantiates a new CorrespondenceEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorrespondenceEmail(subject string, message string) *CorrespondenceEmail {
	this := CorrespondenceEmail{}
	this.Subject = subject
	this.Message = message
	return &this
}

// NewCorrespondenceEmailWithDefaults instantiates a new CorrespondenceEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorrespondenceEmailWithDefaults() *CorrespondenceEmail {
	this := CorrespondenceEmail{}
	return &this
}

// GetSubject returns the Subject field value
func (o *CorrespondenceEmail) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *CorrespondenceEmail) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *CorrespondenceEmail) SetSubject(v string) {
	o.Subject = v
}

// GetMessage returns the Message field value
func (o *CorrespondenceEmail) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CorrespondenceEmail) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CorrespondenceEmail) SetMessage(v string) {
	o.Message = v
}

func (o CorrespondenceEmail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorrespondenceEmail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subject"] = o.Subject
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *CorrespondenceEmail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subject",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCorrespondenceEmail := _CorrespondenceEmail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCorrespondenceEmail)

	if err != nil {
		return err
	}

	*o = CorrespondenceEmail(varCorrespondenceEmail)

	return err
}

type NullableCorrespondenceEmail struct {
	value *CorrespondenceEmail
	isSet bool
}

func (v NullableCorrespondenceEmail) Get() *CorrespondenceEmail {
	return v.value
}

func (v *NullableCorrespondenceEmail) Set(val *CorrespondenceEmail) {
	v.value = val
	v.isSet = true
}

func (v NullableCorrespondenceEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableCorrespondenceEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorrespondenceEmail(val *CorrespondenceEmail) *NullableCorrespondenceEmail {
	return &NullableCorrespondenceEmail{value: val, isSet: true}
}

func (v NullableCorrespondenceEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorrespondenceEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
