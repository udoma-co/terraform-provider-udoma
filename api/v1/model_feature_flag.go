/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FeatureFlag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureFlag{}

// FeatureFlag struct for FeatureFlag
type FeatureFlag struct {
	// The name of the feature flag. This should be a unique identifier for the flag.
	Name string `json:"name"`
	// A description of the feature flag. This should describe what the flag is used for.
	Description string `json:"description"`
	// If true, the feature flag is enabled. If false, the feature flag is disabled.
	Enabled *bool `json:"enabled,omitempty"`
}

type _FeatureFlag FeatureFlag

// NewFeatureFlag instantiates a new FeatureFlag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureFlag(name string, description string) *FeatureFlag {
	this := FeatureFlag{}
	this.Name = name
	this.Description = description
	return &this
}

// NewFeatureFlagWithDefaults instantiates a new FeatureFlag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureFlagWithDefaults() *FeatureFlag {
	this := FeatureFlag{}
	return &this
}

// GetName returns the Name field value
func (o *FeatureFlag) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeatureFlag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeatureFlag) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *FeatureFlag) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *FeatureFlag) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FeatureFlag) SetDescription(v string) {
	o.Description = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FeatureFlag) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureFlag) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FeatureFlag) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FeatureFlag) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o FeatureFlag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureFlag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

func (o *FeatureFlag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeatureFlag := _FeatureFlag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeatureFlag)

	if err != nil {
		return err
	}

	*o = FeatureFlag(varFeatureFlag)

	return err
}

type NullableFeatureFlag struct {
	value *FeatureFlag
	isSet bool
}

func (v NullableFeatureFlag) Get() *FeatureFlag {
	return v.value
}

func (v *NullableFeatureFlag) Set(val *FeatureFlag) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureFlag) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureFlag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureFlag(val *FeatureFlag) *NullableFeatureFlag {
	return &NullableFeatureFlag{value: val, isSet: true}
}

func (v NullableFeatureFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureFlag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
