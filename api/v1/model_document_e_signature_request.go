/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DocumentESignatureRequest The request to start a document signing process
type DocumentESignatureRequest struct {
	// The list of signers
	Signers []DocumentSigner `json:"signers,omitempty"`
	// The message to be included in the invitation to the signers
	Message *string `json:"message,omitempty"`
	// The date the document signing request expires
	ExpirationDate *int64 `json:"expiration_date,omitempty"`
	// Whether the document shall be signed using QES
	Qes *bool `json:"qes,omitempty"`
}

// NewDocumentESignatureRequest instantiates a new DocumentESignatureRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentESignatureRequest() *DocumentESignatureRequest {
	this := DocumentESignatureRequest{}
	return &this
}

// NewDocumentESignatureRequestWithDefaults instantiates a new DocumentESignatureRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentESignatureRequestWithDefaults() *DocumentESignatureRequest {
	this := DocumentESignatureRequest{}
	return &this
}

// GetSigners returns the Signers field value if set, zero value otherwise.
func (o *DocumentESignatureRequest) GetSigners() []DocumentSigner {
	if o == nil || o.Signers == nil {
		var ret []DocumentSigner
		return ret
	}
	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureRequest) GetSignersOk() ([]DocumentSigner, bool) {
	if o == nil || o.Signers == nil {
		return nil, false
	}
	return o.Signers, true
}

// HasSigners returns a boolean if a field has been set.
func (o *DocumentESignatureRequest) HasSigners() bool {
	if o != nil && o.Signers != nil {
		return true
	}

	return false
}

// SetSigners gets a reference to the given []DocumentSigner and assigns it to the Signers field.
func (o *DocumentESignatureRequest) SetSigners(v []DocumentSigner) {
	o.Signers = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *DocumentESignatureRequest) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureRequest) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *DocumentESignatureRequest) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *DocumentESignatureRequest) SetMessage(v string) {
	o.Message = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *DocumentESignatureRequest) GetExpirationDate() int64 {
	if o == nil || o.ExpirationDate == nil {
		var ret int64
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureRequest) GetExpirationDateOk() (*int64, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *DocumentESignatureRequest) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given int64 and assigns it to the ExpirationDate field.
func (o *DocumentESignatureRequest) SetExpirationDate(v int64) {
	o.ExpirationDate = &v
}

// GetQes returns the Qes field value if set, zero value otherwise.
func (o *DocumentESignatureRequest) GetQes() bool {
	if o == nil || o.Qes == nil {
		var ret bool
		return ret
	}
	return *o.Qes
}

// GetQesOk returns a tuple with the Qes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentESignatureRequest) GetQesOk() (*bool, bool) {
	if o == nil || o.Qes == nil {
		return nil, false
	}
	return o.Qes, true
}

// HasQes returns a boolean if a field has been set.
func (o *DocumentESignatureRequest) HasQes() bool {
	if o != nil && o.Qes != nil {
		return true
	}

	return false
}

// SetQes gets a reference to the given bool and assigns it to the Qes field.
func (o *DocumentESignatureRequest) SetQes(v bool) {
	o.Qes = &v
}

func (o DocumentESignatureRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Signers != nil {
		toSerialize["signers"] = o.Signers
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.ExpirationDate != nil {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if o.Qes != nil {
		toSerialize["qes"] = o.Qes
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentESignatureRequest struct {
	value *DocumentESignatureRequest
	isSet bool
}

func (v NullableDocumentESignatureRequest) Get() *DocumentESignatureRequest {
	return v.value
}

func (v *NullableDocumentESignatureRequest) Set(val *DocumentESignatureRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentESignatureRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentESignatureRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentESignatureRequest(val *DocumentESignatureRequest) *NullableDocumentESignatureRequest {
	return &NullableDocumentESignatureRequest{value: val, isSet: true}
}

func (v NullableDocumentESignatureRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentESignatureRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
