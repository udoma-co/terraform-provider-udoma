/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AppointmentSlot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppointmentSlot{}

// AppointmentSlot An appointment slot is a time slot within a appointment window that is available for booking.
type AppointmentSlot struct {
	// The timestamp of the beginning of the time slot
	StartTime int64 `json:"start_time"`
	// The timestamp of the end of the time slot
	EndTime     int64        `json:"end_time"`
	Appointment *Appointment `json:"appointment,omitempty"`
}

type _AppointmentSlot AppointmentSlot

// NewAppointmentSlot instantiates a new AppointmentSlot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppointmentSlot(startTime int64, endTime int64) *AppointmentSlot {
	this := AppointmentSlot{}
	this.StartTime = startTime
	this.EndTime = endTime
	return &this
}

// NewAppointmentSlotWithDefaults instantiates a new AppointmentSlot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppointmentSlotWithDefaults() *AppointmentSlot {
	this := AppointmentSlot{}
	return &this
}

// GetStartTime returns the StartTime field value
func (o *AppointmentSlot) GetStartTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *AppointmentSlot) GetStartTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *AppointmentSlot) SetStartTime(v int64) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *AppointmentSlot) GetEndTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *AppointmentSlot) GetEndTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *AppointmentSlot) SetEndTime(v int64) {
	o.EndTime = v
}

// GetAppointment returns the Appointment field value if set, zero value otherwise.
func (o *AppointmentSlot) GetAppointment() Appointment {
	if o == nil || IsNil(o.Appointment) {
		var ret Appointment
		return ret
	}
	return *o.Appointment
}

// GetAppointmentOk returns a tuple with the Appointment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentSlot) GetAppointmentOk() (*Appointment, bool) {
	if o == nil || IsNil(o.Appointment) {
		return nil, false
	}
	return o.Appointment, true
}

// HasAppointment returns a boolean if a field has been set.
func (o *AppointmentSlot) HasAppointment() bool {
	if o != nil && !IsNil(o.Appointment) {
		return true
	}

	return false
}

// SetAppointment gets a reference to the given Appointment and assigns it to the Appointment field.
func (o *AppointmentSlot) SetAppointment(v Appointment) {
	o.Appointment = &v
}

func (o AppointmentSlot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppointmentSlot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start_time"] = o.StartTime
	toSerialize["end_time"] = o.EndTime
	if !IsNil(o.Appointment) {
		toSerialize["appointment"] = o.Appointment
	}
	return toSerialize, nil
}

func (o *AppointmentSlot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"start_time",
		"end_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppointmentSlot := _AppointmentSlot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppointmentSlot)

	if err != nil {
		return err
	}

	*o = AppointmentSlot(varAppointmentSlot)

	return err
}

type NullableAppointmentSlot struct {
	value *AppointmentSlot
	isSet bool
}

func (v NullableAppointmentSlot) Get() *AppointmentSlot {
	return v.value
}

func (v *NullableAppointmentSlot) Set(val *AppointmentSlot) {
	v.value = val
	v.isSet = true
}

func (v NullableAppointmentSlot) IsSet() bool {
	return v.isSet
}

func (v *NullableAppointmentSlot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppointmentSlot(val *AppointmentSlot) *NullableAppointmentSlot {
	return &NullableAppointmentSlot{value: val, isSet: true}
}

func (v NullableAppointmentSlot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppointmentSlot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
