/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// QueryCorrespondenceType the model 'QueryCorrespondenceType'
type QueryCorrespondenceType string

// List of QueryCorrespondenceType
const (
	QUERYCORRESPONDENCETYPE_ALL       QueryCorrespondenceType = "ALL"
	QUERYCORRESPONDENCETYPE_CANCELLED QueryCorrespondenceType = "CANCELLED"
	QUERYCORRESPONDENCETYPE_ACTIVE    QueryCorrespondenceType = "ACTIVE"
)

// All allowed values of QueryCorrespondenceType enum
var AllowedQueryCorrespondenceTypeEnumValues = []QueryCorrespondenceType{
	"ALL",
	"CANCELLED",
	"ACTIVE",
}

func (v *QueryCorrespondenceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryCorrespondenceType(value)
	for _, existing := range AllowedQueryCorrespondenceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryCorrespondenceType", value)
}

// NewQueryCorrespondenceTypeFromValue returns a pointer to a valid QueryCorrespondenceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryCorrespondenceTypeFromValue(v string) (*QueryCorrespondenceType, error) {
	ev := QueryCorrespondenceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryCorrespondenceType: valid values are %v", v, AllowedQueryCorrespondenceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryCorrespondenceType) IsValid() bool {
	for _, existing := range AllowedQueryCorrespondenceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryCorrespondenceType value
func (v QueryCorrespondenceType) Ptr() *QueryCorrespondenceType {
	return &v
}

type NullableQueryCorrespondenceType struct {
	value *QueryCorrespondenceType
	isSet bool
}

func (v NullableQueryCorrespondenceType) Get() *QueryCorrespondenceType {
	return v.value
}

func (v *NullableQueryCorrespondenceType) Set(val *QueryCorrespondenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryCorrespondenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryCorrespondenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryCorrespondenceType(val *QueryCorrespondenceType) *NullableQueryCorrespondenceType {
	return &NullableQueryCorrespondenceType{value: val, isSet: true}
}

func (v NullableQueryCorrespondenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryCorrespondenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
