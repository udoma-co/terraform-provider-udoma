/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// BaseCaseConfig The list of base case configs that can be used to define the behaviour of a case.
type BaseCaseConfig string

// List of BaseCaseConfig
const (
	BASECASECONFIG_DEFAULT BaseCaseConfig = "DEFAULT"
	BASECASECONFIG_SIMPLE  BaseCaseConfig = "SIMPLE"
	BASECASECONFIG_FULL    BaseCaseConfig = "FULL"
)

// All allowed values of BaseCaseConfig enum
var AllowedBaseCaseConfigEnumValues = []BaseCaseConfig{
	"DEFAULT",
	"SIMPLE",
	"FULL",
}

func (v *BaseCaseConfig) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BaseCaseConfig(value)
	for _, existing := range AllowedBaseCaseConfigEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BaseCaseConfig", value)
}

// NewBaseCaseConfigFromValue returns a pointer to a valid BaseCaseConfig
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBaseCaseConfigFromValue(v string) (*BaseCaseConfig, error) {
	ev := BaseCaseConfig(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BaseCaseConfig: valid values are %v", v, AllowedBaseCaseConfigEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BaseCaseConfig) IsValid() bool {
	for _, existing := range AllowedBaseCaseConfigEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BaseCaseConfig value
func (v BaseCaseConfig) Ptr() *BaseCaseConfig {
	return &v
}

type NullableBaseCaseConfig struct {
	value *BaseCaseConfig
	isSet bool
}

func (v NullableBaseCaseConfig) Get() *BaseCaseConfig {
	return v.value
}

func (v *NullableBaseCaseConfig) Set(val *BaseCaseConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseCaseConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseCaseConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseCaseConfig(val *BaseCaseConfig) *NullableBaseCaseConfig {
	return &NullableBaseCaseConfig{value: val, isSet: true}
}

func (v NullableBaseCaseConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseCaseConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
