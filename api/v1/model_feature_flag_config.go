/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FeatureFlagConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureFlagConfig{}

// FeatureFlagConfig A feature configuration object that can be used to enable or disable feature flags.
type FeatureFlagConfig struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The name of the feature flag. This should be a unique identifier for the flag.
	Name string `json:"name"`
	// A description of the feature flag. This should describe what the flag is used for.
	Description string `json:"description"`
	// If true, the feature flag is enabled. If false, the feature flag is disabled.
	Enabled *bool                `json:"enabled,omitempty"`
	Scope   FeatureFlagScopeEnum `json:"scope"`
	// If the scope is not GLOBAL, the reference indicates for which entity the feature is enabled.
	Reference *string `json:"reference,omitempty"`
}

type _FeatureFlagConfig FeatureFlagConfig

// NewFeatureFlagConfig instantiates a new FeatureFlagConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureFlagConfig(id string, name string, description string, scope FeatureFlagScopeEnum) *FeatureFlagConfig {
	this := FeatureFlagConfig{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Scope = scope
	return &this
}

// NewFeatureFlagConfigWithDefaults instantiates a new FeatureFlagConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureFlagConfigWithDefaults() *FeatureFlagConfig {
	this := FeatureFlagConfig{}
	return &this
}

// GetId returns the Id field value
func (o *FeatureFlagConfig) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FeatureFlagConfig) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FeatureFlagConfig) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *FeatureFlagConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeatureFlagConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeatureFlagConfig) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *FeatureFlagConfig) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *FeatureFlagConfig) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FeatureFlagConfig) SetDescription(v string) {
	o.Description = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FeatureFlagConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureFlagConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FeatureFlagConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FeatureFlagConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetScope returns the Scope field value
func (o *FeatureFlagConfig) GetScope() FeatureFlagScopeEnum {
	if o == nil {
		var ret FeatureFlagScopeEnum
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *FeatureFlagConfig) GetScopeOk() (*FeatureFlagScopeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *FeatureFlagConfig) SetScope(v FeatureFlagScopeEnum) {
	o.Scope = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *FeatureFlagConfig) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureFlagConfig) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *FeatureFlagConfig) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *FeatureFlagConfig) SetReference(v string) {
	o.Reference = &v
}

func (o FeatureFlagConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureFlagConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["scope"] = o.Scope
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	return toSerialize, nil
}

func (o *FeatureFlagConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"scope",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeatureFlagConfig := _FeatureFlagConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeatureFlagConfig)

	if err != nil {
		return err
	}

	*o = FeatureFlagConfig(varFeatureFlagConfig)

	return err
}

type NullableFeatureFlagConfig struct {
	value *FeatureFlagConfig
	isSet bool
}

func (v NullableFeatureFlagConfig) Get() *FeatureFlagConfig {
	return v.value
}

func (v *NullableFeatureFlagConfig) Set(val *FeatureFlagConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureFlagConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureFlagConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureFlagConfig(val *FeatureFlagConfig) *NullableFeatureFlagConfig {
	return &NullableFeatureFlagConfig{value: val, isSet: true}
}

func (v NullableFeatureFlagConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureFlagConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
