/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DocumentPlaceholder A placeholder definition for a template
type DocumentPlaceholder struct {
	// The placeholder token itself
	Token *string `json:"token,omitempty"`
	// An optional initial value, either set directly, or computed using the value_expression.
	Value *string `json:"value,omitempty"`
	// An optional JS expression to be used to compute the initial value of the placeholder. This will  be used, if no value is set and will be ignored, if a placeholder is repeated.
	ValueExpression *string `json:"value_expression,omitempty"`
	// True if the placeholder can be set for multiple values, as defined in the repeat_values_expression
	Repeated *bool `json:"repeated,omitempty"`
	// An optional JS expression to be used to compute the tokens of a repeated placeholder.  Must be set, if the placeholder is repeated.
	RepeatTokensExpression *string `json:"repeat_tokens_expression,omitempty"`
	// An optional JS expression to be used to compute the values for the repeated placeholder. If set, must return an array of values.
	RepeatValuesExpression *string `json:"repeat_values_expression,omitempty"`
}

// NewDocumentPlaceholder instantiates a new DocumentPlaceholder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentPlaceholder() *DocumentPlaceholder {
	this := DocumentPlaceholder{}
	return &this
}

// NewDocumentPlaceholderWithDefaults instantiates a new DocumentPlaceholder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentPlaceholderWithDefaults() *DocumentPlaceholder {
	this := DocumentPlaceholder{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *DocumentPlaceholder) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPlaceholder) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *DocumentPlaceholder) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *DocumentPlaceholder) SetToken(v string) {
	o.Token = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DocumentPlaceholder) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPlaceholder) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DocumentPlaceholder) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DocumentPlaceholder) SetValue(v string) {
	o.Value = &v
}

// GetValueExpression returns the ValueExpression field value if set, zero value otherwise.
func (o *DocumentPlaceholder) GetValueExpression() string {
	if o == nil || o.ValueExpression == nil {
		var ret string
		return ret
	}
	return *o.ValueExpression
}

// GetValueExpressionOk returns a tuple with the ValueExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPlaceholder) GetValueExpressionOk() (*string, bool) {
	if o == nil || o.ValueExpression == nil {
		return nil, false
	}
	return o.ValueExpression, true
}

// HasValueExpression returns a boolean if a field has been set.
func (o *DocumentPlaceholder) HasValueExpression() bool {
	if o != nil && o.ValueExpression != nil {
		return true
	}

	return false
}

// SetValueExpression gets a reference to the given string and assigns it to the ValueExpression field.
func (o *DocumentPlaceholder) SetValueExpression(v string) {
	o.ValueExpression = &v
}

// GetRepeated returns the Repeated field value if set, zero value otherwise.
func (o *DocumentPlaceholder) GetRepeated() bool {
	if o == nil || o.Repeated == nil {
		var ret bool
		return ret
	}
	return *o.Repeated
}

// GetRepeatedOk returns a tuple with the Repeated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPlaceholder) GetRepeatedOk() (*bool, bool) {
	if o == nil || o.Repeated == nil {
		return nil, false
	}
	return o.Repeated, true
}

// HasRepeated returns a boolean if a field has been set.
func (o *DocumentPlaceholder) HasRepeated() bool {
	if o != nil && o.Repeated != nil {
		return true
	}

	return false
}

// SetRepeated gets a reference to the given bool and assigns it to the Repeated field.
func (o *DocumentPlaceholder) SetRepeated(v bool) {
	o.Repeated = &v
}

// GetRepeatTokensExpression returns the RepeatTokensExpression field value if set, zero value otherwise.
func (o *DocumentPlaceholder) GetRepeatTokensExpression() string {
	if o == nil || o.RepeatTokensExpression == nil {
		var ret string
		return ret
	}
	return *o.RepeatTokensExpression
}

// GetRepeatTokensExpressionOk returns a tuple with the RepeatTokensExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPlaceholder) GetRepeatTokensExpressionOk() (*string, bool) {
	if o == nil || o.RepeatTokensExpression == nil {
		return nil, false
	}
	return o.RepeatTokensExpression, true
}

// HasRepeatTokensExpression returns a boolean if a field has been set.
func (o *DocumentPlaceholder) HasRepeatTokensExpression() bool {
	if o != nil && o.RepeatTokensExpression != nil {
		return true
	}

	return false
}

// SetRepeatTokensExpression gets a reference to the given string and assigns it to the RepeatTokensExpression field.
func (o *DocumentPlaceholder) SetRepeatTokensExpression(v string) {
	o.RepeatTokensExpression = &v
}

// GetRepeatValuesExpression returns the RepeatValuesExpression field value if set, zero value otherwise.
func (o *DocumentPlaceholder) GetRepeatValuesExpression() string {
	if o == nil || o.RepeatValuesExpression == nil {
		var ret string
		return ret
	}
	return *o.RepeatValuesExpression
}

// GetRepeatValuesExpressionOk returns a tuple with the RepeatValuesExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPlaceholder) GetRepeatValuesExpressionOk() (*string, bool) {
	if o == nil || o.RepeatValuesExpression == nil {
		return nil, false
	}
	return o.RepeatValuesExpression, true
}

// HasRepeatValuesExpression returns a boolean if a field has been set.
func (o *DocumentPlaceholder) HasRepeatValuesExpression() bool {
	if o != nil && o.RepeatValuesExpression != nil {
		return true
	}

	return false
}

// SetRepeatValuesExpression gets a reference to the given string and assigns it to the RepeatValuesExpression field.
func (o *DocumentPlaceholder) SetRepeatValuesExpression(v string) {
	o.RepeatValuesExpression = &v
}

func (o DocumentPlaceholder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueExpression != nil {
		toSerialize["value_expression"] = o.ValueExpression
	}
	if o.Repeated != nil {
		toSerialize["repeated"] = o.Repeated
	}
	if o.RepeatTokensExpression != nil {
		toSerialize["repeat_tokens_expression"] = o.RepeatTokensExpression
	}
	if o.RepeatValuesExpression != nil {
		toSerialize["repeat_values_expression"] = o.RepeatValuesExpression
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentPlaceholder struct {
	value *DocumentPlaceholder
	isSet bool
}

func (v NullableDocumentPlaceholder) Get() *DocumentPlaceholder {
	return v.value
}

func (v *NullableDocumentPlaceholder) Set(val *DocumentPlaceholder) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentPlaceholder) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentPlaceholder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentPlaceholder(val *DocumentPlaceholder) *NullableDocumentPlaceholder {
	return &NullableDocumentPlaceholder{value: val, isSet: true}
}

func (v NullableDocumentPlaceholder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentPlaceholder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
