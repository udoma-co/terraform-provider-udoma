/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ReportDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportDefinition{}

// ReportDefinition struct for ReportDefinition
type ReportDefinition struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The name of the report
	Name string `json:"name"`
	// The description of the report
	Description  *string            `json:"description,omitempty"`
	ResultSchema ReportResultSchema `json:"result_schema"`
	// The JS script to execute to map the result to the result schema
	ResultMapper string             `json:"result_mapper"`
	Parameters   NullableCustomForm `json:"parameters,omitempty"`
	// The JS script to execute to generate the report result
	Script string `json:"script"`
}

type _ReportDefinition ReportDefinition

// NewReportDefinition instantiates a new ReportDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportDefinition(id string, name string, resultSchema ReportResultSchema, resultMapper string, script string) *ReportDefinition {
	this := ReportDefinition{}
	this.Id = id
	this.Name = name
	this.ResultSchema = resultSchema
	this.ResultMapper = resultMapper
	this.Script = script
	return &this
}

// NewReportDefinitionWithDefaults instantiates a new ReportDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportDefinitionWithDefaults() *ReportDefinition {
	this := ReportDefinition{}
	return &this
}

// GetId returns the Id field value
func (o *ReportDefinition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReportDefinition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReportDefinition) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ReportDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReportDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReportDefinition) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReportDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReportDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReportDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetResultSchema returns the ResultSchema field value
func (o *ReportDefinition) GetResultSchema() ReportResultSchema {
	if o == nil {
		var ret ReportResultSchema
		return ret
	}

	return o.ResultSchema
}

// GetResultSchemaOk returns a tuple with the ResultSchema field value
// and a boolean to check if the value has been set.
func (o *ReportDefinition) GetResultSchemaOk() (*ReportResultSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultSchema, true
}

// SetResultSchema sets field value
func (o *ReportDefinition) SetResultSchema(v ReportResultSchema) {
	o.ResultSchema = v
}

// GetResultMapper returns the ResultMapper field value
func (o *ReportDefinition) GetResultMapper() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultMapper
}

// GetResultMapperOk returns a tuple with the ResultMapper field value
// and a boolean to check if the value has been set.
func (o *ReportDefinition) GetResultMapperOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultMapper, true
}

// SetResultMapper sets field value
func (o *ReportDefinition) SetResultMapper(v string) {
	o.ResultMapper = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReportDefinition) GetParameters() CustomForm {
	if o == nil || IsNil(o.Parameters.Get()) {
		var ret CustomForm
		return ret
	}
	return *o.Parameters.Get()
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportDefinition) GetParametersOk() (*CustomForm, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parameters.Get(), o.Parameters.IsSet()
}

// HasParameters returns a boolean if a field has been set.
func (o *ReportDefinition) HasParameters() bool {
	if o != nil && o.Parameters.IsSet() {
		return true
	}

	return false
}

// SetParameters gets a reference to the given NullableCustomForm and assigns it to the Parameters field.
func (o *ReportDefinition) SetParameters(v CustomForm) {
	o.Parameters.Set(&v)
}

// SetParametersNil sets the value for Parameters to be an explicit nil
func (o *ReportDefinition) SetParametersNil() {
	o.Parameters.Set(nil)
}

// UnsetParameters ensures that no value is present for Parameters, not even an explicit nil
func (o *ReportDefinition) UnsetParameters() {
	o.Parameters.Unset()
}

// GetScript returns the Script field value
func (o *ReportDefinition) GetScript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Script
}

// GetScriptOk returns a tuple with the Script field value
// and a boolean to check if the value has been set.
func (o *ReportDefinition) GetScriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Script, true
}

// SetScript sets field value
func (o *ReportDefinition) SetScript(v string) {
	o.Script = v
}

func (o ReportDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["result_schema"] = o.ResultSchema
	toSerialize["result_mapper"] = o.ResultMapper
	if o.Parameters.IsSet() {
		toSerialize["parameters"] = o.Parameters.Get()
	}
	toSerialize["script"] = o.Script
	return toSerialize, nil
}

func (o *ReportDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"result_schema",
		"result_mapper",
		"script",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportDefinition := _ReportDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportDefinition)

	if err != nil {
		return err
	}

	*o = ReportDefinition(varReportDefinition)

	return err
}

type NullableReportDefinition struct {
	value *ReportDefinition
	isSet bool
}

func (v NullableReportDefinition) Get() *ReportDefinition {
	return v.value
}

func (v *NullableReportDefinition) Set(val *ReportDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableReportDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableReportDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportDefinition(val *ReportDefinition) *NullableReportDefinition {
	return &NullableReportDefinition{value: val, isSet: true}
}

func (v NullableReportDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
