/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// TenantsAdditionalInfo Additional information about future tenantes, collected via public form
type TenantsAdditionalInfo struct {
	// has one of the tenants have any rent arrears from previous tenancies
	RentArrears        *bool         `json:"rent_arrears,omitempty"`
	Eviction           *YesNoOrValue `json:"eviction,omitempty"`
	Foreclosure        *YesNoOrValue `json:"foreclosure,omitempty"`
	Affidavit          *YesNoOrValue `json:"affidavit,omitempty"`
	Bankruptcy         *YesNoOrValue `json:"bankruptcy,omitempty"`
	CriminalRecord     *YesNoOrValue `json:"criminal_record,omitempty"`
	SocialBenefits     *YesNoOrValue `json:"social_benefits,omitempty"`
	CommercialUse      *YesNoOrValue `json:"commercial_use,omitempty"`
	Subletting         *YesNoOrValue `json:"subletting,omitempty"`
	MusicalInstruments *YesNoOrValue `json:"musical_instruments,omitempty"`
	Pets               *YesNoOrValue `json:"pets,omitempty"`
}

// NewTenantsAdditionalInfo instantiates a new TenantsAdditionalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantsAdditionalInfo() *TenantsAdditionalInfo {
	this := TenantsAdditionalInfo{}
	return &this
}

// NewTenantsAdditionalInfoWithDefaults instantiates a new TenantsAdditionalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantsAdditionalInfoWithDefaults() *TenantsAdditionalInfo {
	this := TenantsAdditionalInfo{}
	return &this
}

// GetRentArrears returns the RentArrears field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetRentArrears() bool {
	if o == nil || o.RentArrears == nil {
		var ret bool
		return ret
	}
	return *o.RentArrears
}

// GetRentArrearsOk returns a tuple with the RentArrears field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetRentArrearsOk() (*bool, bool) {
	if o == nil || o.RentArrears == nil {
		return nil, false
	}
	return o.RentArrears, true
}

// HasRentArrears returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasRentArrears() bool {
	if o != nil && o.RentArrears != nil {
		return true
	}

	return false
}

// SetRentArrears gets a reference to the given bool and assigns it to the RentArrears field.
func (o *TenantsAdditionalInfo) SetRentArrears(v bool) {
	o.RentArrears = &v
}

// GetEviction returns the Eviction field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetEviction() YesNoOrValue {
	if o == nil || o.Eviction == nil {
		var ret YesNoOrValue
		return ret
	}
	return *o.Eviction
}

// GetEvictionOk returns a tuple with the Eviction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetEvictionOk() (*YesNoOrValue, bool) {
	if o == nil || o.Eviction == nil {
		return nil, false
	}
	return o.Eviction, true
}

// HasEviction returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasEviction() bool {
	if o != nil && o.Eviction != nil {
		return true
	}

	return false
}

// SetEviction gets a reference to the given YesNoOrValue and assigns it to the Eviction field.
func (o *TenantsAdditionalInfo) SetEviction(v YesNoOrValue) {
	o.Eviction = &v
}

// GetForeclosure returns the Foreclosure field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetForeclosure() YesNoOrValue {
	if o == nil || o.Foreclosure == nil {
		var ret YesNoOrValue
		return ret
	}
	return *o.Foreclosure
}

// GetForeclosureOk returns a tuple with the Foreclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetForeclosureOk() (*YesNoOrValue, bool) {
	if o == nil || o.Foreclosure == nil {
		return nil, false
	}
	return o.Foreclosure, true
}

// HasForeclosure returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasForeclosure() bool {
	if o != nil && o.Foreclosure != nil {
		return true
	}

	return false
}

// SetForeclosure gets a reference to the given YesNoOrValue and assigns it to the Foreclosure field.
func (o *TenantsAdditionalInfo) SetForeclosure(v YesNoOrValue) {
	o.Foreclosure = &v
}

// GetAffidavit returns the Affidavit field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetAffidavit() YesNoOrValue {
	if o == nil || o.Affidavit == nil {
		var ret YesNoOrValue
		return ret
	}
	return *o.Affidavit
}

// GetAffidavitOk returns a tuple with the Affidavit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetAffidavitOk() (*YesNoOrValue, bool) {
	if o == nil || o.Affidavit == nil {
		return nil, false
	}
	return o.Affidavit, true
}

// HasAffidavit returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasAffidavit() bool {
	if o != nil && o.Affidavit != nil {
		return true
	}

	return false
}

// SetAffidavit gets a reference to the given YesNoOrValue and assigns it to the Affidavit field.
func (o *TenantsAdditionalInfo) SetAffidavit(v YesNoOrValue) {
	o.Affidavit = &v
}

// GetBankruptcy returns the Bankruptcy field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetBankruptcy() YesNoOrValue {
	if o == nil || o.Bankruptcy == nil {
		var ret YesNoOrValue
		return ret
	}
	return *o.Bankruptcy
}

// GetBankruptcyOk returns a tuple with the Bankruptcy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetBankruptcyOk() (*YesNoOrValue, bool) {
	if o == nil || o.Bankruptcy == nil {
		return nil, false
	}
	return o.Bankruptcy, true
}

// HasBankruptcy returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasBankruptcy() bool {
	if o != nil && o.Bankruptcy != nil {
		return true
	}

	return false
}

// SetBankruptcy gets a reference to the given YesNoOrValue and assigns it to the Bankruptcy field.
func (o *TenantsAdditionalInfo) SetBankruptcy(v YesNoOrValue) {
	o.Bankruptcy = &v
}

// GetCriminalRecord returns the CriminalRecord field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetCriminalRecord() YesNoOrValue {
	if o == nil || o.CriminalRecord == nil {
		var ret YesNoOrValue
		return ret
	}
	return *o.CriminalRecord
}

// GetCriminalRecordOk returns a tuple with the CriminalRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetCriminalRecordOk() (*YesNoOrValue, bool) {
	if o == nil || o.CriminalRecord == nil {
		return nil, false
	}
	return o.CriminalRecord, true
}

// HasCriminalRecord returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasCriminalRecord() bool {
	if o != nil && o.CriminalRecord != nil {
		return true
	}

	return false
}

// SetCriminalRecord gets a reference to the given YesNoOrValue and assigns it to the CriminalRecord field.
func (o *TenantsAdditionalInfo) SetCriminalRecord(v YesNoOrValue) {
	o.CriminalRecord = &v
}

// GetSocialBenefits returns the SocialBenefits field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetSocialBenefits() YesNoOrValue {
	if o == nil || o.SocialBenefits == nil {
		var ret YesNoOrValue
		return ret
	}
	return *o.SocialBenefits
}

// GetSocialBenefitsOk returns a tuple with the SocialBenefits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetSocialBenefitsOk() (*YesNoOrValue, bool) {
	if o == nil || o.SocialBenefits == nil {
		return nil, false
	}
	return o.SocialBenefits, true
}

// HasSocialBenefits returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasSocialBenefits() bool {
	if o != nil && o.SocialBenefits != nil {
		return true
	}

	return false
}

// SetSocialBenefits gets a reference to the given YesNoOrValue and assigns it to the SocialBenefits field.
func (o *TenantsAdditionalInfo) SetSocialBenefits(v YesNoOrValue) {
	o.SocialBenefits = &v
}

// GetCommercialUse returns the CommercialUse field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetCommercialUse() YesNoOrValue {
	if o == nil || o.CommercialUse == nil {
		var ret YesNoOrValue
		return ret
	}
	return *o.CommercialUse
}

// GetCommercialUseOk returns a tuple with the CommercialUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetCommercialUseOk() (*YesNoOrValue, bool) {
	if o == nil || o.CommercialUse == nil {
		return nil, false
	}
	return o.CommercialUse, true
}

// HasCommercialUse returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasCommercialUse() bool {
	if o != nil && o.CommercialUse != nil {
		return true
	}

	return false
}

// SetCommercialUse gets a reference to the given YesNoOrValue and assigns it to the CommercialUse field.
func (o *TenantsAdditionalInfo) SetCommercialUse(v YesNoOrValue) {
	o.CommercialUse = &v
}

// GetSubletting returns the Subletting field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetSubletting() YesNoOrValue {
	if o == nil || o.Subletting == nil {
		var ret YesNoOrValue
		return ret
	}
	return *o.Subletting
}

// GetSublettingOk returns a tuple with the Subletting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetSublettingOk() (*YesNoOrValue, bool) {
	if o == nil || o.Subletting == nil {
		return nil, false
	}
	return o.Subletting, true
}

// HasSubletting returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasSubletting() bool {
	if o != nil && o.Subletting != nil {
		return true
	}

	return false
}

// SetSubletting gets a reference to the given YesNoOrValue and assigns it to the Subletting field.
func (o *TenantsAdditionalInfo) SetSubletting(v YesNoOrValue) {
	o.Subletting = &v
}

// GetMusicalInstruments returns the MusicalInstruments field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetMusicalInstruments() YesNoOrValue {
	if o == nil || o.MusicalInstruments == nil {
		var ret YesNoOrValue
		return ret
	}
	return *o.MusicalInstruments
}

// GetMusicalInstrumentsOk returns a tuple with the MusicalInstruments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetMusicalInstrumentsOk() (*YesNoOrValue, bool) {
	if o == nil || o.MusicalInstruments == nil {
		return nil, false
	}
	return o.MusicalInstruments, true
}

// HasMusicalInstruments returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasMusicalInstruments() bool {
	if o != nil && o.MusicalInstruments != nil {
		return true
	}

	return false
}

// SetMusicalInstruments gets a reference to the given YesNoOrValue and assigns it to the MusicalInstruments field.
func (o *TenantsAdditionalInfo) SetMusicalInstruments(v YesNoOrValue) {
	o.MusicalInstruments = &v
}

// GetPets returns the Pets field value if set, zero value otherwise.
func (o *TenantsAdditionalInfo) GetPets() YesNoOrValue {
	if o == nil || o.Pets == nil {
		var ret YesNoOrValue
		return ret
	}
	return *o.Pets
}

// GetPetsOk returns a tuple with the Pets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAdditionalInfo) GetPetsOk() (*YesNoOrValue, bool) {
	if o == nil || o.Pets == nil {
		return nil, false
	}
	return o.Pets, true
}

// HasPets returns a boolean if a field has been set.
func (o *TenantsAdditionalInfo) HasPets() bool {
	if o != nil && o.Pets != nil {
		return true
	}

	return false
}

// SetPets gets a reference to the given YesNoOrValue and assigns it to the Pets field.
func (o *TenantsAdditionalInfo) SetPets(v YesNoOrValue) {
	o.Pets = &v
}

func (o TenantsAdditionalInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RentArrears != nil {
		toSerialize["rent_arrears"] = o.RentArrears
	}
	if o.Eviction != nil {
		toSerialize["eviction"] = o.Eviction
	}
	if o.Foreclosure != nil {
		toSerialize["foreclosure"] = o.Foreclosure
	}
	if o.Affidavit != nil {
		toSerialize["affidavit"] = o.Affidavit
	}
	if o.Bankruptcy != nil {
		toSerialize["bankruptcy"] = o.Bankruptcy
	}
	if o.CriminalRecord != nil {
		toSerialize["criminal_record"] = o.CriminalRecord
	}
	if o.SocialBenefits != nil {
		toSerialize["social_benefits"] = o.SocialBenefits
	}
	if o.CommercialUse != nil {
		toSerialize["commercial_use"] = o.CommercialUse
	}
	if o.Subletting != nil {
		toSerialize["subletting"] = o.Subletting
	}
	if o.MusicalInstruments != nil {
		toSerialize["musical_instruments"] = o.MusicalInstruments
	}
	if o.Pets != nil {
		toSerialize["pets"] = o.Pets
	}
	return json.Marshal(toSerialize)
}

type NullableTenantsAdditionalInfo struct {
	value *TenantsAdditionalInfo
	isSet bool
}

func (v NullableTenantsAdditionalInfo) Get() *TenantsAdditionalInfo {
	return v.value
}

func (v *NullableTenantsAdditionalInfo) Set(val *TenantsAdditionalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantsAdditionalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantsAdditionalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantsAdditionalInfo(val *TenantsAdditionalInfo) *NullableTenantsAdditionalInfo {
	return &NullableTenantsAdditionalInfo{value: val, isSet: true}
}

func (v NullableTenantsAdditionalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantsAdditionalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
