/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the CaseReminderConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseReminderConfig{}

// CaseReminderConfig Defines the configuration for sending out reminders for a case.
type CaseReminderConfig struct {
	Status *CaseStatusEnum `json:"status,omitempty"`
	// The number of days after which a reminder should be sent out. The list is  taken as provided and a reminder will be set for the amount of days as set in the first element of the list. Once that time has passed, the reminder will be rescheduled for the next element in the list. This is repeated until the list is empty. The values in the list are considered relative to the previous reminder. So [2, 2] will send out a reminder after 2 and 4 days. The reminders will, however, not be sent out on weekends. So if the first reminder is sent out on a Friday, the second reminder will be sent out on Tuesday. All reminders are reset, whenever the case is updated.
	Schedule []int32 `json:"schedule,omitempty"`
}

// NewCaseReminderConfig instantiates a new CaseReminderConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseReminderConfig() *CaseReminderConfig {
	this := CaseReminderConfig{}
	return &this
}

// NewCaseReminderConfigWithDefaults instantiates a new CaseReminderConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseReminderConfigWithDefaults() *CaseReminderConfig {
	this := CaseReminderConfig{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CaseReminderConfig) GetStatus() CaseStatusEnum {
	if o == nil || IsNil(o.Status) {
		var ret CaseStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseReminderConfig) GetStatusOk() (*CaseStatusEnum, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CaseReminderConfig) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CaseStatusEnum and assigns it to the Status field.
func (o *CaseReminderConfig) SetStatus(v CaseStatusEnum) {
	o.Status = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *CaseReminderConfig) GetSchedule() []int32 {
	if o == nil || IsNil(o.Schedule) {
		var ret []int32
		return ret
	}
	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseReminderConfig) GetScheduleOk() ([]int32, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *CaseReminderConfig) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given []int32 and assigns it to the Schedule field.
func (o *CaseReminderConfig) SetSchedule(v []int32) {
	o.Schedule = v
}

func (o CaseReminderConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseReminderConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	return toSerialize, nil
}

type NullableCaseReminderConfig struct {
	value *CaseReminderConfig
	isSet bool
}

func (v NullableCaseReminderConfig) Get() *CaseReminderConfig {
	return v.value
}

func (v *NullableCaseReminderConfig) Set(val *CaseReminderConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseReminderConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseReminderConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseReminderConfig(val *CaseReminderConfig) *NullableCaseReminderConfig {
	return &NullableCaseReminderConfig{value: val, isSet: true}
}

func (v NullableCaseReminderConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseReminderConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
