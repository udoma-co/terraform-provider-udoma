/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the LogRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogRequest{}

// LogRequest Log messages, comming from the connector.
type LogRequest struct {
	// An array of messages to log.
	Logs []string `json:"logs,omitempty"`
}

// NewLogRequest instantiates a new LogRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogRequest() *LogRequest {
	this := LogRequest{}
	return &this
}

// NewLogRequestWithDefaults instantiates a new LogRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogRequestWithDefaults() *LogRequest {
	this := LogRequest{}
	return &this
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *LogRequest) GetLogs() []string {
	if o == nil || IsNil(o.Logs) {
		var ret []string
		return ret
	}
	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRequest) GetLogsOk() ([]string, bool) {
	if o == nil || IsNil(o.Logs) {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *LogRequest) HasLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given []string and assigns it to the Logs field.
func (o *LogRequest) SetLogs(v []string) {
	o.Logs = v
}

func (o LogRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	return toSerialize, nil
}

type NullableLogRequest struct {
	value *LogRequest
	isSet bool
}

func (v NullableLogRequest) Get() *LogRequest {
	return v.value
}

func (v *NullableLogRequest) Set(val *LogRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLogRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLogRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogRequest(val *LogRequest) *NullableLogRequest {
	return &NullableLogRequest{value: val, isSet: true}
}

func (v NullableLogRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
