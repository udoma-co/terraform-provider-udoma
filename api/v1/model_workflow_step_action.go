/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// WorkflowStepAction an action that can be performed on a workflow step
type WorkflowStepAction struct {
	// the ID of the action
	Id *string `json:"id,omitempty"`
	// the icon of the action
	Icon *string `json:"icon,omitempty"`
	// the button label for the action
	Label *string `json:"label,omitempty"`
	// optional button modifier of the action
	ButtonModifier *string `json:"button_modifier,omitempty"`
	// optional filter that can be used by the UI to show or hide the action
	UiFilter *string `json:"ui_filter,omitempty"`
	// a parameter of a workflow step or step action. The value of the parameter is contextual and can vary in type and meaning depending on the step or action that uses it. If used in a step, the parameter will be available in the UI and will not be interpreted, i.e. JS expressions are not allowed. In actions however, the parameter might be interpreted as a JS expression, if the action type requires it.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// An optional JS expression that determines whether the action can be executed or  not. If not set, this will default to true.
	CanBeExecutedExpression *string `json:"can_be_executed_expression,omitempty"`
	// the ID of the next step of the workflow
	NextStepId *string `json:"next_step_id,omitempty"`
	// Optional JS expression that will be executed before any step- and action-specific logic is executed.
	ExecBefore *string `json:"execBefore,omitempty"`
	// Optional JS expression that will be executed after the step- and action-specific logic is executed.
	ExecAfter *string `json:"execAfter,omitempty"`
	// optional ID of a workflow definition that should be executed
	StartChildWorkflow *string `json:"start_child_workflow,omitempty"`
	// An optional JS expression that returns an array of entities. For each entity, a new workflow execution will be started. The entity will be available as a parameter `iterator` in the child execution context expression.
	ChildExecutionIteratorExpression *string `json:"child_execution_iterator_expression,omitempty"`
	// An optional JS expression that determines the context of the child workflow execution. If not set, the context of the parent workflow execution will be used.
	ChildExecutionContextExpression *string `json:"child_execution_context_expression,omitempty"`
}

// NewWorkflowStepAction instantiates a new WorkflowStepAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowStepAction() *WorkflowStepAction {
	this := WorkflowStepAction{}
	return &this
}

// NewWorkflowStepActionWithDefaults instantiates a new WorkflowStepAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowStepActionWithDefaults() *WorkflowStepAction {
	this := WorkflowStepAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowStepAction) SetId(v string) {
	o.Id = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetIcon() string {
	if o == nil || o.Icon == nil {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetIconOk() (*string, bool) {
	if o == nil || o.Icon == nil {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasIcon() bool {
	if o != nil && o.Icon != nil {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *WorkflowStepAction) SetIcon(v string) {
	o.Icon = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *WorkflowStepAction) SetLabel(v string) {
	o.Label = &v
}

// GetButtonModifier returns the ButtonModifier field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetButtonModifier() string {
	if o == nil || o.ButtonModifier == nil {
		var ret string
		return ret
	}
	return *o.ButtonModifier
}

// GetButtonModifierOk returns a tuple with the ButtonModifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetButtonModifierOk() (*string, bool) {
	if o == nil || o.ButtonModifier == nil {
		return nil, false
	}
	return o.ButtonModifier, true
}

// HasButtonModifier returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasButtonModifier() bool {
	if o != nil && o.ButtonModifier != nil {
		return true
	}

	return false
}

// SetButtonModifier gets a reference to the given string and assigns it to the ButtonModifier field.
func (o *WorkflowStepAction) SetButtonModifier(v string) {
	o.ButtonModifier = &v
}

// GetUiFilter returns the UiFilter field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetUiFilter() string {
	if o == nil || o.UiFilter == nil {
		var ret string
		return ret
	}
	return *o.UiFilter
}

// GetUiFilterOk returns a tuple with the UiFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetUiFilterOk() (*string, bool) {
	if o == nil || o.UiFilter == nil {
		return nil, false
	}
	return o.UiFilter, true
}

// HasUiFilter returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasUiFilter() bool {
	if o != nil && o.UiFilter != nil {
		return true
	}

	return false
}

// SetUiFilter gets a reference to the given string and assigns it to the UiFilter field.
func (o *WorkflowStepAction) SetUiFilter(v string) {
	o.UiFilter = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetParameters() map[string]interface{} {
	if o == nil || o.Parameters == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *WorkflowStepAction) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetCanBeExecutedExpression returns the CanBeExecutedExpression field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetCanBeExecutedExpression() string {
	if o == nil || o.CanBeExecutedExpression == nil {
		var ret string
		return ret
	}
	return *o.CanBeExecutedExpression
}

// GetCanBeExecutedExpressionOk returns a tuple with the CanBeExecutedExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetCanBeExecutedExpressionOk() (*string, bool) {
	if o == nil || o.CanBeExecutedExpression == nil {
		return nil, false
	}
	return o.CanBeExecutedExpression, true
}

// HasCanBeExecutedExpression returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasCanBeExecutedExpression() bool {
	if o != nil && o.CanBeExecutedExpression != nil {
		return true
	}

	return false
}

// SetCanBeExecutedExpression gets a reference to the given string and assigns it to the CanBeExecutedExpression field.
func (o *WorkflowStepAction) SetCanBeExecutedExpression(v string) {
	o.CanBeExecutedExpression = &v
}

// GetNextStepId returns the NextStepId field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetNextStepId() string {
	if o == nil || o.NextStepId == nil {
		var ret string
		return ret
	}
	return *o.NextStepId
}

// GetNextStepIdOk returns a tuple with the NextStepId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetNextStepIdOk() (*string, bool) {
	if o == nil || o.NextStepId == nil {
		return nil, false
	}
	return o.NextStepId, true
}

// HasNextStepId returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasNextStepId() bool {
	if o != nil && o.NextStepId != nil {
		return true
	}

	return false
}

// SetNextStepId gets a reference to the given string and assigns it to the NextStepId field.
func (o *WorkflowStepAction) SetNextStepId(v string) {
	o.NextStepId = &v
}

// GetExecBefore returns the ExecBefore field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetExecBefore() string {
	if o == nil || o.ExecBefore == nil {
		var ret string
		return ret
	}
	return *o.ExecBefore
}

// GetExecBeforeOk returns a tuple with the ExecBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetExecBeforeOk() (*string, bool) {
	if o == nil || o.ExecBefore == nil {
		return nil, false
	}
	return o.ExecBefore, true
}

// HasExecBefore returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasExecBefore() bool {
	if o != nil && o.ExecBefore != nil {
		return true
	}

	return false
}

// SetExecBefore gets a reference to the given string and assigns it to the ExecBefore field.
func (o *WorkflowStepAction) SetExecBefore(v string) {
	o.ExecBefore = &v
}

// GetExecAfter returns the ExecAfter field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetExecAfter() string {
	if o == nil || o.ExecAfter == nil {
		var ret string
		return ret
	}
	return *o.ExecAfter
}

// GetExecAfterOk returns a tuple with the ExecAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetExecAfterOk() (*string, bool) {
	if o == nil || o.ExecAfter == nil {
		return nil, false
	}
	return o.ExecAfter, true
}

// HasExecAfter returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasExecAfter() bool {
	if o != nil && o.ExecAfter != nil {
		return true
	}

	return false
}

// SetExecAfter gets a reference to the given string and assigns it to the ExecAfter field.
func (o *WorkflowStepAction) SetExecAfter(v string) {
	o.ExecAfter = &v
}

// GetStartChildWorkflow returns the StartChildWorkflow field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetStartChildWorkflow() string {
	if o == nil || o.StartChildWorkflow == nil {
		var ret string
		return ret
	}
	return *o.StartChildWorkflow
}

// GetStartChildWorkflowOk returns a tuple with the StartChildWorkflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetStartChildWorkflowOk() (*string, bool) {
	if o == nil || o.StartChildWorkflow == nil {
		return nil, false
	}
	return o.StartChildWorkflow, true
}

// HasStartChildWorkflow returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasStartChildWorkflow() bool {
	if o != nil && o.StartChildWorkflow != nil {
		return true
	}

	return false
}

// SetStartChildWorkflow gets a reference to the given string and assigns it to the StartChildWorkflow field.
func (o *WorkflowStepAction) SetStartChildWorkflow(v string) {
	o.StartChildWorkflow = &v
}

// GetChildExecutionIteratorExpression returns the ChildExecutionIteratorExpression field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetChildExecutionIteratorExpression() string {
	if o == nil || o.ChildExecutionIteratorExpression == nil {
		var ret string
		return ret
	}
	return *o.ChildExecutionIteratorExpression
}

// GetChildExecutionIteratorExpressionOk returns a tuple with the ChildExecutionIteratorExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetChildExecutionIteratorExpressionOk() (*string, bool) {
	if o == nil || o.ChildExecutionIteratorExpression == nil {
		return nil, false
	}
	return o.ChildExecutionIteratorExpression, true
}

// HasChildExecutionIteratorExpression returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasChildExecutionIteratorExpression() bool {
	if o != nil && o.ChildExecutionIteratorExpression != nil {
		return true
	}

	return false
}

// SetChildExecutionIteratorExpression gets a reference to the given string and assigns it to the ChildExecutionIteratorExpression field.
func (o *WorkflowStepAction) SetChildExecutionIteratorExpression(v string) {
	o.ChildExecutionIteratorExpression = &v
}

// GetChildExecutionContextExpression returns the ChildExecutionContextExpression field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetChildExecutionContextExpression() string {
	if o == nil || o.ChildExecutionContextExpression == nil {
		var ret string
		return ret
	}
	return *o.ChildExecutionContextExpression
}

// GetChildExecutionContextExpressionOk returns a tuple with the ChildExecutionContextExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetChildExecutionContextExpressionOk() (*string, bool) {
	if o == nil || o.ChildExecutionContextExpression == nil {
		return nil, false
	}
	return o.ChildExecutionContextExpression, true
}

// HasChildExecutionContextExpression returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasChildExecutionContextExpression() bool {
	if o != nil && o.ChildExecutionContextExpression != nil {
		return true
	}

	return false
}

// SetChildExecutionContextExpression gets a reference to the given string and assigns it to the ChildExecutionContextExpression field.
func (o *WorkflowStepAction) SetChildExecutionContextExpression(v string) {
	o.ChildExecutionContextExpression = &v
}

func (o WorkflowStepAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Icon != nil {
		toSerialize["icon"] = o.Icon
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.ButtonModifier != nil {
		toSerialize["button_modifier"] = o.ButtonModifier
	}
	if o.UiFilter != nil {
		toSerialize["ui_filter"] = o.UiFilter
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.CanBeExecutedExpression != nil {
		toSerialize["can_be_executed_expression"] = o.CanBeExecutedExpression
	}
	if o.NextStepId != nil {
		toSerialize["next_step_id"] = o.NextStepId
	}
	if o.ExecBefore != nil {
		toSerialize["execBefore"] = o.ExecBefore
	}
	if o.ExecAfter != nil {
		toSerialize["execAfter"] = o.ExecAfter
	}
	if o.StartChildWorkflow != nil {
		toSerialize["start_child_workflow"] = o.StartChildWorkflow
	}
	if o.ChildExecutionIteratorExpression != nil {
		toSerialize["child_execution_iterator_expression"] = o.ChildExecutionIteratorExpression
	}
	if o.ChildExecutionContextExpression != nil {
		toSerialize["child_execution_context_expression"] = o.ChildExecutionContextExpression
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowStepAction struct {
	value *WorkflowStepAction
	isSet bool
}

func (v NullableWorkflowStepAction) Get() *WorkflowStepAction {
	return v.value
}

func (v *NullableWorkflowStepAction) Set(val *WorkflowStepAction) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowStepAction) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowStepAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowStepAction(val *WorkflowStepAction) *NullableWorkflowStepAction {
	return &NullableWorkflowStepAction{value: val, isSet: true}
}

func (v NullableWorkflowStepAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowStepAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
