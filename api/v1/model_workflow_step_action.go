/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the WorkflowStepAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowStepAction{}

// WorkflowStepAction an action that can be performed on a workflow execution step. This is derived from the step action definition, however, dynamic data is computed and populated by the backend, before the result is being sent to the client.
type WorkflowStepAction struct {
	// the ID of the action
	Id *string `json:"id,omitempty"`
	// the icon of the action
	Icon *string `json:"icon,omitempty"`
	// the button label for the action
	Label *string `json:"label,omitempty"`
	// optional button modifier of the action
	ButtonModifier *string `json:"button_modifier,omitempty"`
	// optional filter that can be used by the UI to show or hide the action
	UiFilter *string `json:"ui_filter,omitempty"`
	// the ID of the next step of the workflow
	NextStepId *string `json:"next_step_id,omitempty"`
}

// NewWorkflowStepAction instantiates a new WorkflowStepAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowStepAction() *WorkflowStepAction {
	this := WorkflowStepAction{}
	return &this
}

// NewWorkflowStepActionWithDefaults instantiates a new WorkflowStepAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowStepActionWithDefaults() *WorkflowStepAction {
	this := WorkflowStepAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowStepAction) SetId(v string) {
	o.Id = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *WorkflowStepAction) SetIcon(v string) {
	o.Icon = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *WorkflowStepAction) SetLabel(v string) {
	o.Label = &v
}

// GetButtonModifier returns the ButtonModifier field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetButtonModifier() string {
	if o == nil || IsNil(o.ButtonModifier) {
		var ret string
		return ret
	}
	return *o.ButtonModifier
}

// GetButtonModifierOk returns a tuple with the ButtonModifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetButtonModifierOk() (*string, bool) {
	if o == nil || IsNil(o.ButtonModifier) {
		return nil, false
	}
	return o.ButtonModifier, true
}

// HasButtonModifier returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasButtonModifier() bool {
	if o != nil && !IsNil(o.ButtonModifier) {
		return true
	}

	return false
}

// SetButtonModifier gets a reference to the given string and assigns it to the ButtonModifier field.
func (o *WorkflowStepAction) SetButtonModifier(v string) {
	o.ButtonModifier = &v
}

// GetUiFilter returns the UiFilter field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetUiFilter() string {
	if o == nil || IsNil(o.UiFilter) {
		var ret string
		return ret
	}
	return *o.UiFilter
}

// GetUiFilterOk returns a tuple with the UiFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetUiFilterOk() (*string, bool) {
	if o == nil || IsNil(o.UiFilter) {
		return nil, false
	}
	return o.UiFilter, true
}

// HasUiFilter returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasUiFilter() bool {
	if o != nil && !IsNil(o.UiFilter) {
		return true
	}

	return false
}

// SetUiFilter gets a reference to the given string and assigns it to the UiFilter field.
func (o *WorkflowStepAction) SetUiFilter(v string) {
	o.UiFilter = &v
}

// GetNextStepId returns the NextStepId field value if set, zero value otherwise.
func (o *WorkflowStepAction) GetNextStepId() string {
	if o == nil || IsNil(o.NextStepId) {
		var ret string
		return ret
	}
	return *o.NextStepId
}

// GetNextStepIdOk returns a tuple with the NextStepId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepAction) GetNextStepIdOk() (*string, bool) {
	if o == nil || IsNil(o.NextStepId) {
		return nil, false
	}
	return o.NextStepId, true
}

// HasNextStepId returns a boolean if a field has been set.
func (o *WorkflowStepAction) HasNextStepId() bool {
	if o != nil && !IsNil(o.NextStepId) {
		return true
	}

	return false
}

// SetNextStepId gets a reference to the given string and assigns it to the NextStepId field.
func (o *WorkflowStepAction) SetNextStepId(v string) {
	o.NextStepId = &v
}

func (o WorkflowStepAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowStepAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.ButtonModifier) {
		toSerialize["button_modifier"] = o.ButtonModifier
	}
	if !IsNil(o.UiFilter) {
		toSerialize["ui_filter"] = o.UiFilter
	}
	if !IsNil(o.NextStepId) {
		toSerialize["next_step_id"] = o.NextStepId
	}
	return toSerialize, nil
}

type NullableWorkflowStepAction struct {
	value *WorkflowStepAction
	isSet bool
}

func (v NullableWorkflowStepAction) Get() *WorkflowStepAction {
	return v.value
}

func (v *NullableWorkflowStepAction) Set(val *WorkflowStepAction) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowStepAction) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowStepAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowStepAction(val *WorkflowStepAction) *NullableWorkflowStepAction {
	return &NullableWorkflowStepAction{value: val, isSet: true}
}

func (v NullableWorkflowStepAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowStepAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
