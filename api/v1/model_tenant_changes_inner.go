/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TenantChangesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantChangesInner{}

// TenantChangesInner struct for TenantChangesInner
type TenantChangesInner struct {
	Tenant NullableContactData    `json:"tenant"`
	Action TenantChangeActionEnum `json:"action"`
}

type _TenantChangesInner TenantChangesInner

// NewTenantChangesInner instantiates a new TenantChangesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantChangesInner(tenant NullableContactData, action TenantChangeActionEnum) *TenantChangesInner {
	this := TenantChangesInner{}
	this.Tenant = tenant
	this.Action = action
	return &this
}

// NewTenantChangesInnerWithDefaults instantiates a new TenantChangesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantChangesInnerWithDefaults() *TenantChangesInner {
	this := TenantChangesInner{}
	return &this
}

// GetTenant returns the Tenant field value
// If the value is explicit nil, the zero value for ContactData will be returned
func (o *TenantChangesInner) GetTenant() ContactData {
	if o == nil || o.Tenant.Get() == nil {
		var ret ContactData
		return ret
	}

	return *o.Tenant.Get()
}

// GetTenantOk returns a tuple with the Tenant field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantChangesInner) GetTenantOk() (*ContactData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenant.Get(), o.Tenant.IsSet()
}

// SetTenant sets field value
func (o *TenantChangesInner) SetTenant(v ContactData) {
	o.Tenant.Set(&v)
}

// GetAction returns the Action field value
func (o *TenantChangesInner) GetAction() TenantChangeActionEnum {
	if o == nil {
		var ret TenantChangeActionEnum
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *TenantChangesInner) GetActionOk() (*TenantChangeActionEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *TenantChangesInner) SetAction(v TenantChangeActionEnum) {
	o.Action = v
}

func (o TenantChangesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantChangesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenant"] = o.Tenant.Get()
	toSerialize["action"] = o.Action
	return toSerialize, nil
}

func (o *TenantChangesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenant",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTenantChangesInner := _TenantChangesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTenantChangesInner)

	if err != nil {
		return err
	}

	*o = TenantChangesInner(varTenantChangesInner)

	return err
}

type NullableTenantChangesInner struct {
	value *TenantChangesInner
	isSet bool
}

func (v NullableTenantChangesInner) Get() *TenantChangesInner {
	return v.value
}

func (v *NullableTenantChangesInner) Set(val *TenantChangesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantChangesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantChangesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantChangesInner(val *TenantChangesInner) *NullableTenantChangesInner {
	return &NullableTenantChangesInner{value: val, isSet: true}
}

func (v NullableTenantChangesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantChangesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
