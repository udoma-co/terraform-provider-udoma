/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// InvitationStatus the model 'InvitationStatus'
type InvitationStatus string

// List of InvitationStatus
const (
	INVITATIONSTATUS_UNKNOWN  InvitationStatus = "UNKNOWN"
	INVITATIONSTATUS_NONE     InvitationStatus = "NONE"
	INVITATIONSTATUS_OPEN     InvitationStatus = "OPEN"
	INVITATIONSTATUS_ACCEPTED InvitationStatus = "ACCEPTED"
	INVITATIONSTATUS_REJECTED InvitationStatus = "REJECTED"
)

// All allowed values of InvitationStatus enum
var AllowedInvitationStatusEnumValues = []InvitationStatus{
	"UNKNOWN",
	"NONE",
	"OPEN",
	"ACCEPTED",
	"REJECTED",
}

func (v *InvitationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvitationStatus(value)
	for _, existing := range AllowedInvitationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InvitationStatus", value)
}

// NewInvitationStatusFromValue returns a pointer to a valid InvitationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvitationStatusFromValue(v string) (*InvitationStatus, error) {
	ev := InvitationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvitationStatus: valid values are %v", v, AllowedInvitationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvitationStatus) IsValid() bool {
	for _, existing := range AllowedInvitationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InvitationStatus value
func (v InvitationStatus) Ptr() *InvitationStatus {
	return &v
}

type NullableInvitationStatus struct {
	value *InvitationStatus
	isSet bool
}

func (v NullableInvitationStatus) Get() *InvitationStatus {
	return v.value
}

func (v *NullableInvitationStatus) Set(val *InvitationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInvitationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInvitationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvitationStatus(val *InvitationStatus) *NullableInvitationStatus {
	return &NullableInvitationStatus{value: val, isSet: true}
}

func (v NullableInvitationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvitationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
