/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// HookAction the model 'HookAction'
type HookAction string

// List of HookAction
const (
	HOOKACTION_CREATE HookAction = "CREATE"
	HOOKACTION_UPDATE HookAction = "UPDATE"
	HOOKACTION_DELETE HookAction = "DELETE"
)

// All allowed values of HookAction enum
var AllowedHookActionEnumValues = []HookAction{
	"CREATE",
	"UPDATE",
	"DELETE",
}

func (v *HookAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HookAction(value)
	for _, existing := range AllowedHookActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HookAction", value)
}

// NewHookActionFromValue returns a pointer to a valid HookAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHookActionFromValue(v string) (*HookAction, error) {
	ev := HookAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HookAction: valid values are %v", v, AllowedHookActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HookAction) IsValid() bool {
	for _, existing := range AllowedHookActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HookAction value
func (v HookAction) Ptr() *HookAction {
	return &v
}

type NullableHookAction struct {
	value *HookAction
	isSet bool
}

func (v NullableHookAction) Get() *HookAction {
	return v.value
}

func (v *NullableHookAction) Set(val *HookAction) {
	v.value = val
	v.isSet = true
}

func (v NullableHookAction) IsSet() bool {
	return v.isSet
}

func (v *NullableHookAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHookAction(val *HookAction) *NullableHookAction {
	return &NullableHookAction{value: val, isSet: true}
}

func (v NullableHookAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHookAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
