/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the SignatureSigner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignatureSigner{}

// SignatureSigner Signer, required to sign a document in a signautre request
type SignatureSigner struct {
	// The id used to identify the signer.
	Id *string `json:"id,omitempty"`
	// The unix timestamp of the creation of the object.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// A unix timestamp of the last time the object was changed.
	UpdatedAt        *int64                      `json:"updated_at,omitempty"`
	Status           *SignerStatusType           `json:"status,omitempty"`
	NotificationType *SignerNotificationTypeEnum `json:"notification_type,omitempty"`
	ContactData      *ContactData                `json:"contact_data,omitempty"`
}

// NewSignatureSigner instantiates a new SignatureSigner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignatureSigner() *SignatureSigner {
	this := SignatureSigner{}
	return &this
}

// NewSignatureSignerWithDefaults instantiates a new SignatureSigner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignatureSignerWithDefaults() *SignatureSigner {
	this := SignatureSigner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SignatureSigner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SignatureSigner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SignatureSigner) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SignatureSigner) GetCreatedAt() int64 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetCreatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SignatureSigner) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *SignatureSigner) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SignatureSigner) GetUpdatedAt() int64 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SignatureSigner) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *SignatureSigner) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SignatureSigner) GetStatus() SignerStatusType {
	if o == nil || IsNil(o.Status) {
		var ret SignerStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetStatusOk() (*SignerStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SignatureSigner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SignerStatusType and assigns it to the Status field.
func (o *SignatureSigner) SetStatus(v SignerStatusType) {
	o.Status = &v
}

// GetNotificationType returns the NotificationType field value if set, zero value otherwise.
func (o *SignatureSigner) GetNotificationType() SignerNotificationTypeEnum {
	if o == nil || IsNil(o.NotificationType) {
		var ret SignerNotificationTypeEnum
		return ret
	}
	return *o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetNotificationTypeOk() (*SignerNotificationTypeEnum, bool) {
	if o == nil || IsNil(o.NotificationType) {
		return nil, false
	}
	return o.NotificationType, true
}

// HasNotificationType returns a boolean if a field has been set.
func (o *SignatureSigner) HasNotificationType() bool {
	if o != nil && !IsNil(o.NotificationType) {
		return true
	}

	return false
}

// SetNotificationType gets a reference to the given SignerNotificationTypeEnum and assigns it to the NotificationType field.
func (o *SignatureSigner) SetNotificationType(v SignerNotificationTypeEnum) {
	o.NotificationType = &v
}

// GetContactData returns the ContactData field value if set, zero value otherwise.
func (o *SignatureSigner) GetContactData() ContactData {
	if o == nil || IsNil(o.ContactData) {
		var ret ContactData
		return ret
	}
	return *o.ContactData
}

// GetContactDataOk returns a tuple with the ContactData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetContactDataOk() (*ContactData, bool) {
	if o == nil || IsNil(o.ContactData) {
		return nil, false
	}
	return o.ContactData, true
}

// HasContactData returns a boolean if a field has been set.
func (o *SignatureSigner) HasContactData() bool {
	if o != nil && !IsNil(o.ContactData) {
		return true
	}

	return false
}

// SetContactData gets a reference to the given ContactData and assigns it to the ContactData field.
func (o *SignatureSigner) SetContactData(v ContactData) {
	o.ContactData = &v
}

func (o SignatureSigner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignatureSigner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.NotificationType) {
		toSerialize["notification_type"] = o.NotificationType
	}
	if !IsNil(o.ContactData) {
		toSerialize["contact_data"] = o.ContactData
	}
	return toSerialize, nil
}

type NullableSignatureSigner struct {
	value *SignatureSigner
	isSet bool
}

func (v NullableSignatureSigner) Get() *SignatureSigner {
	return v.value
}

func (v *NullableSignatureSigner) Set(val *SignatureSigner) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureSigner) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureSigner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureSigner(val *SignatureSigner) *NullableSignatureSigner {
	return &NullableSignatureSigner{value: val, isSet: true}
}

func (v NullableSignatureSigner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureSigner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
