/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SignatureSigner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignatureSigner{}

// SignatureSigner Signer, required to sign a document in a signautre request
type SignatureSigner struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt        int64                      `json:"updated_at"`
	Status           SignerStatusType           `json:"status"`
	NotificationType SignerNotificationTypeEnum `json:"notification_type"`
	ContactData      NullableContactData        `json:"contact_data"`
}

type _SignatureSigner SignatureSigner

// NewSignatureSigner instantiates a new SignatureSigner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignatureSigner(id string, createdAt int64, updatedAt int64, status SignerStatusType, notificationType SignerNotificationTypeEnum, contactData NullableContactData) *SignatureSigner {
	this := SignatureSigner{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Status = status
	this.NotificationType = notificationType
	this.ContactData = contactData
	return &this
}

// NewSignatureSignerWithDefaults instantiates a new SignatureSigner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignatureSignerWithDefaults() *SignatureSigner {
	this := SignatureSigner{}
	return &this
}

// GetId returns the Id field value
func (o *SignatureSigner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SignatureSigner) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SignatureSigner) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SignatureSigner) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *SignatureSigner) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *SignatureSigner) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetStatus returns the Status field value
func (o *SignatureSigner) GetStatus() SignerStatusType {
	if o == nil {
		var ret SignerStatusType
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetStatusOk() (*SignerStatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SignatureSigner) SetStatus(v SignerStatusType) {
	o.Status = v
}

// GetNotificationType returns the NotificationType field value
func (o *SignatureSigner) GetNotificationType() SignerNotificationTypeEnum {
	if o == nil {
		var ret SignerNotificationTypeEnum
		return ret
	}

	return o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value
// and a boolean to check if the value has been set.
func (o *SignatureSigner) GetNotificationTypeOk() (*SignerNotificationTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationType, true
}

// SetNotificationType sets field value
func (o *SignatureSigner) SetNotificationType(v SignerNotificationTypeEnum) {
	o.NotificationType = v
}

// GetContactData returns the ContactData field value
// If the value is explicit nil, the zero value for ContactData will be returned
func (o *SignatureSigner) GetContactData() ContactData {
	if o == nil || o.ContactData.Get() == nil {
		var ret ContactData
		return ret
	}

	return *o.ContactData.Get()
}

// GetContactDataOk returns a tuple with the ContactData field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignatureSigner) GetContactDataOk() (*ContactData, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContactData.Get(), o.ContactData.IsSet()
}

// SetContactData sets field value
func (o *SignatureSigner) SetContactData(v ContactData) {
	o.ContactData.Set(&v)
}

func (o SignatureSigner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignatureSigner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["status"] = o.Status
	toSerialize["notification_type"] = o.NotificationType
	toSerialize["contact_data"] = o.ContactData.Get()
	return toSerialize, nil
}

func (o *SignatureSigner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"status",
		"notification_type",
		"contact_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignatureSigner := _SignatureSigner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignatureSigner)

	if err != nil {
		return err
	}

	*o = SignatureSigner(varSignatureSigner)

	return err
}

type NullableSignatureSigner struct {
	value *SignatureSigner
	isSet bool
}

func (v NullableSignatureSigner) Get() *SignatureSigner {
	return v.value
}

func (v *NullableSignatureSigner) Set(val *SignatureSigner) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureSigner) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureSigner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureSigner(val *SignatureSigner) *NullableSignatureSigner {
	return &NullableSignatureSigner{value: val, isSet: true}
}

func (v NullableSignatureSigner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureSigner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
