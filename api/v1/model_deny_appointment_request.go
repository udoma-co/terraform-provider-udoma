/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the DenyAppointmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DenyAppointmentRequest{}

// DenyAppointmentRequest The reason the appointment is being canceled
type DenyAppointmentRequest struct {
	Reason *string `json:"reason,omitempty"`
}

// NewDenyAppointmentRequest instantiates a new DenyAppointmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDenyAppointmentRequest() *DenyAppointmentRequest {
	this := DenyAppointmentRequest{}
	return &this
}

// NewDenyAppointmentRequestWithDefaults instantiates a new DenyAppointmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDenyAppointmentRequestWithDefaults() *DenyAppointmentRequest {
	this := DenyAppointmentRequest{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *DenyAppointmentRequest) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DenyAppointmentRequest) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *DenyAppointmentRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *DenyAppointmentRequest) SetReason(v string) {
	o.Reason = &v
}

func (o DenyAppointmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DenyAppointmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableDenyAppointmentRequest struct {
	value *DenyAppointmentRequest
	isSet bool
}

func (v NullableDenyAppointmentRequest) Get() *DenyAppointmentRequest {
	return v.value
}

func (v *NullableDenyAppointmentRequest) Set(val *DenyAppointmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDenyAppointmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDenyAppointmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDenyAppointmentRequest(val *DenyAppointmentRequest) *NullableDenyAppointmentRequest {
	return &NullableDenyAppointmentRequest{value: val, isSet: true}
}

func (v NullableDenyAppointmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDenyAppointmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
