/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// WorkflowExecution contains all information of the execution of a single workflow
type WorkflowExecution struct {
	// the unique ID generated when the workflow execution was started
	Id *string `json:"id,omitempty"`
	// The timestamp of when the workflow execution was created
	CreatedAt *int64 `json:"created_at,omitempty"`
	// The timestamp of when the workflow execution was last updated
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// the ID of the workflow definition on which the workflow execution is based
	DefinitionRef *string `json:"definition_ref,omitempty"`
	// optional ID of the parent workflow execution
	ParentRef *string `json:"parent_ref,omitempty"`
	// the name of the workflow execution generated by the name expression of the workflow definition
	Name   *string                  `json:"name,omitempty"`
	Status *WorkflowExecutionStatus `json:"status,omitempty"`
	// whether the workflow execution is archived or not
	Archived *bool `json:"archived,omitempty"`
	// the ID of the step that is the current step of the workflow execution, i.e. it's  the next step to be executed
	CurrentStep *string `json:"current_step,omitempty"`
	// the name of the step that is the current step of the workflow execution. This is used in the UI to display the current step, without loading the step definition.
	CurrentStepName *string `json:"current_step_name,omitempty"`
	// the data collected and generated during the workflow execution, serialiased as JSON
	Context *string `json:"context,omitempty"`
	// the steps of the workflow execution, including the result of the execution of each step
	Steps       []WorkflowExecutionStep       `json:"steps,omitempty"`
	StepHistory []WorkflowExecutionStepResult `json:"step_history,omitempty"`
}

// NewWorkflowExecution instantiates a new WorkflowExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowExecution() *WorkflowExecution {
	this := WorkflowExecution{}
	return &this
}

// NewWorkflowExecutionWithDefaults instantiates a new WorkflowExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowExecutionWithDefaults() *WorkflowExecution {
	this := WorkflowExecution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowExecution) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowExecution) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowExecution) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WorkflowExecution) GetCreatedAt() int64 {
	if o == nil || o.CreatedAt == nil {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetCreatedAtOk() (*int64, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WorkflowExecution) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *WorkflowExecution) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *WorkflowExecution) GetUpdatedAt() int64 {
	if o == nil || o.UpdatedAt == nil {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *WorkflowExecution) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *WorkflowExecution) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetDefinitionRef returns the DefinitionRef field value if set, zero value otherwise.
func (o *WorkflowExecution) GetDefinitionRef() string {
	if o == nil || o.DefinitionRef == nil {
		var ret string
		return ret
	}
	return *o.DefinitionRef
}

// GetDefinitionRefOk returns a tuple with the DefinitionRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetDefinitionRefOk() (*string, bool) {
	if o == nil || o.DefinitionRef == nil {
		return nil, false
	}
	return o.DefinitionRef, true
}

// HasDefinitionRef returns a boolean if a field has been set.
func (o *WorkflowExecution) HasDefinitionRef() bool {
	if o != nil && o.DefinitionRef != nil {
		return true
	}

	return false
}

// SetDefinitionRef gets a reference to the given string and assigns it to the DefinitionRef field.
func (o *WorkflowExecution) SetDefinitionRef(v string) {
	o.DefinitionRef = &v
}

// GetParentRef returns the ParentRef field value if set, zero value otherwise.
func (o *WorkflowExecution) GetParentRef() string {
	if o == nil || o.ParentRef == nil {
		var ret string
		return ret
	}
	return *o.ParentRef
}

// GetParentRefOk returns a tuple with the ParentRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetParentRefOk() (*string, bool) {
	if o == nil || o.ParentRef == nil {
		return nil, false
	}
	return o.ParentRef, true
}

// HasParentRef returns a boolean if a field has been set.
func (o *WorkflowExecution) HasParentRef() bool {
	if o != nil && o.ParentRef != nil {
		return true
	}

	return false
}

// SetParentRef gets a reference to the given string and assigns it to the ParentRef field.
func (o *WorkflowExecution) SetParentRef(v string) {
	o.ParentRef = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkflowExecution) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowExecution) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkflowExecution) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WorkflowExecution) GetStatus() WorkflowExecutionStatus {
	if o == nil || o.Status == nil {
		var ret WorkflowExecutionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetStatusOk() (*WorkflowExecutionStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WorkflowExecution) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given WorkflowExecutionStatus and assigns it to the Status field.
func (o *WorkflowExecution) SetStatus(v WorkflowExecutionStatus) {
	o.Status = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *WorkflowExecution) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *WorkflowExecution) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *WorkflowExecution) SetArchived(v bool) {
	o.Archived = &v
}

// GetCurrentStep returns the CurrentStep field value if set, zero value otherwise.
func (o *WorkflowExecution) GetCurrentStep() string {
	if o == nil || o.CurrentStep == nil {
		var ret string
		return ret
	}
	return *o.CurrentStep
}

// GetCurrentStepOk returns a tuple with the CurrentStep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetCurrentStepOk() (*string, bool) {
	if o == nil || o.CurrentStep == nil {
		return nil, false
	}
	return o.CurrentStep, true
}

// HasCurrentStep returns a boolean if a field has been set.
func (o *WorkflowExecution) HasCurrentStep() bool {
	if o != nil && o.CurrentStep != nil {
		return true
	}

	return false
}

// SetCurrentStep gets a reference to the given string and assigns it to the CurrentStep field.
func (o *WorkflowExecution) SetCurrentStep(v string) {
	o.CurrentStep = &v
}

// GetCurrentStepName returns the CurrentStepName field value if set, zero value otherwise.
func (o *WorkflowExecution) GetCurrentStepName() string {
	if o == nil || o.CurrentStepName == nil {
		var ret string
		return ret
	}
	return *o.CurrentStepName
}

// GetCurrentStepNameOk returns a tuple with the CurrentStepName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetCurrentStepNameOk() (*string, bool) {
	if o == nil || o.CurrentStepName == nil {
		return nil, false
	}
	return o.CurrentStepName, true
}

// HasCurrentStepName returns a boolean if a field has been set.
func (o *WorkflowExecution) HasCurrentStepName() bool {
	if o != nil && o.CurrentStepName != nil {
		return true
	}

	return false
}

// SetCurrentStepName gets a reference to the given string and assigns it to the CurrentStepName field.
func (o *WorkflowExecution) SetCurrentStepName(v string) {
	o.CurrentStepName = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *WorkflowExecution) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *WorkflowExecution) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *WorkflowExecution) SetContext(v string) {
	o.Context = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *WorkflowExecution) GetSteps() []WorkflowExecutionStep {
	if o == nil || o.Steps == nil {
		var ret []WorkflowExecutionStep
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetStepsOk() ([]WorkflowExecutionStep, bool) {
	if o == nil || o.Steps == nil {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *WorkflowExecution) HasSteps() bool {
	if o != nil && o.Steps != nil {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []WorkflowExecutionStep and assigns it to the Steps field.
func (o *WorkflowExecution) SetSteps(v []WorkflowExecutionStep) {
	o.Steps = v
}

// GetStepHistory returns the StepHistory field value if set, zero value otherwise.
func (o *WorkflowExecution) GetStepHistory() []WorkflowExecutionStepResult {
	if o == nil || o.StepHistory == nil {
		var ret []WorkflowExecutionStepResult
		return ret
	}
	return o.StepHistory
}

// GetStepHistoryOk returns a tuple with the StepHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetStepHistoryOk() ([]WorkflowExecutionStepResult, bool) {
	if o == nil || o.StepHistory == nil {
		return nil, false
	}
	return o.StepHistory, true
}

// HasStepHistory returns a boolean if a field has been set.
func (o *WorkflowExecution) HasStepHistory() bool {
	if o != nil && o.StepHistory != nil {
		return true
	}

	return false
}

// SetStepHistory gets a reference to the given []WorkflowExecutionStepResult and assigns it to the StepHistory field.
func (o *WorkflowExecution) SetStepHistory(v []WorkflowExecutionStepResult) {
	o.StepHistory = v
}

func (o WorkflowExecution) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.DefinitionRef != nil {
		toSerialize["definition_ref"] = o.DefinitionRef
	}
	if o.ParentRef != nil {
		toSerialize["parent_ref"] = o.ParentRef
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.CurrentStep != nil {
		toSerialize["current_step"] = o.CurrentStep
	}
	if o.CurrentStepName != nil {
		toSerialize["current_step_name"] = o.CurrentStepName
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.Steps != nil {
		toSerialize["steps"] = o.Steps
	}
	if o.StepHistory != nil {
		toSerialize["step_history"] = o.StepHistory
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowExecution struct {
	value *WorkflowExecution
	isSet bool
}

func (v NullableWorkflowExecution) Get() *WorkflowExecution {
	return v.value
}

func (v *NullableWorkflowExecution) Set(val *WorkflowExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowExecution(val *WorkflowExecution) *NullableWorkflowExecution {
	return &NullableWorkflowExecution{value: val, isSet: true}
}

func (v NullableWorkflowExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
