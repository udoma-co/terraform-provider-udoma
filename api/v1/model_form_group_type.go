/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// FormGroupType the model 'FormGroupType'
type FormGroupType string

// List of FormGroupType
const (
	FORMGROUPTYPE_SECTION      FormGroupType = "section"
	FORMGROUPTYPE_REPEAT_GROUP FormGroupType = "repeat_group"
	FORMGROUPTYPE_ROW          FormGroupType = "row"
)

// All allowed values of FormGroupType enum
var AllowedFormGroupTypeEnumValues = []FormGroupType{
	"section",
	"repeat_group",
	"row",
}

func (v *FormGroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FormGroupType(value)
	for _, existing := range AllowedFormGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FormGroupType", value)
}

// NewFormGroupTypeFromValue returns a pointer to a valid FormGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFormGroupTypeFromValue(v string) (*FormGroupType, error) {
	ev := FormGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FormGroupType: valid values are %v", v, AllowedFormGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FormGroupType) IsValid() bool {
	for _, existing := range AllowedFormGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FormGroupType value
func (v FormGroupType) Ptr() *FormGroupType {
	return &v
}

type NullableFormGroupType struct {
	value *FormGroupType
	isSet bool
}

func (v NullableFormGroupType) Get() *FormGroupType {
	return v.value
}

func (v *NullableFormGroupType) Set(val *FormGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableFormGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableFormGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormGroupType(val *FormGroupType) *NullableFormGroupType {
	return &NullableFormGroupType{value: val, isSet: true}
}

func (v NullableFormGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
