/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the QueryDocumentsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryDocumentsRequest{}

// QueryDocumentsRequest Attributes needed for querying document repository entries
type QueryDocumentsRequest struct {
	// The maximum number of entities to return from the query
	Limit *int32 `json:"limit,omitempty"`
	// The number of entities to skip before returning the result
	Offset *int32 `json:"offset,omitempty"`
	// The ID of the entity for which the documents are uploaded
	RefId   *string              `json:"ref_id,omitempty"`
	RefType *DocumentRefTypeEnum `json:"ref_type,omitempty"`
	// The name of the document for which to query
	Name *string `json:"name,omitempty"`
	// Indicator, controlling whether the document is visible to tenants
	Public *bool `json:"public,omitempty"`
}

// NewQueryDocumentsRequest instantiates a new QueryDocumentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryDocumentsRequest() *QueryDocumentsRequest {
	this := QueryDocumentsRequest{}
	return &this
}

// NewQueryDocumentsRequestWithDefaults instantiates a new QueryDocumentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryDocumentsRequestWithDefaults() *QueryDocumentsRequest {
	this := QueryDocumentsRequest{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *QueryDocumentsRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDocumentsRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *QueryDocumentsRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *QueryDocumentsRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *QueryDocumentsRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDocumentsRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *QueryDocumentsRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *QueryDocumentsRequest) SetOffset(v int32) {
	o.Offset = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *QueryDocumentsRequest) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDocumentsRequest) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *QueryDocumentsRequest) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *QueryDocumentsRequest) SetRefId(v string) {
	o.RefId = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *QueryDocumentsRequest) GetRefType() DocumentRefTypeEnum {
	if o == nil || IsNil(o.RefType) {
		var ret DocumentRefTypeEnum
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDocumentsRequest) GetRefTypeOk() (*DocumentRefTypeEnum, bool) {
	if o == nil || IsNil(o.RefType) {
		return nil, false
	}
	return o.RefType, true
}

// HasRefType returns a boolean if a field has been set.
func (o *QueryDocumentsRequest) HasRefType() bool {
	if o != nil && !IsNil(o.RefType) {
		return true
	}

	return false
}

// SetRefType gets a reference to the given DocumentRefTypeEnum and assigns it to the RefType field.
func (o *QueryDocumentsRequest) SetRefType(v DocumentRefTypeEnum) {
	o.RefType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QueryDocumentsRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDocumentsRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QueryDocumentsRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QueryDocumentsRequest) SetName(v string) {
	o.Name = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *QueryDocumentsRequest) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDocumentsRequest) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *QueryDocumentsRequest) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *QueryDocumentsRequest) SetPublic(v bool) {
	o.Public = &v
}

func (o QueryDocumentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryDocumentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.RefType) {
		toSerialize["ref_type"] = o.RefType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	return toSerialize, nil
}

type NullableQueryDocumentsRequest struct {
	value *QueryDocumentsRequest
	isSet bool
}

func (v NullableQueryDocumentsRequest) Get() *QueryDocumentsRequest {
	return v.value
}

func (v *NullableQueryDocumentsRequest) Set(val *QueryDocumentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryDocumentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryDocumentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryDocumentsRequest(val *QueryDocumentsRequest) *NullableQueryDocumentsRequest {
	return &NullableQueryDocumentsRequest{value: val, isSet: true}
}

func (v NullableQueryDocumentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryDocumentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
