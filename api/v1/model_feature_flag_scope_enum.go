/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// FeatureFlagScopeEnum The scope of the feature flag. This determines who the feature flag is applicable to.
type FeatureFlagScopeEnum string

// List of FeatureFlagScopeEnum
const (
	FEATUREFLAGSCOPEENUM_GLOBAL       FeatureFlagScopeEnum = "GLOBAL"
	FEATUREFLAGSCOPEENUM_ACCOUNT_TYPE FeatureFlagScopeEnum = "ACCOUNT_TYPE"
	FEATUREFLAGSCOPEENUM_ACCOUNT      FeatureFlagScopeEnum = "ACCOUNT"
	FEATUREFLAGSCOPEENUM_USER         FeatureFlagScopeEnum = "USER"
)

// All allowed values of FeatureFlagScopeEnum enum
var AllowedFeatureFlagScopeEnumEnumValues = []FeatureFlagScopeEnum{
	"GLOBAL",
	"ACCOUNT_TYPE",
	"ACCOUNT",
	"USER",
}

func (v *FeatureFlagScopeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeatureFlagScopeEnum(value)
	for _, existing := range AllowedFeatureFlagScopeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeatureFlagScopeEnum", value)
}

// NewFeatureFlagScopeEnumFromValue returns a pointer to a valid FeatureFlagScopeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeatureFlagScopeEnumFromValue(v string) (*FeatureFlagScopeEnum, error) {
	ev := FeatureFlagScopeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeatureFlagScopeEnum: valid values are %v", v, AllowedFeatureFlagScopeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeatureFlagScopeEnum) IsValid() bool {
	for _, existing := range AllowedFeatureFlagScopeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeatureFlagScopeEnum value
func (v FeatureFlagScopeEnum) Ptr() *FeatureFlagScopeEnum {
	return &v
}

type NullableFeatureFlagScopeEnum struct {
	value *FeatureFlagScopeEnum
	isSet bool
}

func (v NullableFeatureFlagScopeEnum) Get() *FeatureFlagScopeEnum {
	return v.value
}

func (v *NullableFeatureFlagScopeEnum) Set(val *FeatureFlagScopeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureFlagScopeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureFlagScopeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureFlagScopeEnum(val *FeatureFlagScopeEnum) *NullableFeatureFlagScopeEnum {
	return &NullableFeatureFlagScopeEnum{value: val, isSet: true}
}

func (v NullableFeatureFlagScopeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureFlagScopeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
