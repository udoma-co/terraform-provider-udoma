/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PropertyAttributesPartial type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyAttributesPartial{}

// PropertyAttributesPartial struct for PropertyAttributesPartial
type PropertyAttributesPartial struct {
	// meaningful name of the property, e.g. 'Whg 12', or 'Etage 2/Links'
	Name    string       `json:"name"`
	Type    PropertyType `json:"type"`
	Address *Address     `json:"address,omitempty"`
	// Optional reference to the property owner
	OwnerRef *string `json:"owner_ref,omitempty"`
	// Optional reference to the parent property
	ParentRef *string `json:"parent_ref,omitempty"`
	// Address of the suite.
	Suite   *string          `json:"suite,omitempty"`
	Details *PropertyDetails `json:"details,omitempty"`
}

type _PropertyAttributesPartial PropertyAttributesPartial

// NewPropertyAttributesPartial instantiates a new PropertyAttributesPartial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyAttributesPartial(name string, type_ PropertyType) *PropertyAttributesPartial {
	this := PropertyAttributesPartial{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewPropertyAttributesPartialWithDefaults instantiates a new PropertyAttributesPartial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyAttributesPartialWithDefaults() *PropertyAttributesPartial {
	this := PropertyAttributesPartial{}
	return &this
}

// GetName returns the Name field value
func (o *PropertyAttributesPartial) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PropertyAttributesPartial) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PropertyAttributesPartial) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *PropertyAttributesPartial) GetType() PropertyType {
	if o == nil {
		var ret PropertyType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PropertyAttributesPartial) GetTypeOk() (*PropertyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PropertyAttributesPartial) SetType(v PropertyType) {
	o.Type = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *PropertyAttributesPartial) GetAddress() Address {
	if o == nil || IsNil(o.Address) {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyAttributesPartial) GetAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *PropertyAttributesPartial) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *PropertyAttributesPartial) SetAddress(v Address) {
	o.Address = &v
}

// GetOwnerRef returns the OwnerRef field value if set, zero value otherwise.
func (o *PropertyAttributesPartial) GetOwnerRef() string {
	if o == nil || IsNil(o.OwnerRef) {
		var ret string
		return ret
	}
	return *o.OwnerRef
}

// GetOwnerRefOk returns a tuple with the OwnerRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyAttributesPartial) GetOwnerRefOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerRef) {
		return nil, false
	}
	return o.OwnerRef, true
}

// HasOwnerRef returns a boolean if a field has been set.
func (o *PropertyAttributesPartial) HasOwnerRef() bool {
	if o != nil && !IsNil(o.OwnerRef) {
		return true
	}

	return false
}

// SetOwnerRef gets a reference to the given string and assigns it to the OwnerRef field.
func (o *PropertyAttributesPartial) SetOwnerRef(v string) {
	o.OwnerRef = &v
}

// GetParentRef returns the ParentRef field value if set, zero value otherwise.
func (o *PropertyAttributesPartial) GetParentRef() string {
	if o == nil || IsNil(o.ParentRef) {
		var ret string
		return ret
	}
	return *o.ParentRef
}

// GetParentRefOk returns a tuple with the ParentRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyAttributesPartial) GetParentRefOk() (*string, bool) {
	if o == nil || IsNil(o.ParentRef) {
		return nil, false
	}
	return o.ParentRef, true
}

// HasParentRef returns a boolean if a field has been set.
func (o *PropertyAttributesPartial) HasParentRef() bool {
	if o != nil && !IsNil(o.ParentRef) {
		return true
	}

	return false
}

// SetParentRef gets a reference to the given string and assigns it to the ParentRef field.
func (o *PropertyAttributesPartial) SetParentRef(v string) {
	o.ParentRef = &v
}

// GetSuite returns the Suite field value if set, zero value otherwise.
func (o *PropertyAttributesPartial) GetSuite() string {
	if o == nil || IsNil(o.Suite) {
		var ret string
		return ret
	}
	return *o.Suite
}

// GetSuiteOk returns a tuple with the Suite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyAttributesPartial) GetSuiteOk() (*string, bool) {
	if o == nil || IsNil(o.Suite) {
		return nil, false
	}
	return o.Suite, true
}

// HasSuite returns a boolean if a field has been set.
func (o *PropertyAttributesPartial) HasSuite() bool {
	if o != nil && !IsNil(o.Suite) {
		return true
	}

	return false
}

// SetSuite gets a reference to the given string and assigns it to the Suite field.
func (o *PropertyAttributesPartial) SetSuite(v string) {
	o.Suite = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *PropertyAttributesPartial) GetDetails() PropertyDetails {
	if o == nil || IsNil(o.Details) {
		var ret PropertyDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyAttributesPartial) GetDetailsOk() (*PropertyDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *PropertyAttributesPartial) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given PropertyDetails and assigns it to the Details field.
func (o *PropertyAttributesPartial) SetDetails(v PropertyDetails) {
	o.Details = &v
}

func (o PropertyAttributesPartial) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyAttributesPartial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.OwnerRef) {
		toSerialize["owner_ref"] = o.OwnerRef
	}
	if !IsNil(o.ParentRef) {
		toSerialize["parent_ref"] = o.ParentRef
	}
	if !IsNil(o.Suite) {
		toSerialize["suite"] = o.Suite
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

func (o *PropertyAttributesPartial) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyAttributesPartial := _PropertyAttributesPartial{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPropertyAttributesPartial)

	if err != nil {
		return err
	}

	*o = PropertyAttributesPartial(varPropertyAttributesPartial)

	return err
}

type NullablePropertyAttributesPartial struct {
	value *PropertyAttributesPartial
	isSet bool
}

func (v NullablePropertyAttributesPartial) Get() *PropertyAttributesPartial {
	return v.value
}

func (v *NullablePropertyAttributesPartial) Set(val *PropertyAttributesPartial) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyAttributesPartial) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyAttributesPartial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyAttributesPartial(val *PropertyAttributesPartial) *NullablePropertyAttributesPartial {
	return &NullablePropertyAttributesPartial{value: val, isSet: true}
}

func (v NullablePropertyAttributesPartial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyAttributesPartial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
