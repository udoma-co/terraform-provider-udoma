/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// CaseFeedbackResponse Contains the feedback that was provided by a party when changing the status of a case.
type CaseFeedbackResponse struct {
	// The feedback ID that can be found in the case config
	Id *string `json:"id,omitempty"`
	// Form data that was provided by the party executing the action.
	FormData map[string]interface{} `json:"form_data,omitempty"`
	// comment that was provided in case mode was 'comment'
	Comment *string `json:"comment,omitempty"`
	// list of IDs of attachments that were provided with the feedback, in case mode was 'comment'
	AttachmentRefs []string `json:"attachment_refs,omitempty"`
}

// NewCaseFeedbackResponse instantiates a new CaseFeedbackResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseFeedbackResponse() *CaseFeedbackResponse {
	this := CaseFeedbackResponse{}
	return &this
}

// NewCaseFeedbackResponseWithDefaults instantiates a new CaseFeedbackResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseFeedbackResponseWithDefaults() *CaseFeedbackResponse {
	this := CaseFeedbackResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CaseFeedbackResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseFeedbackResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CaseFeedbackResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CaseFeedbackResponse) SetId(v string) {
	o.Id = &v
}

// GetFormData returns the FormData field value if set, zero value otherwise.
func (o *CaseFeedbackResponse) GetFormData() map[string]interface{} {
	if o == nil || o.FormData == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.FormData
}

// GetFormDataOk returns a tuple with the FormData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseFeedbackResponse) GetFormDataOk() (map[string]interface{}, bool) {
	if o == nil || o.FormData == nil {
		return nil, false
	}
	return o.FormData, true
}

// HasFormData returns a boolean if a field has been set.
func (o *CaseFeedbackResponse) HasFormData() bool {
	if o != nil && o.FormData != nil {
		return true
	}

	return false
}

// SetFormData gets a reference to the given map[string]interface{} and assigns it to the FormData field.
func (o *CaseFeedbackResponse) SetFormData(v map[string]interface{}) {
	o.FormData = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CaseFeedbackResponse) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseFeedbackResponse) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CaseFeedbackResponse) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CaseFeedbackResponse) SetComment(v string) {
	o.Comment = &v
}

// GetAttachmentRefs returns the AttachmentRefs field value if set, zero value otherwise.
func (o *CaseFeedbackResponse) GetAttachmentRefs() []string {
	if o == nil || o.AttachmentRefs == nil {
		var ret []string
		return ret
	}
	return o.AttachmentRefs
}

// GetAttachmentRefsOk returns a tuple with the AttachmentRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseFeedbackResponse) GetAttachmentRefsOk() ([]string, bool) {
	if o == nil || o.AttachmentRefs == nil {
		return nil, false
	}
	return o.AttachmentRefs, true
}

// HasAttachmentRefs returns a boolean if a field has been set.
func (o *CaseFeedbackResponse) HasAttachmentRefs() bool {
	if o != nil && o.AttachmentRefs != nil {
		return true
	}

	return false
}

// SetAttachmentRefs gets a reference to the given []string and assigns it to the AttachmentRefs field.
func (o *CaseFeedbackResponse) SetAttachmentRefs(v []string) {
	o.AttachmentRefs = v
}

func (o CaseFeedbackResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.FormData != nil {
		toSerialize["form_data"] = o.FormData
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.AttachmentRefs != nil {
		toSerialize["attachment_refs"] = o.AttachmentRefs
	}
	return json.Marshal(toSerialize)
}

type NullableCaseFeedbackResponse struct {
	value *CaseFeedbackResponse
	isSet bool
}

func (v NullableCaseFeedbackResponse) Get() *CaseFeedbackResponse {
	return v.value
}

func (v *NullableCaseFeedbackResponse) Set(val *CaseFeedbackResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseFeedbackResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseFeedbackResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseFeedbackResponse(val *CaseFeedbackResponse) *NullableCaseFeedbackResponse {
	return &NullableCaseFeedbackResponse{value: val, isSet: true}
}

func (v NullableCaseFeedbackResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseFeedbackResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
