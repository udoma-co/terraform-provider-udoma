/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the FormValidation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormValidation{}

// FormValidation a custom validation that is used to validate data provided by the user
type FormValidation struct {
	// the ID of the validation, used to identify it
	Id *string `json:"id,omitempty"`
	// a JS expression that will be evaluated to determine if the validation passes or fails
	Expression *string `json:"expression,omitempty"`
	// the index of the input should be highlighted if the validation fails (nesting is supported via dot notation)
	Target *string `json:"target,omitempty"`
	// a map of values, where the key and values are strings
	Message *map[string]string `json:"message,omitempty"`
}

// NewFormValidation instantiates a new FormValidation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormValidation() *FormValidation {
	this := FormValidation{}
	return &this
}

// NewFormValidationWithDefaults instantiates a new FormValidation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormValidationWithDefaults() *FormValidation {
	this := FormValidation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FormValidation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormValidation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FormValidation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FormValidation) SetId(v string) {
	o.Id = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *FormValidation) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormValidation) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *FormValidation) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *FormValidation) SetExpression(v string) {
	o.Expression = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *FormValidation) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormValidation) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *FormValidation) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *FormValidation) SetTarget(v string) {
	o.Target = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *FormValidation) GetMessage() map[string]string {
	if o == nil || IsNil(o.Message) {
		var ret map[string]string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormValidation) GetMessageOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *FormValidation) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given map[string]string and assigns it to the Message field.
func (o *FormValidation) SetMessage(v map[string]string) {
	o.Message = &v
}

func (o FormValidation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormValidation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableFormValidation struct {
	value *FormValidation
	isSet bool
}

func (v NullableFormValidation) Get() *FormValidation {
	return v.value
}

func (v *NullableFormValidation) Set(val *FormValidation) {
	v.value = val
	v.isSet = true
}

func (v NullableFormValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableFormValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormValidation(val *FormValidation) *NullableFormValidation {
	return &NullableFormValidation{value: val, isSet: true}
}

func (v NullableFormValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
