/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FormGroup a group of inputs that will be displayed together in the UI
type FormGroup struct {
	// the ID of the group
	Id   *string        `json:"id,omitempty"`
	Type *FormGroupType `json:"type,omitempty"`
	// a map of values, where the key and values are strings
	Label *map[string]string `json:"label,omitempty"`
	// a map of values, where the key and values are strings
	Info *map[string]string `json:"info,omitempty"`
	// the IDs of the inputs that will be displayed in the group
	Items []FormItem `json:"items,omitempty"`
	// the attribute name to use when exporting the result of this group (only used for repeat groups)
	Target *string `json:"target,omitempty"`
	// if true, a divider will be displayed above the group
	TopDivider *bool `json:"top_divider,omitempty"`
	// if true, a divider will be displayed below the group
	BottomDivider *bool `json:"bottom_divider,omitempty"`
	// if true, the inputs will be displayed in a group, otherwise they will be displayed in a row
	UseItemGroup *bool `json:"use_item_group,omitempty"`
	// the minimum number of items that must be submitted in the group (only used for repeat groups)
	MinSize *int32 `json:"min_size,omitempty"`
}

// NewFormGroup instantiates a new FormGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormGroup() *FormGroup {
	this := FormGroup{}
	return &this
}

// NewFormGroupWithDefaults instantiates a new FormGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormGroupWithDefaults() *FormGroup {
	this := FormGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FormGroup) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FormGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FormGroup) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FormGroup) GetType() FormGroupType {
	if o == nil || o.Type == nil {
		var ret FormGroupType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetTypeOk() (*FormGroupType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FormGroup) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given FormGroupType and assigns it to the Type field.
func (o *FormGroup) SetType(v FormGroupType) {
	o.Type = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FormGroup) GetLabel() map[string]string {
	if o == nil || o.Label == nil {
		var ret map[string]string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetLabelOk() (*map[string]string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FormGroup) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given map[string]string and assigns it to the Label field.
func (o *FormGroup) SetLabel(v map[string]string) {
	o.Label = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *FormGroup) GetInfo() map[string]string {
	if o == nil || o.Info == nil {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *FormGroup) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *FormGroup) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *FormGroup) GetItems() []FormItem {
	if o == nil || o.Items == nil {
		var ret []FormItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetItemsOk() ([]FormItem, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *FormGroup) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []FormItem and assigns it to the Items field.
func (o *FormGroup) SetItems(v []FormItem) {
	o.Items = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *FormGroup) GetTarget() string {
	if o == nil || o.Target == nil {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetTargetOk() (*string, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *FormGroup) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *FormGroup) SetTarget(v string) {
	o.Target = &v
}

// GetTopDivider returns the TopDivider field value if set, zero value otherwise.
func (o *FormGroup) GetTopDivider() bool {
	if o == nil || o.TopDivider == nil {
		var ret bool
		return ret
	}
	return *o.TopDivider
}

// GetTopDividerOk returns a tuple with the TopDivider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetTopDividerOk() (*bool, bool) {
	if o == nil || o.TopDivider == nil {
		return nil, false
	}
	return o.TopDivider, true
}

// HasTopDivider returns a boolean if a field has been set.
func (o *FormGroup) HasTopDivider() bool {
	if o != nil && o.TopDivider != nil {
		return true
	}

	return false
}

// SetTopDivider gets a reference to the given bool and assigns it to the TopDivider field.
func (o *FormGroup) SetTopDivider(v bool) {
	o.TopDivider = &v
}

// GetBottomDivider returns the BottomDivider field value if set, zero value otherwise.
func (o *FormGroup) GetBottomDivider() bool {
	if o == nil || o.BottomDivider == nil {
		var ret bool
		return ret
	}
	return *o.BottomDivider
}

// GetBottomDividerOk returns a tuple with the BottomDivider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetBottomDividerOk() (*bool, bool) {
	if o == nil || o.BottomDivider == nil {
		return nil, false
	}
	return o.BottomDivider, true
}

// HasBottomDivider returns a boolean if a field has been set.
func (o *FormGroup) HasBottomDivider() bool {
	if o != nil && o.BottomDivider != nil {
		return true
	}

	return false
}

// SetBottomDivider gets a reference to the given bool and assigns it to the BottomDivider field.
func (o *FormGroup) SetBottomDivider(v bool) {
	o.BottomDivider = &v
}

// GetUseItemGroup returns the UseItemGroup field value if set, zero value otherwise.
func (o *FormGroup) GetUseItemGroup() bool {
	if o == nil || o.UseItemGroup == nil {
		var ret bool
		return ret
	}
	return *o.UseItemGroup
}

// GetUseItemGroupOk returns a tuple with the UseItemGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetUseItemGroupOk() (*bool, bool) {
	if o == nil || o.UseItemGroup == nil {
		return nil, false
	}
	return o.UseItemGroup, true
}

// HasUseItemGroup returns a boolean if a field has been set.
func (o *FormGroup) HasUseItemGroup() bool {
	if o != nil && o.UseItemGroup != nil {
		return true
	}

	return false
}

// SetUseItemGroup gets a reference to the given bool and assigns it to the UseItemGroup field.
func (o *FormGroup) SetUseItemGroup(v bool) {
	o.UseItemGroup = &v
}

// GetMinSize returns the MinSize field value if set, zero value otherwise.
func (o *FormGroup) GetMinSize() int32 {
	if o == nil || o.MinSize == nil {
		var ret int32
		return ret
	}
	return *o.MinSize
}

// GetMinSizeOk returns a tuple with the MinSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetMinSizeOk() (*int32, bool) {
	if o == nil || o.MinSize == nil {
		return nil, false
	}
	return o.MinSize, true
}

// HasMinSize returns a boolean if a field has been set.
func (o *FormGroup) HasMinSize() bool {
	if o != nil && o.MinSize != nil {
		return true
	}

	return false
}

// SetMinSize gets a reference to the given int32 and assigns it to the MinSize field.
func (o *FormGroup) SetMinSize(v int32) {
	o.MinSize = &v
}

func (o FormGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	if o.TopDivider != nil {
		toSerialize["top_divider"] = o.TopDivider
	}
	if o.BottomDivider != nil {
		toSerialize["bottom_divider"] = o.BottomDivider
	}
	if o.UseItemGroup != nil {
		toSerialize["use_item_group"] = o.UseItemGroup
	}
	if o.MinSize != nil {
		toSerialize["min_size"] = o.MinSize
	}
	return json.Marshal(toSerialize)
}

type NullableFormGroup struct {
	value *FormGroup
	isSet bool
}

func (v NullableFormGroup) Get() *FormGroup {
	return v.value
}

func (v *NullableFormGroup) Set(val *FormGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableFormGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableFormGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormGroup(val *FormGroup) *NullableFormGroup {
	return &NullableFormGroup{value: val, isSet: true}
}

func (v NullableFormGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
