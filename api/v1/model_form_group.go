/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FormGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormGroup{}

// FormGroup a group of inputs that will be displayed together in the UI
type FormGroup struct {
	// the ID of the group
	Id   string        `json:"id"`
	Type FormGroupType `json:"type"`
	// a map of values, where the key and values are strings
	Label *map[string]string `json:"label,omitempty"`
	// Optional subtitle for repeat groups. This will be computed dynamically based on the data  provided by the user and will be displayed as a subtitle in the group accordeon. The values are interpreted as JSON paths based on the data for the group.
	Subtitle []string `json:"subtitle,omitempty"`
	// a map of values, where the key and values are strings
	Info *map[string]string `json:"info,omitempty"`
	// If true, the group will be displayed in a nested UI (only works on mobile and tablet). This  is useful for more complex group that require more space to be displayed. The group will be  displayed in a separate screen, and the user will be able to navigate back and forth between  the group and the main form.
	NestedDisplay *bool `json:"nested_display,omitempty"`
	// the IDs of the inputs that will be displayed in the group
	Items []FormItem `json:"items"`
	// the attribute name to use when exporting the result of this group (only used for repeat groups)
	Target *string `json:"target,omitempty"`
	// if true, a divider will be displayed above the group
	TopDivider *bool `json:"top_divider,omitempty"`
	// if true, a divider will be displayed below the group
	BottomDivider *bool `json:"bottom_divider,omitempty"`
	// the minimum number of items that must be submitted in the group (only used for repeat groups)
	MinSize *int32 `json:"min_size,omitempty"`
	// the icon to display (only used for pages)
	Icon *string `json:"icon,omitempty"`
}

type _FormGroup FormGroup

// NewFormGroup instantiates a new FormGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormGroup(id string, type_ FormGroupType, items []FormItem) *FormGroup {
	this := FormGroup{}
	this.Id = id
	this.Type = type_
	this.Items = items
	return &this
}

// NewFormGroupWithDefaults instantiates a new FormGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormGroupWithDefaults() *FormGroup {
	this := FormGroup{}
	return &this
}

// GetId returns the Id field value
func (o *FormGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FormGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FormGroup) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *FormGroup) GetType() FormGroupType {
	if o == nil {
		var ret FormGroupType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FormGroup) GetTypeOk() (*FormGroupType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FormGroup) SetType(v FormGroupType) {
	o.Type = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FormGroup) GetLabel() map[string]string {
	if o == nil || IsNil(o.Label) {
		var ret map[string]string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetLabelOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FormGroup) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given map[string]string and assigns it to the Label field.
func (o *FormGroup) SetLabel(v map[string]string) {
	o.Label = &v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *FormGroup) GetSubtitle() []string {
	if o == nil || IsNil(o.Subtitle) {
		var ret []string
		return ret
	}
	return o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetSubtitleOk() ([]string, bool) {
	if o == nil || IsNil(o.Subtitle) {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *FormGroup) HasSubtitle() bool {
	if o != nil && !IsNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given []string and assigns it to the Subtitle field.
func (o *FormGroup) SetSubtitle(v []string) {
	o.Subtitle = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *FormGroup) GetInfo() map[string]string {
	if o == nil || IsNil(o.Info) {
		var ret map[string]string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetInfoOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *FormGroup) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]string and assigns it to the Info field.
func (o *FormGroup) SetInfo(v map[string]string) {
	o.Info = &v
}

// GetNestedDisplay returns the NestedDisplay field value if set, zero value otherwise.
func (o *FormGroup) GetNestedDisplay() bool {
	if o == nil || IsNil(o.NestedDisplay) {
		var ret bool
		return ret
	}
	return *o.NestedDisplay
}

// GetNestedDisplayOk returns a tuple with the NestedDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetNestedDisplayOk() (*bool, bool) {
	if o == nil || IsNil(o.NestedDisplay) {
		return nil, false
	}
	return o.NestedDisplay, true
}

// HasNestedDisplay returns a boolean if a field has been set.
func (o *FormGroup) HasNestedDisplay() bool {
	if o != nil && !IsNil(o.NestedDisplay) {
		return true
	}

	return false
}

// SetNestedDisplay gets a reference to the given bool and assigns it to the NestedDisplay field.
func (o *FormGroup) SetNestedDisplay(v bool) {
	o.NestedDisplay = &v
}

// GetItems returns the Items field value
func (o *FormGroup) GetItems() []FormItem {
	if o == nil {
		var ret []FormItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *FormGroup) GetItemsOk() ([]FormItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *FormGroup) SetItems(v []FormItem) {
	o.Items = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *FormGroup) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *FormGroup) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *FormGroup) SetTarget(v string) {
	o.Target = &v
}

// GetTopDivider returns the TopDivider field value if set, zero value otherwise.
func (o *FormGroup) GetTopDivider() bool {
	if o == nil || IsNil(o.TopDivider) {
		var ret bool
		return ret
	}
	return *o.TopDivider
}

// GetTopDividerOk returns a tuple with the TopDivider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetTopDividerOk() (*bool, bool) {
	if o == nil || IsNil(o.TopDivider) {
		return nil, false
	}
	return o.TopDivider, true
}

// HasTopDivider returns a boolean if a field has been set.
func (o *FormGroup) HasTopDivider() bool {
	if o != nil && !IsNil(o.TopDivider) {
		return true
	}

	return false
}

// SetTopDivider gets a reference to the given bool and assigns it to the TopDivider field.
func (o *FormGroup) SetTopDivider(v bool) {
	o.TopDivider = &v
}

// GetBottomDivider returns the BottomDivider field value if set, zero value otherwise.
func (o *FormGroup) GetBottomDivider() bool {
	if o == nil || IsNil(o.BottomDivider) {
		var ret bool
		return ret
	}
	return *o.BottomDivider
}

// GetBottomDividerOk returns a tuple with the BottomDivider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetBottomDividerOk() (*bool, bool) {
	if o == nil || IsNil(o.BottomDivider) {
		return nil, false
	}
	return o.BottomDivider, true
}

// HasBottomDivider returns a boolean if a field has been set.
func (o *FormGroup) HasBottomDivider() bool {
	if o != nil && !IsNil(o.BottomDivider) {
		return true
	}

	return false
}

// SetBottomDivider gets a reference to the given bool and assigns it to the BottomDivider field.
func (o *FormGroup) SetBottomDivider(v bool) {
	o.BottomDivider = &v
}

// GetMinSize returns the MinSize field value if set, zero value otherwise.
func (o *FormGroup) GetMinSize() int32 {
	if o == nil || IsNil(o.MinSize) {
		var ret int32
		return ret
	}
	return *o.MinSize
}

// GetMinSizeOk returns a tuple with the MinSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetMinSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.MinSize) {
		return nil, false
	}
	return o.MinSize, true
}

// HasMinSize returns a boolean if a field has been set.
func (o *FormGroup) HasMinSize() bool {
	if o != nil && !IsNil(o.MinSize) {
		return true
	}

	return false
}

// SetMinSize gets a reference to the given int32 and assigns it to the MinSize field.
func (o *FormGroup) SetMinSize(v int32) {
	o.MinSize = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *FormGroup) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormGroup) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *FormGroup) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *FormGroup) SetIcon(v string) {
	o.Icon = &v
}

func (o FormGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.NestedDisplay) {
		toSerialize["nested_display"] = o.NestedDisplay
	}
	toSerialize["items"] = o.Items
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.TopDivider) {
		toSerialize["top_divider"] = o.TopDivider
	}
	if !IsNil(o.BottomDivider) {
		toSerialize["bottom_divider"] = o.BottomDivider
	}
	if !IsNil(o.MinSize) {
		toSerialize["min_size"] = o.MinSize
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	return toSerialize, nil
}

func (o *FormGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFormGroup := _FormGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFormGroup)

	if err != nil {
		return err
	}

	*o = FormGroup(varFormGroup)

	return err
}

type NullableFormGroup struct {
	value *FormGroup
	isSet bool
}

func (v NullableFormGroup) Get() *FormGroup {
	return v.value
}

func (v *NullableFormGroup) Set(val *FormGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableFormGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableFormGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormGroup(val *FormGroup) *NullableFormGroup {
	return &NullableFormGroup{value: val, isSet: true}
}

func (v NullableFormGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
