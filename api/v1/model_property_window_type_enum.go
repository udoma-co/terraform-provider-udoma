/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// PropertyWindowTypeEnum the model 'PropertyWindowTypeEnum'
type PropertyWindowTypeEnum string

// List of PropertyWindowTypeEnum
const (
	PROPERTYWINDOWTYPEENUM_SINGLE_PANE PropertyWindowTypeEnum = "SINGLE_PANE"
	PROPERTYWINDOWTYPEENUM_DOUBLE_PANE PropertyWindowTypeEnum = "DOUBLE_PANE"
	PROPERTYWINDOWTYPEENUM_TRIPLE_PANE PropertyWindowTypeEnum = "TRIPLE_PANE"
	PROPERTYWINDOWTYPEENUM_DOUBLE_SASH PropertyWindowTypeEnum = "DOUBLE_SASH"
)

// All allowed values of PropertyWindowTypeEnum enum
var AllowedPropertyWindowTypeEnumEnumValues = []PropertyWindowTypeEnum{
	"SINGLE_PANE",
	"DOUBLE_PANE",
	"TRIPLE_PANE",
	"DOUBLE_SASH",
}

func (v *PropertyWindowTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyWindowTypeEnum(value)
	for _, existing := range AllowedPropertyWindowTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyWindowTypeEnum", value)
}

// NewPropertyWindowTypeEnumFromValue returns a pointer to a valid PropertyWindowTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyWindowTypeEnumFromValue(v string) (*PropertyWindowTypeEnum, error) {
	ev := PropertyWindowTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyWindowTypeEnum: valid values are %v", v, AllowedPropertyWindowTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyWindowTypeEnum) IsValid() bool {
	for _, existing := range AllowedPropertyWindowTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyWindowTypeEnum value
func (v PropertyWindowTypeEnum) Ptr() *PropertyWindowTypeEnum {
	return &v
}

type NullablePropertyWindowTypeEnum struct {
	value *PropertyWindowTypeEnum
	isSet bool
}

func (v NullablePropertyWindowTypeEnum) Get() *PropertyWindowTypeEnum {
	return v.value
}

func (v *NullablePropertyWindowTypeEnum) Set(val *PropertyWindowTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyWindowTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyWindowTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyWindowTypeEnum(val *PropertyWindowTypeEnum) *NullablePropertyWindowTypeEnum {
	return &NullablePropertyWindowTypeEnum{value: val, isSet: true}
}

func (v NullablePropertyWindowTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyWindowTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
