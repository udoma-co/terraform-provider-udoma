/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// PropertyHandoverStatusEnum The allowed values for a property handover status.
type PropertyHandoverStatusEnum string

// List of PropertyHandoverStatusEnum
const (
	PROPERTYHANDOVERSTATUSENUM_PENDING PropertyHandoverStatusEnum = "PENDING"
	PROPERTYHANDOVERSTATUSENUM_DONE    PropertyHandoverStatusEnum = "DONE"
)

// All allowed values of PropertyHandoverStatusEnum enum
var AllowedPropertyHandoverStatusEnumEnumValues = []PropertyHandoverStatusEnum{
	"PENDING",
	"DONE",
}

func (v *PropertyHandoverStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyHandoverStatusEnum(value)
	for _, existing := range AllowedPropertyHandoverStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyHandoverStatusEnum", value)
}

// NewPropertyHandoverStatusEnumFromValue returns a pointer to a valid PropertyHandoverStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyHandoverStatusEnumFromValue(v string) (*PropertyHandoverStatusEnum, error) {
	ev := PropertyHandoverStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyHandoverStatusEnum: valid values are %v", v, AllowedPropertyHandoverStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyHandoverStatusEnum) IsValid() bool {
	for _, existing := range AllowedPropertyHandoverStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyHandoverStatusEnum value
func (v PropertyHandoverStatusEnum) Ptr() *PropertyHandoverStatusEnum {
	return &v
}

type NullablePropertyHandoverStatusEnum struct {
	value *PropertyHandoverStatusEnum
	isSet bool
}

func (v NullablePropertyHandoverStatusEnum) Get() *PropertyHandoverStatusEnum {
	return v.value
}

func (v *NullablePropertyHandoverStatusEnum) Set(val *PropertyHandoverStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyHandoverStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyHandoverStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyHandoverStatusEnum(val *PropertyHandoverStatusEnum) *NullablePropertyHandoverStatusEnum {
	return &NullablePropertyHandoverStatusEnum{value: val, isSet: true}
}

func (v NullablePropertyHandoverStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyHandoverStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
