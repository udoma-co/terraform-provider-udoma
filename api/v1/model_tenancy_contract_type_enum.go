/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// TenancyContractTypeEnum The type of tenancy contract. This is used to determine which fields are required for the tenancy contract.
type TenancyContractTypeEnum string

// List of TenancyContractTypeEnum
const (
	TENANCYCONTRACTTYPEENUM_STANDARD            TenancyContractTypeEnum = "STANDARD"
	TENANCYCONTRACTTYPEENUM_FIXED_TERM          TenancyContractTypeEnum = "FIXED_TERM"
	TENANCYCONTRACTTYPEENUM_COMMERCIAL_LEASE    TenancyContractTypeEnum = "COMMERCIAL_LEASE"
	TENANCYCONTRACTTYPEENUM_GRADUATED_RENT      TenancyContractTypeEnum = "GRADUATED_RENT"
	TENANCYCONTRACTTYPEENUM_INDEXED_RENT        TenancyContractTypeEnum = "INDEXED_RENT"
	TENANCYCONTRACTTYPEENUM_GRATUITOUS_TRANSFER TenancyContractTypeEnum = "GRATUITOUS_TRANSFER"
)

// All allowed values of TenancyContractTypeEnum enum
var AllowedTenancyContractTypeEnumEnumValues = []TenancyContractTypeEnum{
	"STANDARD",
	"FIXED_TERM",
	"COMMERCIAL_LEASE",
	"GRADUATED_RENT",
	"INDEXED_RENT",
	"GRATUITOUS_TRANSFER",
}

func (v *TenancyContractTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TenancyContractTypeEnum(value)
	for _, existing := range AllowedTenancyContractTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TenancyContractTypeEnum", value)
}

// NewTenancyContractTypeEnumFromValue returns a pointer to a valid TenancyContractTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTenancyContractTypeEnumFromValue(v string) (*TenancyContractTypeEnum, error) {
	ev := TenancyContractTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TenancyContractTypeEnum: valid values are %v", v, AllowedTenancyContractTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TenancyContractTypeEnum) IsValid() bool {
	for _, existing := range AllowedTenancyContractTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TenancyContractTypeEnum value
func (v TenancyContractTypeEnum) Ptr() *TenancyContractTypeEnum {
	return &v
}

type NullableTenancyContractTypeEnum struct {
	value *TenancyContractTypeEnum
	isSet bool
}

func (v NullableTenancyContractTypeEnum) Get() *TenancyContractTypeEnum {
	return v.value
}

func (v *NullableTenancyContractTypeEnum) Set(val *TenancyContractTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTenancyContractTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTenancyContractTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenancyContractTypeEnum(val *TenancyContractTypeEnum) *NullableTenancyContractTypeEnum {
	return &NullableTenancyContractTypeEnum{value: val, isSet: true}
}

func (v NullableTenancyContractTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenancyContractTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
