/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CaseStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseStatus{}

// CaseStatus CaseStatus represents the update to the status of a case
type CaseStatus struct {
	// Auto-generated ID of the status update
	Id        string          `json:"id"`
	AuthorRef *UserReference  `json:"author_ref,omitempty"`
	Timestamp int64           `json:"timestamp"`
	Action    *CaseActionEnum `json:"action,omitempty"`
	Status    CaseStatusEnum  `json:"status"`
	Assignee  *CaseAssignee   `json:"assignee,omitempty"`
}

type _CaseStatus CaseStatus

// NewCaseStatus instantiates a new CaseStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseStatus(id string, timestamp int64, status CaseStatusEnum) *CaseStatus {
	this := CaseStatus{}
	this.Id = id
	this.Timestamp = timestamp
	this.Status = status
	return &this
}

// NewCaseStatusWithDefaults instantiates a new CaseStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseStatusWithDefaults() *CaseStatus {
	this := CaseStatus{}
	return &this
}

// GetId returns the Id field value
func (o *CaseStatus) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CaseStatus) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CaseStatus) SetId(v string) {
	o.Id = v
}

// GetAuthorRef returns the AuthorRef field value if set, zero value otherwise.
func (o *CaseStatus) GetAuthorRef() UserReference {
	if o == nil || IsNil(o.AuthorRef) {
		var ret UserReference
		return ret
	}
	return *o.AuthorRef
}

// GetAuthorRefOk returns a tuple with the AuthorRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseStatus) GetAuthorRefOk() (*UserReference, bool) {
	if o == nil || IsNil(o.AuthorRef) {
		return nil, false
	}
	return o.AuthorRef, true
}

// HasAuthorRef returns a boolean if a field has been set.
func (o *CaseStatus) HasAuthorRef() bool {
	if o != nil && !IsNil(o.AuthorRef) {
		return true
	}

	return false
}

// SetAuthorRef gets a reference to the given UserReference and assigns it to the AuthorRef field.
func (o *CaseStatus) SetAuthorRef(v UserReference) {
	o.AuthorRef = &v
}

// GetTimestamp returns the Timestamp field value
func (o *CaseStatus) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *CaseStatus) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *CaseStatus) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *CaseStatus) GetAction() CaseActionEnum {
	if o == nil || IsNil(o.Action) {
		var ret CaseActionEnum
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseStatus) GetActionOk() (*CaseActionEnum, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *CaseStatus) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given CaseActionEnum and assigns it to the Action field.
func (o *CaseStatus) SetAction(v CaseActionEnum) {
	o.Action = &v
}

// GetStatus returns the Status field value
func (o *CaseStatus) GetStatus() CaseStatusEnum {
	if o == nil {
		var ret CaseStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CaseStatus) GetStatusOk() (*CaseStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CaseStatus) SetStatus(v CaseStatusEnum) {
	o.Status = v
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *CaseStatus) GetAssignee() CaseAssignee {
	if o == nil || IsNil(o.Assignee) {
		var ret CaseAssignee
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseStatus) GetAssigneeOk() (*CaseAssignee, bool) {
	if o == nil || IsNil(o.Assignee) {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *CaseStatus) HasAssignee() bool {
	if o != nil && !IsNil(o.Assignee) {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given CaseAssignee and assigns it to the Assignee field.
func (o *CaseStatus) SetAssignee(v CaseAssignee) {
	o.Assignee = &v
}

func (o CaseStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.AuthorRef) {
		toSerialize["author_ref"] = o.AuthorRef
	}
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Assignee) {
		toSerialize["assignee"] = o.Assignee
	}
	return toSerialize, nil
}

func (o *CaseStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"timestamp",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCaseStatus := _CaseStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCaseStatus)

	if err != nil {
		return err
	}

	*o = CaseStatus(varCaseStatus)

	return err
}

type NullableCaseStatus struct {
	value *CaseStatus
	isSet bool
}

func (v NullableCaseStatus) Get() *CaseStatus {
	return v.value
}

func (v *NullableCaseStatus) Set(val *CaseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseStatus(val *CaseStatus) *NullableCaseStatus {
	return &NullableCaseStatus{value: val, isSet: true}
}

func (v NullableCaseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
