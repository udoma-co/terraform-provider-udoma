/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// FeedbackType the model 'FeedbackType'
type FeedbackType string

// List of FeedbackType
const (
	FEEDBACKTYPE_COMMENT_AND_RATE FeedbackType = "COMMENT_AND_RATE"
	FEEDBACKTYPE_FEATURE_REQUEST  FeedbackType = "FEATURE_REQUEST"
	FEEDBACKTYPE_ISSUE_REPORT     FeedbackType = "ISSUE_REPORT"
)

// All allowed values of FeedbackType enum
var AllowedFeedbackTypeEnumValues = []FeedbackType{
	"COMMENT_AND_RATE",
	"FEATURE_REQUEST",
	"ISSUE_REPORT",
}

func (v *FeedbackType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeedbackType(value)
	for _, existing := range AllowedFeedbackTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeedbackType", value)
}

// NewFeedbackTypeFromValue returns a pointer to a valid FeedbackType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeedbackTypeFromValue(v string) (*FeedbackType, error) {
	ev := FeedbackType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeedbackType: valid values are %v", v, AllowedFeedbackTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeedbackType) IsValid() bool {
	for _, existing := range AllowedFeedbackTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeedbackType value
func (v FeedbackType) Ptr() *FeedbackType {
	return &v
}

type NullableFeedbackType struct {
	value *FeedbackType
	isSet bool
}

func (v NullableFeedbackType) Get() *FeedbackType {
	return v.value
}

func (v *NullableFeedbackType) Set(val *FeedbackType) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackType) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackType(val *FeedbackType) *NullableFeedbackType {
	return &NullableFeedbackType{value: val, isSet: true}
}

func (v NullableFeedbackType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
