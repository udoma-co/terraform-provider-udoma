/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the IDUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IDUpload{}

// IDUpload an ID document uploaded by the user, consisting of a photo from the front and back of the ID
type IDUpload struct {
	Front *Attachment `json:"front,omitempty"`
	Back  *Attachment `json:"back,omitempty"`
}

// NewIDUpload instantiates a new IDUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIDUpload() *IDUpload {
	this := IDUpload{}
	return &this
}

// NewIDUploadWithDefaults instantiates a new IDUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIDUploadWithDefaults() *IDUpload {
	this := IDUpload{}
	return &this
}

// GetFront returns the Front field value if set, zero value otherwise.
func (o *IDUpload) GetFront() Attachment {
	if o == nil || IsNil(o.Front) {
		var ret Attachment
		return ret
	}
	return *o.Front
}

// GetFrontOk returns a tuple with the Front field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDUpload) GetFrontOk() (*Attachment, bool) {
	if o == nil || IsNil(o.Front) {
		return nil, false
	}
	return o.Front, true
}

// HasFront returns a boolean if a field has been set.
func (o *IDUpload) HasFront() bool {
	if o != nil && !IsNil(o.Front) {
		return true
	}

	return false
}

// SetFront gets a reference to the given Attachment and assigns it to the Front field.
func (o *IDUpload) SetFront(v Attachment) {
	o.Front = &v
}

// GetBack returns the Back field value if set, zero value otherwise.
func (o *IDUpload) GetBack() Attachment {
	if o == nil || IsNil(o.Back) {
		var ret Attachment
		return ret
	}
	return *o.Back
}

// GetBackOk returns a tuple with the Back field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDUpload) GetBackOk() (*Attachment, bool) {
	if o == nil || IsNil(o.Back) {
		return nil, false
	}
	return o.Back, true
}

// HasBack returns a boolean if a field has been set.
func (o *IDUpload) HasBack() bool {
	if o != nil && !IsNil(o.Back) {
		return true
	}

	return false
}

// SetBack gets a reference to the given Attachment and assigns it to the Back field.
func (o *IDUpload) SetBack(v Attachment) {
	o.Back = &v
}

func (o IDUpload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IDUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Front) {
		toSerialize["front"] = o.Front
	}
	if !IsNil(o.Back) {
		toSerialize["back"] = o.Back
	}
	return toSerialize, nil
}

type NullableIDUpload struct {
	value *IDUpload
	isSet bool
}

func (v NullableIDUpload) Get() *IDUpload {
	return v.value
}

func (v *NullableIDUpload) Set(val *IDUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableIDUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableIDUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIDUpload(val *IDUpload) *NullableIDUpload {
	return &NullableIDUpload{value: val, isSet: true}
}

func (v NullableIDUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIDUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
