/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// QueryBooleanParameter the model 'QueryBooleanParameter'
type QueryBooleanParameter string

// List of QueryBooleanParameter
const (
	QUERYBOOLEANPARAMETER_IS_TRUE  QueryBooleanParameter = "IS_TRUE"
	QUERYBOOLEANPARAMETER_IS_FALSE QueryBooleanParameter = "IS_FALSE"
	QUERYBOOLEANPARAMETER_ANY      QueryBooleanParameter = "ANY"
)

// All allowed values of QueryBooleanParameter enum
var AllowedQueryBooleanParameterEnumValues = []QueryBooleanParameter{
	"IS_TRUE",
	"IS_FALSE",
	"ANY",
}

func (v *QueryBooleanParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryBooleanParameter(value)
	for _, existing := range AllowedQueryBooleanParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryBooleanParameter", value)
}

// NewQueryBooleanParameterFromValue returns a pointer to a valid QueryBooleanParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryBooleanParameterFromValue(v string) (*QueryBooleanParameter, error) {
	ev := QueryBooleanParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryBooleanParameter: valid values are %v", v, AllowedQueryBooleanParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryBooleanParameter) IsValid() bool {
	for _, existing := range AllowedQueryBooleanParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryBooleanParameter value
func (v QueryBooleanParameter) Ptr() *QueryBooleanParameter {
	return &v
}

type NullableQueryBooleanParameter struct {
	value *QueryBooleanParameter
	isSet bool
}

func (v NullableQueryBooleanParameter) Get() *QueryBooleanParameter {
	return v.value
}

func (v *NullableQueryBooleanParameter) Set(val *QueryBooleanParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryBooleanParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryBooleanParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryBooleanParameter(val *QueryBooleanParameter) *NullableQueryBooleanParameter {
	return &NullableQueryBooleanParameter{value: val, isSet: true}
}

func (v NullableQueryBooleanParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryBooleanParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
