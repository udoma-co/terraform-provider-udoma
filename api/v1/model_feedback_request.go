/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FeedbackRequest struct for FeedbackRequest
type FeedbackRequest struct {
	Type *FeedbackType `json:"type,omitempty"`
	// Optional rating the user can provide (1-5 stars)
	Rating *float32 `json:"rating,omitempty"`
	// An optional message the user can provide
	Content *string `json:"content,omitempty"`
}

// NewFeedbackRequest instantiates a new FeedbackRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackRequest() *FeedbackRequest {
	this := FeedbackRequest{}
	return &this
}

// NewFeedbackRequestWithDefaults instantiates a new FeedbackRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackRequestWithDefaults() *FeedbackRequest {
	this := FeedbackRequest{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FeedbackRequest) GetType() FeedbackType {
	if o == nil || o.Type == nil {
		var ret FeedbackType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackRequest) GetTypeOk() (*FeedbackType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FeedbackRequest) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given FeedbackType and assigns it to the Type field.
func (o *FeedbackRequest) SetType(v FeedbackType) {
	o.Type = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *FeedbackRequest) GetRating() float32 {
	if o == nil || o.Rating == nil {
		var ret float32
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackRequest) GetRatingOk() (*float32, bool) {
	if o == nil || o.Rating == nil {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *FeedbackRequest) HasRating() bool {
	if o != nil && o.Rating != nil {
		return true
	}

	return false
}

// SetRating gets a reference to the given float32 and assigns it to the Rating field.
func (o *FeedbackRequest) SetRating(v float32) {
	o.Rating = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *FeedbackRequest) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackRequest) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *FeedbackRequest) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *FeedbackRequest) SetContent(v string) {
	o.Content = &v
}

func (o FeedbackRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Rating != nil {
		toSerialize["rating"] = o.Rating
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableFeedbackRequest struct {
	value *FeedbackRequest
	isSet bool
}

func (v NullableFeedbackRequest) Get() *FeedbackRequest {
	return v.value
}

func (v *NullableFeedbackRequest) Set(val *FeedbackRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackRequest(val *FeedbackRequest) *NullableFeedbackRequest {
	return &NullableFeedbackRequest{value: val, isSet: true}
}

func (v NullableFeedbackRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
