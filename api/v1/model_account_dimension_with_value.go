/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AccountDimensionWithValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountDimensionWithValue{}

// AccountDimensionWithValue A compact representation of a dimension with its value. This is used in sub-accounts to easily identify the dimension and its value.
type AccountDimensionWithValue struct {
	// The name of the dimension
	Name string `json:"name"`
	// A short description of the dimension
	Description *string `json:"description,omitempty"`
	// The ID of a parent dimension, if any
	ParentDimensionRef *string `json:"parent_dimension_ref,omitempty"`
	// If set to a value greater than 0, the values of the dimension will be padded with 0 to match the size. E.g. if this is set to 3, a dimension value '42' would be padded to '042'. If not set, values will not be padded.
	PadToSize *int32                            `json:"pad_to_size,omitempty"`
	RefType   AccountDimensionReferenceTypeEnum `json:"ref_type"`
	// Indicates whether providing a value for the dimension is required when adding an entry to an account
	Required *bool `json:"required,omitempty"`
	// A JS script that generates a value for the dimension.
	ValueGenerator *string `json:"value_generator,omitempty"`
	// Optional ID for the parent dimension. If set, this value is only available when the parent dimension has been set to the given ID.
	ParentId *string `json:"parent_id,omitempty"`
	// The unique ID this this value (typically the ID of the referenced entity that is mapped, e.g. property ID). This value must be unique for the given dimension, regardless of the parent dimension value.
	Id string `json:"id"`
	// The numeric value under the given dimension. This value is unique for the given dimension. If a parent dimension reference is set, then the value is only unique for the parent dimension value and may be repeated for other parent dimension values.
	Value *int32 `json:"value,omitempty"`
	// The unique ID of the dimension, for which this value is defined.
	DimensionRef *string `json:"dimension_ref,omitempty"`
	// Optional alias that holds the name of the referenced entity (e.g. property name, tenant name, etc.). This might get returned by the backend, when loading the values and when the reference is known.
	Alias *string `json:"alias,omitempty"`
}

type _AccountDimensionWithValue AccountDimensionWithValue

// NewAccountDimensionWithValue instantiates a new AccountDimensionWithValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountDimensionWithValue(name string, refType AccountDimensionReferenceTypeEnum, id string) *AccountDimensionWithValue {
	this := AccountDimensionWithValue{}
	this.Name = name
	this.RefType = refType
	this.Id = id
	return &this
}

// NewAccountDimensionWithValueWithDefaults instantiates a new AccountDimensionWithValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountDimensionWithValueWithDefaults() *AccountDimensionWithValue {
	this := AccountDimensionWithValue{}
	return &this
}

// GetName returns the Name field value
func (o *AccountDimensionWithValue) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccountDimensionWithValue) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AccountDimensionWithValue) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AccountDimensionWithValue) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AccountDimensionWithValue) SetDescription(v string) {
	o.Description = &v
}

// GetParentDimensionRef returns the ParentDimensionRef field value if set, zero value otherwise.
func (o *AccountDimensionWithValue) GetParentDimensionRef() string {
	if o == nil || IsNil(o.ParentDimensionRef) {
		var ret string
		return ret
	}
	return *o.ParentDimensionRef
}

// GetParentDimensionRefOk returns a tuple with the ParentDimensionRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetParentDimensionRefOk() (*string, bool) {
	if o == nil || IsNil(o.ParentDimensionRef) {
		return nil, false
	}
	return o.ParentDimensionRef, true
}

// HasParentDimensionRef returns a boolean if a field has been set.
func (o *AccountDimensionWithValue) HasParentDimensionRef() bool {
	if o != nil && !IsNil(o.ParentDimensionRef) {
		return true
	}

	return false
}

// SetParentDimensionRef gets a reference to the given string and assigns it to the ParentDimensionRef field.
func (o *AccountDimensionWithValue) SetParentDimensionRef(v string) {
	o.ParentDimensionRef = &v
}

// GetPadToSize returns the PadToSize field value if set, zero value otherwise.
func (o *AccountDimensionWithValue) GetPadToSize() int32 {
	if o == nil || IsNil(o.PadToSize) {
		var ret int32
		return ret
	}
	return *o.PadToSize
}

// GetPadToSizeOk returns a tuple with the PadToSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetPadToSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PadToSize) {
		return nil, false
	}
	return o.PadToSize, true
}

// HasPadToSize returns a boolean if a field has been set.
func (o *AccountDimensionWithValue) HasPadToSize() bool {
	if o != nil && !IsNil(o.PadToSize) {
		return true
	}

	return false
}

// SetPadToSize gets a reference to the given int32 and assigns it to the PadToSize field.
func (o *AccountDimensionWithValue) SetPadToSize(v int32) {
	o.PadToSize = &v
}

// GetRefType returns the RefType field value
func (o *AccountDimensionWithValue) GetRefType() AccountDimensionReferenceTypeEnum {
	if o == nil {
		var ret AccountDimensionReferenceTypeEnum
		return ret
	}

	return o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetRefTypeOk() (*AccountDimensionReferenceTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefType, true
}

// SetRefType sets field value
func (o *AccountDimensionWithValue) SetRefType(v AccountDimensionReferenceTypeEnum) {
	o.RefType = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *AccountDimensionWithValue) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *AccountDimensionWithValue) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *AccountDimensionWithValue) SetRequired(v bool) {
	o.Required = &v
}

// GetValueGenerator returns the ValueGenerator field value if set, zero value otherwise.
func (o *AccountDimensionWithValue) GetValueGenerator() string {
	if o == nil || IsNil(o.ValueGenerator) {
		var ret string
		return ret
	}
	return *o.ValueGenerator
}

// GetValueGeneratorOk returns a tuple with the ValueGenerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetValueGeneratorOk() (*string, bool) {
	if o == nil || IsNil(o.ValueGenerator) {
		return nil, false
	}
	return o.ValueGenerator, true
}

// HasValueGenerator returns a boolean if a field has been set.
func (o *AccountDimensionWithValue) HasValueGenerator() bool {
	if o != nil && !IsNil(o.ValueGenerator) {
		return true
	}

	return false
}

// SetValueGenerator gets a reference to the given string and assigns it to the ValueGenerator field.
func (o *AccountDimensionWithValue) SetValueGenerator(v string) {
	o.ValueGenerator = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *AccountDimensionWithValue) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *AccountDimensionWithValue) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *AccountDimensionWithValue) SetParentId(v string) {
	o.ParentId = &v
}

// GetId returns the Id field value
func (o *AccountDimensionWithValue) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccountDimensionWithValue) SetId(v string) {
	o.Id = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AccountDimensionWithValue) GetValue() int32 {
	if o == nil || IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AccountDimensionWithValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *AccountDimensionWithValue) SetValue(v int32) {
	o.Value = &v
}

// GetDimensionRef returns the DimensionRef field value if set, zero value otherwise.
func (o *AccountDimensionWithValue) GetDimensionRef() string {
	if o == nil || IsNil(o.DimensionRef) {
		var ret string
		return ret
	}
	return *o.DimensionRef
}

// GetDimensionRefOk returns a tuple with the DimensionRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetDimensionRefOk() (*string, bool) {
	if o == nil || IsNil(o.DimensionRef) {
		return nil, false
	}
	return o.DimensionRef, true
}

// HasDimensionRef returns a boolean if a field has been set.
func (o *AccountDimensionWithValue) HasDimensionRef() bool {
	if o != nil && !IsNil(o.DimensionRef) {
		return true
	}

	return false
}

// SetDimensionRef gets a reference to the given string and assigns it to the DimensionRef field.
func (o *AccountDimensionWithValue) SetDimensionRef(v string) {
	o.DimensionRef = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *AccountDimensionWithValue) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDimensionWithValue) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *AccountDimensionWithValue) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *AccountDimensionWithValue) SetAlias(v string) {
	o.Alias = &v
}

func (o AccountDimensionWithValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountDimensionWithValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ParentDimensionRef) {
		toSerialize["parent_dimension_ref"] = o.ParentDimensionRef
	}
	if !IsNil(o.PadToSize) {
		toSerialize["pad_to_size"] = o.PadToSize
	}
	toSerialize["ref_type"] = o.RefType
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.ValueGenerator) {
		toSerialize["value_generator"] = o.ValueGenerator
	}
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.DimensionRef) {
		toSerialize["dimension_ref"] = o.DimensionRef
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	return toSerialize, nil
}

func (o *AccountDimensionWithValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"ref_type",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountDimensionWithValue := _AccountDimensionWithValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountDimensionWithValue)

	if err != nil {
		return err
	}

	*o = AccountDimensionWithValue(varAccountDimensionWithValue)

	return err
}

type NullableAccountDimensionWithValue struct {
	value *AccountDimensionWithValue
	isSet bool
}

func (v NullableAccountDimensionWithValue) Get() *AccountDimensionWithValue {
	return v.value
}

func (v *NullableAccountDimensionWithValue) Set(val *AccountDimensionWithValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountDimensionWithValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountDimensionWithValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountDimensionWithValue(val *AccountDimensionWithValue) *NullableAccountDimensionWithValue {
	return &NullableAccountDimensionWithValue{value: val, isSet: true}
}

func (v NullableAccountDimensionWithValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountDimensionWithValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
