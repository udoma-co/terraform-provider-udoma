/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// CaseTemplateAdCategoryEnum The list of ad categories that can be displayed for a case template
type CaseTemplateAdCategoryEnum string

// List of CaseTemplateAdCategoryEnum
const (
	CASETEMPLATEADCATEGORYENUM_ELECTRICITY_PROVIDERS CaseTemplateAdCategoryEnum = "ELECTRICITY_PROVIDERS"
	CASETEMPLATEADCATEGORYENUM_INTERNET_PROVIDERS    CaseTemplateAdCategoryEnum = "INTERNET_PROVIDERS"
	CASETEMPLATEADCATEGORYENUM_GAS_PROVIDERS         CaseTemplateAdCategoryEnum = "GAS_PROVIDERS"
	CASETEMPLATEADCATEGORYENUM_HOME_INSURANCE        CaseTemplateAdCategoryEnum = "HOME_INSURANCE"
)

// All allowed values of CaseTemplateAdCategoryEnum enum
var AllowedCaseTemplateAdCategoryEnumEnumValues = []CaseTemplateAdCategoryEnum{
	"ELECTRICITY_PROVIDERS",
	"INTERNET_PROVIDERS",
	"GAS_PROVIDERS",
	"HOME_INSURANCE",
}

func (v *CaseTemplateAdCategoryEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CaseTemplateAdCategoryEnum(value)
	for _, existing := range AllowedCaseTemplateAdCategoryEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CaseTemplateAdCategoryEnum", value)
}

// NewCaseTemplateAdCategoryEnumFromValue returns a pointer to a valid CaseTemplateAdCategoryEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCaseTemplateAdCategoryEnumFromValue(v string) (*CaseTemplateAdCategoryEnum, error) {
	ev := CaseTemplateAdCategoryEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CaseTemplateAdCategoryEnum: valid values are %v", v, AllowedCaseTemplateAdCategoryEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CaseTemplateAdCategoryEnum) IsValid() bool {
	for _, existing := range AllowedCaseTemplateAdCategoryEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CaseTemplateAdCategoryEnum value
func (v CaseTemplateAdCategoryEnum) Ptr() *CaseTemplateAdCategoryEnum {
	return &v
}

type NullableCaseTemplateAdCategoryEnum struct {
	value *CaseTemplateAdCategoryEnum
	isSet bool
}

func (v NullableCaseTemplateAdCategoryEnum) Get() *CaseTemplateAdCategoryEnum {
	return v.value
}

func (v *NullableCaseTemplateAdCategoryEnum) Set(val *CaseTemplateAdCategoryEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseTemplateAdCategoryEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseTemplateAdCategoryEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseTemplateAdCategoryEnum(val *CaseTemplateAdCategoryEnum) *NullableCaseTemplateAdCategoryEnum {
	return &NullableCaseTemplateAdCategoryEnum{value: val, isSet: true}
}

func (v NullableCaseTemplateAdCategoryEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseTemplateAdCategoryEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
