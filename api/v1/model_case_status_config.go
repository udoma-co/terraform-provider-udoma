/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the CaseStatusConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaseStatusConfig{}

// CaseStatusConfig Contains the configuration for the status of a case. This is used to  determine which status changes are allowed.
type CaseStatusConfig struct {
	Action *CaseActionEnum `json:"action,omitempty"`
	// A list of possible statuses in which the case must be, so that the configuration applies.
	SourceStatus []CaseStatusEnum `json:"source_status,omitempty"`
	// The parties for which the configuration applies, that is the parties that are allowed to  execute the action when the case is in onf of the source status.
	Parties []UserTypeEnum `json:"parties,omitempty"`
	// Optional list of feedback that is requested from the party executing the action.
	Feedback []CaseFeedbackConfig `json:"feedback,omitempty"`
	// The list of parties that should be notified of the status change.
	Notify []UserTypeEnum `json:"notify,omitempty"`
}

// NewCaseStatusConfig instantiates a new CaseStatusConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseStatusConfig() *CaseStatusConfig {
	this := CaseStatusConfig{}
	return &this
}

// NewCaseStatusConfigWithDefaults instantiates a new CaseStatusConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseStatusConfigWithDefaults() *CaseStatusConfig {
	this := CaseStatusConfig{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *CaseStatusConfig) GetAction() CaseActionEnum {
	if o == nil || IsNil(o.Action) {
		var ret CaseActionEnum
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseStatusConfig) GetActionOk() (*CaseActionEnum, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *CaseStatusConfig) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given CaseActionEnum and assigns it to the Action field.
func (o *CaseStatusConfig) SetAction(v CaseActionEnum) {
	o.Action = &v
}

// GetSourceStatus returns the SourceStatus field value if set, zero value otherwise.
func (o *CaseStatusConfig) GetSourceStatus() []CaseStatusEnum {
	if o == nil || IsNil(o.SourceStatus) {
		var ret []CaseStatusEnum
		return ret
	}
	return o.SourceStatus
}

// GetSourceStatusOk returns a tuple with the SourceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseStatusConfig) GetSourceStatusOk() ([]CaseStatusEnum, bool) {
	if o == nil || IsNil(o.SourceStatus) {
		return nil, false
	}
	return o.SourceStatus, true
}

// HasSourceStatus returns a boolean if a field has been set.
func (o *CaseStatusConfig) HasSourceStatus() bool {
	if o != nil && !IsNil(o.SourceStatus) {
		return true
	}

	return false
}

// SetSourceStatus gets a reference to the given []CaseStatusEnum and assigns it to the SourceStatus field.
func (o *CaseStatusConfig) SetSourceStatus(v []CaseStatusEnum) {
	o.SourceStatus = v
}

// GetParties returns the Parties field value if set, zero value otherwise.
func (o *CaseStatusConfig) GetParties() []UserTypeEnum {
	if o == nil || IsNil(o.Parties) {
		var ret []UserTypeEnum
		return ret
	}
	return o.Parties
}

// GetPartiesOk returns a tuple with the Parties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseStatusConfig) GetPartiesOk() ([]UserTypeEnum, bool) {
	if o == nil || IsNil(o.Parties) {
		return nil, false
	}
	return o.Parties, true
}

// HasParties returns a boolean if a field has been set.
func (o *CaseStatusConfig) HasParties() bool {
	if o != nil && !IsNil(o.Parties) {
		return true
	}

	return false
}

// SetParties gets a reference to the given []UserTypeEnum and assigns it to the Parties field.
func (o *CaseStatusConfig) SetParties(v []UserTypeEnum) {
	o.Parties = v
}

// GetFeedback returns the Feedback field value if set, zero value otherwise.
func (o *CaseStatusConfig) GetFeedback() []CaseFeedbackConfig {
	if o == nil || IsNil(o.Feedback) {
		var ret []CaseFeedbackConfig
		return ret
	}
	return o.Feedback
}

// GetFeedbackOk returns a tuple with the Feedback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseStatusConfig) GetFeedbackOk() ([]CaseFeedbackConfig, bool) {
	if o == nil || IsNil(o.Feedback) {
		return nil, false
	}
	return o.Feedback, true
}

// HasFeedback returns a boolean if a field has been set.
func (o *CaseStatusConfig) HasFeedback() bool {
	if o != nil && !IsNil(o.Feedback) {
		return true
	}

	return false
}

// SetFeedback gets a reference to the given []CaseFeedbackConfig and assigns it to the Feedback field.
func (o *CaseStatusConfig) SetFeedback(v []CaseFeedbackConfig) {
	o.Feedback = v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *CaseStatusConfig) GetNotify() []UserTypeEnum {
	if o == nil || IsNil(o.Notify) {
		var ret []UserTypeEnum
		return ret
	}
	return o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseStatusConfig) GetNotifyOk() ([]UserTypeEnum, bool) {
	if o == nil || IsNil(o.Notify) {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *CaseStatusConfig) HasNotify() bool {
	if o != nil && !IsNil(o.Notify) {
		return true
	}

	return false
}

// SetNotify gets a reference to the given []UserTypeEnum and assigns it to the Notify field.
func (o *CaseStatusConfig) SetNotify(v []UserTypeEnum) {
	o.Notify = v
}

func (o CaseStatusConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaseStatusConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.SourceStatus) {
		toSerialize["source_status"] = o.SourceStatus
	}
	if !IsNil(o.Parties) {
		toSerialize["parties"] = o.Parties
	}
	if !IsNil(o.Feedback) {
		toSerialize["feedback"] = o.Feedback
	}
	if !IsNil(o.Notify) {
		toSerialize["notify"] = o.Notify
	}
	return toSerialize, nil
}

type NullableCaseStatusConfig struct {
	value *CaseStatusConfig
	isSet bool
}

func (v NullableCaseStatusConfig) Get() *CaseStatusConfig {
	return v.value
}

func (v *NullableCaseStatusConfig) Set(val *CaseStatusConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseStatusConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseStatusConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseStatusConfig(val *CaseStatusConfig) *NullableCaseStatusConfig {
	return &NullableCaseStatusConfig{value: val, isSet: true}
}

func (v NullableCaseStatusConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseStatusConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
