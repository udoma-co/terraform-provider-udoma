/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// CaseComment Comment represents a single user comment on a case
type CaseComment struct {
	Id        string        `json:"id"`
	CreatedAt int64         `json:"created_at"`
	AuthorRef UserReference `json:"author_ref"`
	Content   string        `json:"content"`
	// list of attachments that should be linked to the comment
	Attachments []Attachment `json:"attachments,omitempty"`
}

// NewCaseComment instantiates a new CaseComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseComment(id string, createdAt int64, authorRef UserReference, content string) *CaseComment {
	this := CaseComment{}
	this.Id = id
	this.CreatedAt = createdAt
	this.AuthorRef = authorRef
	this.Content = content
	return &this
}

// NewCaseCommentWithDefaults instantiates a new CaseComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseCommentWithDefaults() *CaseComment {
	this := CaseComment{}
	return &this
}

// GetId returns the Id field value
func (o *CaseComment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CaseComment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CaseComment) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CaseComment) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CaseComment) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CaseComment) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetAuthorRef returns the AuthorRef field value
func (o *CaseComment) GetAuthorRef() UserReference {
	if o == nil {
		var ret UserReference
		return ret
	}

	return o.AuthorRef
}

// GetAuthorRefOk returns a tuple with the AuthorRef field value
// and a boolean to check if the value has been set.
func (o *CaseComment) GetAuthorRefOk() (*UserReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorRef, true
}

// SetAuthorRef sets field value
func (o *CaseComment) SetAuthorRef(v UserReference) {
	o.AuthorRef = v
}

// GetContent returns the Content field value
func (o *CaseComment) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CaseComment) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CaseComment) SetContent(v string) {
	o.Content = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *CaseComment) GetAttachments() []Attachment {
	if o == nil || o.Attachments == nil {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaseComment) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || o.Attachments == nil {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *CaseComment) HasAttachments() bool {
	if o != nil && o.Attachments != nil {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *CaseComment) SetAttachments(v []Attachment) {
	o.Attachments = v
}

func (o CaseComment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["author_ref"] = o.AuthorRef
	}
	if true {
		toSerialize["content"] = o.Content
	}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	return json.Marshal(toSerialize)
}

type NullableCaseComment struct {
	value *CaseComment
	isSet bool
}

func (v NullableCaseComment) Get() *CaseComment {
	return v.value
}

func (v *NullableCaseComment) Set(val *CaseComment) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseComment) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseComment(val *CaseComment) *NullableCaseComment {
	return &NullableCaseComment{value: val, isSet: true}
}

func (v NullableCaseComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
