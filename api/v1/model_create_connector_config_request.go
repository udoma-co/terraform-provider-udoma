/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateConnectorConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateConnectorConfigRequest{}

// CreateConnectorConfigRequest Request used to update a connector config
type CreateConnectorConfigRequest struct {
	// A unique, descriptive name of the entity. This attribute is used to reference the entity in other entities or to retrieve it from the backend. The name is unique within the account, but not the entire system, and it's not generated by the backend, but provided by the user when creating the entity.
	Name string `json:"name"`
	// indicates whether the connector should push data or not. While disabled the connector will not attempt to push data to the backend, however, it will continue to ping the backend to check for updates to the config.
	Enabled *bool `json:"enabled,omitempty"`
	// short description of the connector
	Description *string `json:"description,omitempty"`
	// Whether to print the logs in the backend or ignore the logs sent by the connector.
	EnableLogs *bool `json:"enable_logs,omitempty"`
	// cron expression that tells the connector how often to sync data
	SyncTime string `json:"sync_time"`
	// cron expression that tells the connector how often to ping the server and retrieve the config
	PingTime string `json:"ping_time"`
}

type _CreateConnectorConfigRequest CreateConnectorConfigRequest

// NewCreateConnectorConfigRequest instantiates a new CreateConnectorConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateConnectorConfigRequest(name string, syncTime string, pingTime string) *CreateConnectorConfigRequest {
	this := CreateConnectorConfigRequest{}
	this.Name = name
	this.SyncTime = syncTime
	this.PingTime = pingTime
	return &this
}

// NewCreateConnectorConfigRequestWithDefaults instantiates a new CreateConnectorConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateConnectorConfigRequestWithDefaults() *CreateConnectorConfigRequest {
	this := CreateConnectorConfigRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateConnectorConfigRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateConnectorConfigRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateConnectorConfigRequest) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CreateConnectorConfigRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConnectorConfigRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CreateConnectorConfigRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CreateConnectorConfigRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateConnectorConfigRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConnectorConfigRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateConnectorConfigRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateConnectorConfigRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnableLogs returns the EnableLogs field value if set, zero value otherwise.
func (o *CreateConnectorConfigRequest) GetEnableLogs() bool {
	if o == nil || IsNil(o.EnableLogs) {
		var ret bool
		return ret
	}
	return *o.EnableLogs
}

// GetEnableLogsOk returns a tuple with the EnableLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConnectorConfigRequest) GetEnableLogsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLogs) {
		return nil, false
	}
	return o.EnableLogs, true
}

// HasEnableLogs returns a boolean if a field has been set.
func (o *CreateConnectorConfigRequest) HasEnableLogs() bool {
	if o != nil && !IsNil(o.EnableLogs) {
		return true
	}

	return false
}

// SetEnableLogs gets a reference to the given bool and assigns it to the EnableLogs field.
func (o *CreateConnectorConfigRequest) SetEnableLogs(v bool) {
	o.EnableLogs = &v
}

// GetSyncTime returns the SyncTime field value
func (o *CreateConnectorConfigRequest) GetSyncTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SyncTime
}

// GetSyncTimeOk returns a tuple with the SyncTime field value
// and a boolean to check if the value has been set.
func (o *CreateConnectorConfigRequest) GetSyncTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyncTime, true
}

// SetSyncTime sets field value
func (o *CreateConnectorConfigRequest) SetSyncTime(v string) {
	o.SyncTime = v
}

// GetPingTime returns the PingTime field value
func (o *CreateConnectorConfigRequest) GetPingTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PingTime
}

// GetPingTimeOk returns a tuple with the PingTime field value
// and a boolean to check if the value has been set.
func (o *CreateConnectorConfigRequest) GetPingTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PingTime, true
}

// SetPingTime sets field value
func (o *CreateConnectorConfigRequest) SetPingTime(v string) {
	o.PingTime = v
}

func (o CreateConnectorConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateConnectorConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EnableLogs) {
		toSerialize["enable_logs"] = o.EnableLogs
	}
	toSerialize["sync_time"] = o.SyncTime
	toSerialize["ping_time"] = o.PingTime
	return toSerialize, nil
}

func (o *CreateConnectorConfigRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"sync_time",
		"ping_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateConnectorConfigRequest := _CreateConnectorConfigRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateConnectorConfigRequest)

	if err != nil {
		return err
	}

	*o = CreateConnectorConfigRequest(varCreateConnectorConfigRequest)

	return err
}

type NullableCreateConnectorConfigRequest struct {
	value *CreateConnectorConfigRequest
	isSet bool
}

func (v NullableCreateConnectorConfigRequest) Get() *CreateConnectorConfigRequest {
	return v.value
}

func (v *NullableCreateConnectorConfigRequest) Set(val *CreateConnectorConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateConnectorConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateConnectorConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateConnectorConfigRequest(val *CreateConnectorConfigRequest) *NullableCreateConnectorConfigRequest {
	return &NullableCreateConnectorConfigRequest{value: val, isSet: true}
}

func (v NullableCreateConnectorConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateConnectorConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
