/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the RentDetailsAndData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RentDetailsAndData{}

// RentDetailsAndData Complete information about the contract regarding the rent.
type RentDetailsAndData struct {
	// the monthly rent amount
	Rent *float64 `json:"rent,omitempty"`
	// the amount of incidentals paid monthly
	Incidentals *float64 `json:"incidentals,omitempty"`
	// In case the rent type is INDEXED, this contains the timestamp of the last published index value at the time of the rent change.
	IndexMonth *int64 `json:"index_month,omitempty"`
	// In case the rent type is INDEXED, this contains the index value published at `index_month` and valid for the current rent.
	IndexPoints *float64 `json:"index_points,omitempty"`
	// Additional costs that are not part of the rent, but are paid by the tenant, e.g. garage rent, parking space rent, etc.
	AdditionalCosts []AdditionalRentCost `json:"additional_costs,omitempty"`
	// Whether the tenancy is taxed or not
	Taxable  *bool         `json:"taxable,omitempty"`
	RentType *RentTypeEnum `json:"rent_type,omitempty"`
	// the deposit amount
	Deposit *float64 `json:"deposit,omitempty"`
	// the date the graduated rent expires at
	GraduatedLength *int64 `json:"graduated_length,omitempty"`
	// A list of date-value pairs, representing a map, since the generator doesn't allow for maps that don't have strings as keys.
	GraduatedUpdates []GraduatedUpdate `json:"graduated_updates,omitempty"`
}

// NewRentDetailsAndData instantiates a new RentDetailsAndData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRentDetailsAndData() *RentDetailsAndData {
	this := RentDetailsAndData{}
	return &this
}

// NewRentDetailsAndDataWithDefaults instantiates a new RentDetailsAndData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRentDetailsAndDataWithDefaults() *RentDetailsAndData {
	this := RentDetailsAndData{}
	return &this
}

// GetRent returns the Rent field value if set, zero value otherwise.
func (o *RentDetailsAndData) GetRent() float64 {
	if o == nil || IsNil(o.Rent) {
		var ret float64
		return ret
	}
	return *o.Rent
}

// GetRentOk returns a tuple with the Rent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentDetailsAndData) GetRentOk() (*float64, bool) {
	if o == nil || IsNil(o.Rent) {
		return nil, false
	}
	return o.Rent, true
}

// HasRent returns a boolean if a field has been set.
func (o *RentDetailsAndData) HasRent() bool {
	if o != nil && !IsNil(o.Rent) {
		return true
	}

	return false
}

// SetRent gets a reference to the given float64 and assigns it to the Rent field.
func (o *RentDetailsAndData) SetRent(v float64) {
	o.Rent = &v
}

// GetIncidentals returns the Incidentals field value if set, zero value otherwise.
func (o *RentDetailsAndData) GetIncidentals() float64 {
	if o == nil || IsNil(o.Incidentals) {
		var ret float64
		return ret
	}
	return *o.Incidentals
}

// GetIncidentalsOk returns a tuple with the Incidentals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentDetailsAndData) GetIncidentalsOk() (*float64, bool) {
	if o == nil || IsNil(o.Incidentals) {
		return nil, false
	}
	return o.Incidentals, true
}

// HasIncidentals returns a boolean if a field has been set.
func (o *RentDetailsAndData) HasIncidentals() bool {
	if o != nil && !IsNil(o.Incidentals) {
		return true
	}

	return false
}

// SetIncidentals gets a reference to the given float64 and assigns it to the Incidentals field.
func (o *RentDetailsAndData) SetIncidentals(v float64) {
	o.Incidentals = &v
}

// GetIndexMonth returns the IndexMonth field value if set, zero value otherwise.
func (o *RentDetailsAndData) GetIndexMonth() int64 {
	if o == nil || IsNil(o.IndexMonth) {
		var ret int64
		return ret
	}
	return *o.IndexMonth
}

// GetIndexMonthOk returns a tuple with the IndexMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentDetailsAndData) GetIndexMonthOk() (*int64, bool) {
	if o == nil || IsNil(o.IndexMonth) {
		return nil, false
	}
	return o.IndexMonth, true
}

// HasIndexMonth returns a boolean if a field has been set.
func (o *RentDetailsAndData) HasIndexMonth() bool {
	if o != nil && !IsNil(o.IndexMonth) {
		return true
	}

	return false
}

// SetIndexMonth gets a reference to the given int64 and assigns it to the IndexMonth field.
func (o *RentDetailsAndData) SetIndexMonth(v int64) {
	o.IndexMonth = &v
}

// GetIndexPoints returns the IndexPoints field value if set, zero value otherwise.
func (o *RentDetailsAndData) GetIndexPoints() float64 {
	if o == nil || IsNil(o.IndexPoints) {
		var ret float64
		return ret
	}
	return *o.IndexPoints
}

// GetIndexPointsOk returns a tuple with the IndexPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentDetailsAndData) GetIndexPointsOk() (*float64, bool) {
	if o == nil || IsNil(o.IndexPoints) {
		return nil, false
	}
	return o.IndexPoints, true
}

// HasIndexPoints returns a boolean if a field has been set.
func (o *RentDetailsAndData) HasIndexPoints() bool {
	if o != nil && !IsNil(o.IndexPoints) {
		return true
	}

	return false
}

// SetIndexPoints gets a reference to the given float64 and assigns it to the IndexPoints field.
func (o *RentDetailsAndData) SetIndexPoints(v float64) {
	o.IndexPoints = &v
}

// GetAdditionalCosts returns the AdditionalCosts field value if set, zero value otherwise.
func (o *RentDetailsAndData) GetAdditionalCosts() []AdditionalRentCost {
	if o == nil || IsNil(o.AdditionalCosts) {
		var ret []AdditionalRentCost
		return ret
	}
	return o.AdditionalCosts
}

// GetAdditionalCostsOk returns a tuple with the AdditionalCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentDetailsAndData) GetAdditionalCostsOk() ([]AdditionalRentCost, bool) {
	if o == nil || IsNil(o.AdditionalCosts) {
		return nil, false
	}
	return o.AdditionalCosts, true
}

// HasAdditionalCosts returns a boolean if a field has been set.
func (o *RentDetailsAndData) HasAdditionalCosts() bool {
	if o != nil && !IsNil(o.AdditionalCosts) {
		return true
	}

	return false
}

// SetAdditionalCosts gets a reference to the given []AdditionalRentCost and assigns it to the AdditionalCosts field.
func (o *RentDetailsAndData) SetAdditionalCosts(v []AdditionalRentCost) {
	o.AdditionalCosts = v
}

// GetTaxable returns the Taxable field value if set, zero value otherwise.
func (o *RentDetailsAndData) GetTaxable() bool {
	if o == nil || IsNil(o.Taxable) {
		var ret bool
		return ret
	}
	return *o.Taxable
}

// GetTaxableOk returns a tuple with the Taxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentDetailsAndData) GetTaxableOk() (*bool, bool) {
	if o == nil || IsNil(o.Taxable) {
		return nil, false
	}
	return o.Taxable, true
}

// HasTaxable returns a boolean if a field has been set.
func (o *RentDetailsAndData) HasTaxable() bool {
	if o != nil && !IsNil(o.Taxable) {
		return true
	}

	return false
}

// SetTaxable gets a reference to the given bool and assigns it to the Taxable field.
func (o *RentDetailsAndData) SetTaxable(v bool) {
	o.Taxable = &v
}

// GetRentType returns the RentType field value if set, zero value otherwise.
func (o *RentDetailsAndData) GetRentType() RentTypeEnum {
	if o == nil || IsNil(o.RentType) {
		var ret RentTypeEnum
		return ret
	}
	return *o.RentType
}

// GetRentTypeOk returns a tuple with the RentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentDetailsAndData) GetRentTypeOk() (*RentTypeEnum, bool) {
	if o == nil || IsNil(o.RentType) {
		return nil, false
	}
	return o.RentType, true
}

// HasRentType returns a boolean if a field has been set.
func (o *RentDetailsAndData) HasRentType() bool {
	if o != nil && !IsNil(o.RentType) {
		return true
	}

	return false
}

// SetRentType gets a reference to the given RentTypeEnum and assigns it to the RentType field.
func (o *RentDetailsAndData) SetRentType(v RentTypeEnum) {
	o.RentType = &v
}

// GetDeposit returns the Deposit field value if set, zero value otherwise.
func (o *RentDetailsAndData) GetDeposit() float64 {
	if o == nil || IsNil(o.Deposit) {
		var ret float64
		return ret
	}
	return *o.Deposit
}

// GetDepositOk returns a tuple with the Deposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentDetailsAndData) GetDepositOk() (*float64, bool) {
	if o == nil || IsNil(o.Deposit) {
		return nil, false
	}
	return o.Deposit, true
}

// HasDeposit returns a boolean if a field has been set.
func (o *RentDetailsAndData) HasDeposit() bool {
	if o != nil && !IsNil(o.Deposit) {
		return true
	}

	return false
}

// SetDeposit gets a reference to the given float64 and assigns it to the Deposit field.
func (o *RentDetailsAndData) SetDeposit(v float64) {
	o.Deposit = &v
}

// GetGraduatedLength returns the GraduatedLength field value if set, zero value otherwise.
func (o *RentDetailsAndData) GetGraduatedLength() int64 {
	if o == nil || IsNil(o.GraduatedLength) {
		var ret int64
		return ret
	}
	return *o.GraduatedLength
}

// GetGraduatedLengthOk returns a tuple with the GraduatedLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentDetailsAndData) GetGraduatedLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.GraduatedLength) {
		return nil, false
	}
	return o.GraduatedLength, true
}

// HasGraduatedLength returns a boolean if a field has been set.
func (o *RentDetailsAndData) HasGraduatedLength() bool {
	if o != nil && !IsNil(o.GraduatedLength) {
		return true
	}

	return false
}

// SetGraduatedLength gets a reference to the given int64 and assigns it to the GraduatedLength field.
func (o *RentDetailsAndData) SetGraduatedLength(v int64) {
	o.GraduatedLength = &v
}

// GetGraduatedUpdates returns the GraduatedUpdates field value if set, zero value otherwise.
func (o *RentDetailsAndData) GetGraduatedUpdates() []GraduatedUpdate {
	if o == nil || IsNil(o.GraduatedUpdates) {
		var ret []GraduatedUpdate
		return ret
	}
	return o.GraduatedUpdates
}

// GetGraduatedUpdatesOk returns a tuple with the GraduatedUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentDetailsAndData) GetGraduatedUpdatesOk() ([]GraduatedUpdate, bool) {
	if o == nil || IsNil(o.GraduatedUpdates) {
		return nil, false
	}
	return o.GraduatedUpdates, true
}

// HasGraduatedUpdates returns a boolean if a field has been set.
func (o *RentDetailsAndData) HasGraduatedUpdates() bool {
	if o != nil && !IsNil(o.GraduatedUpdates) {
		return true
	}

	return false
}

// SetGraduatedUpdates gets a reference to the given []GraduatedUpdate and assigns it to the GraduatedUpdates field.
func (o *RentDetailsAndData) SetGraduatedUpdates(v []GraduatedUpdate) {
	o.GraduatedUpdates = v
}

func (o RentDetailsAndData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RentDetailsAndData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rent) {
		toSerialize["rent"] = o.Rent
	}
	if !IsNil(o.Incidentals) {
		toSerialize["incidentals"] = o.Incidentals
	}
	if !IsNil(o.IndexMonth) {
		toSerialize["index_month"] = o.IndexMonth
	}
	if !IsNil(o.IndexPoints) {
		toSerialize["index_points"] = o.IndexPoints
	}
	if !IsNil(o.AdditionalCosts) {
		toSerialize["additional_costs"] = o.AdditionalCosts
	}
	if !IsNil(o.Taxable) {
		toSerialize["taxable"] = o.Taxable
	}
	if !IsNil(o.RentType) {
		toSerialize["rent_type"] = o.RentType
	}
	if !IsNil(o.Deposit) {
		toSerialize["deposit"] = o.Deposit
	}
	if !IsNil(o.GraduatedLength) {
		toSerialize["graduated_length"] = o.GraduatedLength
	}
	if !IsNil(o.GraduatedUpdates) {
		toSerialize["graduated_updates"] = o.GraduatedUpdates
	}
	return toSerialize, nil
}

type NullableRentDetailsAndData struct {
	value *RentDetailsAndData
	isSet bool
}

func (v NullableRentDetailsAndData) Get() *RentDetailsAndData {
	return v.value
}

func (v *NullableRentDetailsAndData) Set(val *RentDetailsAndData) {
	v.value = val
	v.isSet = true
}

func (v NullableRentDetailsAndData) IsSet() bool {
	return v.isSet
}

func (v *NullableRentDetailsAndData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRentDetailsAndData(val *RentDetailsAndData) *NullableRentDetailsAndData {
	return &NullableRentDetailsAndData{value: val, isSet: true}
}

func (v NullableRentDetailsAndData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRentDetailsAndData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
