/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VersionMigrator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionMigrator{}

// VersionMigrator A script to migrate data from one version to another
type VersionMigrator struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt int64 `json:"updated_at"`
	// The id of the template/definition that this migrator is for.
	RefId string `json:"ref_id"`
	// The version of the template/definition that an entity has to be  referencing, so that the migrator can be applied.
	SourceVersion *int32 `json:"source_version,omitempty"`
	// The version of the template/definition that an entity will be  referencing after the migrator has been applied.
	TargetVersion int32 `json:"target_version"`
	// The JS code that will be executed to migrate the data from the source  version to the target version.
	Script string `json:"script"`
}

type _VersionMigrator VersionMigrator

// NewVersionMigrator instantiates a new VersionMigrator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionMigrator(id string, createdAt int64, updatedAt int64, refId string, targetVersion int32, script string) *VersionMigrator {
	this := VersionMigrator{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.RefId = refId
	this.TargetVersion = targetVersion
	this.Script = script
	return &this
}

// NewVersionMigratorWithDefaults instantiates a new VersionMigrator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionMigratorWithDefaults() *VersionMigrator {
	this := VersionMigrator{}
	return &this
}

// GetId returns the Id field value
func (o *VersionMigrator) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VersionMigrator) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VersionMigrator) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *VersionMigrator) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *VersionMigrator) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *VersionMigrator) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *VersionMigrator) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *VersionMigrator) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *VersionMigrator) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetRefId returns the RefId field value
func (o *VersionMigrator) GetRefId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value
// and a boolean to check if the value has been set.
func (o *VersionMigrator) GetRefIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefId, true
}

// SetRefId sets field value
func (o *VersionMigrator) SetRefId(v string) {
	o.RefId = v
}

// GetSourceVersion returns the SourceVersion field value if set, zero value otherwise.
func (o *VersionMigrator) GetSourceVersion() int32 {
	if o == nil || IsNil(o.SourceVersion) {
		var ret int32
		return ret
	}
	return *o.SourceVersion
}

// GetSourceVersionOk returns a tuple with the SourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionMigrator) GetSourceVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.SourceVersion) {
		return nil, false
	}
	return o.SourceVersion, true
}

// HasSourceVersion returns a boolean if a field has been set.
func (o *VersionMigrator) HasSourceVersion() bool {
	if o != nil && !IsNil(o.SourceVersion) {
		return true
	}

	return false
}

// SetSourceVersion gets a reference to the given int32 and assigns it to the SourceVersion field.
func (o *VersionMigrator) SetSourceVersion(v int32) {
	o.SourceVersion = &v
}

// GetTargetVersion returns the TargetVersion field value
func (o *VersionMigrator) GetTargetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TargetVersion
}

// GetTargetVersionOk returns a tuple with the TargetVersion field value
// and a boolean to check if the value has been set.
func (o *VersionMigrator) GetTargetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetVersion, true
}

// SetTargetVersion sets field value
func (o *VersionMigrator) SetTargetVersion(v int32) {
	o.TargetVersion = v
}

// GetScript returns the Script field value
func (o *VersionMigrator) GetScript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Script
}

// GetScriptOk returns a tuple with the Script field value
// and a boolean to check if the value has been set.
func (o *VersionMigrator) GetScriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Script, true
}

// SetScript sets field value
func (o *VersionMigrator) SetScript(v string) {
	o.Script = v
}

func (o VersionMigrator) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionMigrator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["ref_id"] = o.RefId
	if !IsNil(o.SourceVersion) {
		toSerialize["source_version"] = o.SourceVersion
	}
	toSerialize["target_version"] = o.TargetVersion
	toSerialize["script"] = o.Script
	return toSerialize, nil
}

func (o *VersionMigrator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"ref_id",
		"target_version",
		"script",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersionMigrator := _VersionMigrator{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVersionMigrator)

	if err != nil {
		return err
	}

	*o = VersionMigrator(varVersionMigrator)

	return err
}

type NullableVersionMigrator struct {
	value *VersionMigrator
	isSet bool
}

func (v NullableVersionMigrator) Get() *VersionMigrator {
	return v.value
}

func (v *NullableVersionMigrator) Set(val *VersionMigrator) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionMigrator) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionMigrator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionMigrator(val *VersionMigrator) *NullableVersionMigrator {
	return &NullableVersionMigrator{value: val, isSet: true}
}

func (v NullableVersionMigrator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionMigrator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
