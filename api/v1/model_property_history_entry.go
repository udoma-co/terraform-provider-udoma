/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// PropertyHistoryEntry struct for PropertyHistoryEntry
type PropertyHistoryEntry struct {
	// unique ID of the entry
	Id *string `json:"id,omitempty"`
	// Time of the entry, e.g. `1952`
	Date      *string                       `json:"date,omitempty"`
	EventType *PropertyHistoryEventTypeEnum `json:"eventType,omitempty"`
	// Indicates if the event was created by the system
	Automatic *bool `json:"automatic,omitempty"`
	// Text describing the event
	Comment *string `json:"comment,omitempty"`
}

// NewPropertyHistoryEntry instantiates a new PropertyHistoryEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyHistoryEntry() *PropertyHistoryEntry {
	this := PropertyHistoryEntry{}
	return &this
}

// NewPropertyHistoryEntryWithDefaults instantiates a new PropertyHistoryEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyHistoryEntryWithDefaults() *PropertyHistoryEntry {
	this := PropertyHistoryEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PropertyHistoryEntry) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyHistoryEntry) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PropertyHistoryEntry) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PropertyHistoryEntry) SetId(v string) {
	o.Id = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *PropertyHistoryEntry) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyHistoryEntry) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *PropertyHistoryEntry) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *PropertyHistoryEntry) SetDate(v string) {
	o.Date = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *PropertyHistoryEntry) GetEventType() PropertyHistoryEventTypeEnum {
	if o == nil || o.EventType == nil {
		var ret PropertyHistoryEventTypeEnum
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyHistoryEntry) GetEventTypeOk() (*PropertyHistoryEventTypeEnum, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *PropertyHistoryEntry) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given PropertyHistoryEventTypeEnum and assigns it to the EventType field.
func (o *PropertyHistoryEntry) SetEventType(v PropertyHistoryEventTypeEnum) {
	o.EventType = &v
}

// GetAutomatic returns the Automatic field value if set, zero value otherwise.
func (o *PropertyHistoryEntry) GetAutomatic() bool {
	if o == nil || o.Automatic == nil {
		var ret bool
		return ret
	}
	return *o.Automatic
}

// GetAutomaticOk returns a tuple with the Automatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyHistoryEntry) GetAutomaticOk() (*bool, bool) {
	if o == nil || o.Automatic == nil {
		return nil, false
	}
	return o.Automatic, true
}

// HasAutomatic returns a boolean if a field has been set.
func (o *PropertyHistoryEntry) HasAutomatic() bool {
	if o != nil && o.Automatic != nil {
		return true
	}

	return false
}

// SetAutomatic gets a reference to the given bool and assigns it to the Automatic field.
func (o *PropertyHistoryEntry) SetAutomatic(v bool) {
	o.Automatic = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *PropertyHistoryEntry) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyHistoryEntry) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *PropertyHistoryEntry) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *PropertyHistoryEntry) SetComment(v string) {
	o.Comment = &v
}

func (o PropertyHistoryEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if o.Automatic != nil {
		toSerialize["automatic"] = o.Automatic
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	return json.Marshal(toSerialize)
}

type NullablePropertyHistoryEntry struct {
	value *PropertyHistoryEntry
	isSet bool
}

func (v NullablePropertyHistoryEntry) Get() *PropertyHistoryEntry {
	return v.value
}

func (v *NullablePropertyHistoryEntry) Set(val *PropertyHistoryEntry) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyHistoryEntry) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyHistoryEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyHistoryEntry(val *PropertyHistoryEntry) *NullablePropertyHistoryEntry {
	return &NullablePropertyHistoryEntry{value: val, isSet: true}
}

func (v NullablePropertyHistoryEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyHistoryEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
