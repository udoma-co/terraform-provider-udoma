/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ReportExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportExecution{}

// ReportExecution struct for ReportExecution
type ReportExecution struct {
	Id *string `json:"id,omitempty"`
	// The timestamp of when the report execution was created
	CreatedAt *int64 `json:"created_at,omitempty"`
	// The timestamp of when the report execution was last updated
	UpdatedAt *int64                     `json:"updated_at,omitempty"`
	ReportRef *string                    `json:"report_ref,omitempty"`
	Status    *ReportExecutionStatusEnum `json:"status,omitempty"`
	// The parameters used to execute the report as a data map
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// The result of the report execution as a JSON string
	Result *string `json:"result,omitempty"`
	// Error message should the report execution fail
	Error *string `json:"error,omitempty"`
}

// NewReportExecution instantiates a new ReportExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportExecution() *ReportExecution {
	this := ReportExecution{}
	return &this
}

// NewReportExecutionWithDefaults instantiates a new ReportExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportExecutionWithDefaults() *ReportExecution {
	this := ReportExecution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReportExecution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReportExecution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReportExecution) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ReportExecution) GetCreatedAt() int64 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetCreatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ReportExecution) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *ReportExecution) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ReportExecution) GetUpdatedAt() int64 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ReportExecution) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *ReportExecution) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetReportRef returns the ReportRef field value if set, zero value otherwise.
func (o *ReportExecution) GetReportRef() string {
	if o == nil || IsNil(o.ReportRef) {
		var ret string
		return ret
	}
	return *o.ReportRef
}

// GetReportRefOk returns a tuple with the ReportRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetReportRefOk() (*string, bool) {
	if o == nil || IsNil(o.ReportRef) {
		return nil, false
	}
	return o.ReportRef, true
}

// HasReportRef returns a boolean if a field has been set.
func (o *ReportExecution) HasReportRef() bool {
	if o != nil && !IsNil(o.ReportRef) {
		return true
	}

	return false
}

// SetReportRef gets a reference to the given string and assigns it to the ReportRef field.
func (o *ReportExecution) SetReportRef(v string) {
	o.ReportRef = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ReportExecution) GetStatus() ReportExecutionStatusEnum {
	if o == nil || IsNil(o.Status) {
		var ret ReportExecutionStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetStatusOk() (*ReportExecutionStatusEnum, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ReportExecution) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ReportExecutionStatusEnum and assigns it to the Status field.
func (o *ReportExecution) SetStatus(v ReportExecutionStatusEnum) {
	o.Status = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ReportExecution) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ReportExecution) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *ReportExecution) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ReportExecution) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ReportExecution) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *ReportExecution) SetResult(v string) {
	o.Result = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ReportExecution) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ReportExecution) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ReportExecution) SetError(v string) {
	o.Error = &v
}

func (o ReportExecution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.ReportRef) {
		toSerialize["report_ref"] = o.ReportRef
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableReportExecution struct {
	value *ReportExecution
	isSet bool
}

func (v NullableReportExecution) Get() *ReportExecution {
	return v.value
}

func (v *NullableReportExecution) Set(val *ReportExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableReportExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableReportExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportExecution(val *ReportExecution) *NullableReportExecution {
	return &NullableReportExecution{value: val, isSet: true}
}

func (v NullableReportExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
