/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ReportExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportExecution{}

// ReportExecution struct for ReportExecution
type ReportExecution struct {
	// Unique and immutable ID attribute of the entity that is generated when  the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities  or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt int64                     `json:"updated_at"`
	ReportRef string                    `json:"report_ref"`
	Status    ReportExecutionStatusEnum `json:"status"`
	// The parameters used to execute the report as a data map
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// The result of the report execution as a JSON string
	Result *string `json:"result,omitempty"`
	// Error message should the report execution fail
	Error *string `json:"error,omitempty"`
}

type _ReportExecution ReportExecution

// NewReportExecution instantiates a new ReportExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportExecution(id string, createdAt int64, updatedAt int64, reportRef string, status ReportExecutionStatusEnum) *ReportExecution {
	this := ReportExecution{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.ReportRef = reportRef
	this.Status = status
	return &this
}

// NewReportExecutionWithDefaults instantiates a new ReportExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportExecutionWithDefaults() *ReportExecution {
	this := ReportExecution{}
	return &this
}

// GetId returns the Id field value
func (o *ReportExecution) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReportExecution) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ReportExecution) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ReportExecution) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ReportExecution) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ReportExecution) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetReportRef returns the ReportRef field value
func (o *ReportExecution) GetReportRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportRef
}

// GetReportRefOk returns a tuple with the ReportRef field value
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetReportRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportRef, true
}

// SetReportRef sets field value
func (o *ReportExecution) SetReportRef(v string) {
	o.ReportRef = v
}

// GetStatus returns the Status field value
func (o *ReportExecution) GetStatus() ReportExecutionStatusEnum {
	if o == nil {
		var ret ReportExecutionStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetStatusOk() (*ReportExecutionStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ReportExecution) SetStatus(v ReportExecutionStatusEnum) {
	o.Status = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ReportExecution) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ReportExecution) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *ReportExecution) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ReportExecution) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ReportExecution) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *ReportExecution) SetResult(v string) {
	o.Result = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ReportExecution) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecution) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ReportExecution) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ReportExecution) SetError(v string) {
	o.Error = &v
}

func (o ReportExecution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["report_ref"] = o.ReportRef
	toSerialize["status"] = o.Status
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

func (o *ReportExecution) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"report_ref",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportExecution := _ReportExecution{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportExecution)

	if err != nil {
		return err
	}

	*o = ReportExecution(varReportExecution)

	return err
}

type NullableReportExecution struct {
	value *ReportExecution
	isSet bool
}

func (v NullableReportExecution) Get() *ReportExecution {
	return v.value
}

func (v *NullableReportExecution) Set(val *ReportExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableReportExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableReportExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportExecution(val *ReportExecution) *NullableReportExecution {
	return &NullableReportExecution{value: val, isSet: true}
}

func (v NullableReportExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
