/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// InvitationResponseAction Accept or reject an invitation for tenancy
type InvitationResponseAction string

// List of InvitationResponseAction
const (
	INVITATIONRESPONSEACTION_ACCEPT InvitationResponseAction = "ACCEPT"
	INVITATIONRESPONSEACTION_REJECT InvitationResponseAction = "REJECT"
)

// All allowed values of InvitationResponseAction enum
var AllowedInvitationResponseActionEnumValues = []InvitationResponseAction{
	"ACCEPT",
	"REJECT",
}

func (v *InvitationResponseAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvitationResponseAction(value)
	for _, existing := range AllowedInvitationResponseActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InvitationResponseAction", value)
}

// NewInvitationResponseActionFromValue returns a pointer to a valid InvitationResponseAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvitationResponseActionFromValue(v string) (*InvitationResponseAction, error) {
	ev := InvitationResponseAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvitationResponseAction: valid values are %v", v, AllowedInvitationResponseActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvitationResponseAction) IsValid() bool {
	for _, existing := range AllowedInvitationResponseActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InvitationResponseAction value
func (v InvitationResponseAction) Ptr() *InvitationResponseAction {
	return &v
}

type NullableInvitationResponseAction struct {
	value *InvitationResponseAction
	isSet bool
}

func (v NullableInvitationResponseAction) Get() *InvitationResponseAction {
	return v.value
}

func (v *NullableInvitationResponseAction) Set(val *InvitationResponseAction) {
	v.value = val
	v.isSet = true
}

func (v NullableInvitationResponseAction) IsSet() bool {
	return v.isSet
}

func (v *NullableInvitationResponseAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvitationResponseAction(val *InvitationResponseAction) *NullableInvitationResponseAction {
	return &NullableInvitationResponseAction{value: val, isSet: true}
}

func (v NullableInvitationResponseAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvitationResponseAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
