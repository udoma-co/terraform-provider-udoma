/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// CaseStatusEnum The list of statuses that a case can be in as a result of a status change. Each status is a result of a action, where some statuses can be reached from multiple actions being triggered.
type CaseStatusEnum string

// List of CaseStatusEnum
const (
	CASESTATUSENUM_ACKNOWLEDGED       CaseStatusEnum = "ACKNOWLEDGED"
	CASESTATUSENUM_ANY                CaseStatusEnum = "ANY"
	CASESTATUSENUM_ARCHIVED           CaseStatusEnum = "ARCHIVED"
	CASESTATUSENUM_AWAITING_ACTION    CaseStatusEnum = "AWAITING_ACTION"
	CASESTATUSENUM_CANCELLED          CaseStatusEnum = "CANCELLED"
	CASESTATUSENUM_FEEDBACK_REQUESTED CaseStatusEnum = "FEEDBACK_REQUESTED"
	CASESTATUSENUM_IDLE               CaseStatusEnum = "IDLE"
	CASESTATUSENUM_IN_PROGRESS        CaseStatusEnum = "IN_PROGRESS"
	CASESTATUSENUM_OPEN               CaseStatusEnum = "OPEN"
	CASESTATUSENUM_REJECTED           CaseStatusEnum = "REJECTED"
	CASESTATUSENUM_REOPENED           CaseStatusEnum = "REOPENED"
	CASESTATUSENUM_RESOLVED           CaseStatusEnum = "RESOLVED"
	CASESTATUSENUM_WORK_ACCEPTED      CaseStatusEnum = "WORK_ACCEPTED"
	CASESTATUSENUM_WORK_COMPLETED     CaseStatusEnum = "WORK_COMPLETED"
	CASESTATUSENUM_WORK_CANCELLED     CaseStatusEnum = "WORK_CANCELLED"
	CASESTATUSENUM_WORK_REJECTED      CaseStatusEnum = "WORK_REJECTED"
	CASESTATUSENUM_WORK_REQUESTED     CaseStatusEnum = "WORK_REQUESTED"
	CASESTATUSENUM_WORK_SCHEDULED     CaseStatusEnum = "WORK_SCHEDULED"
)

// All allowed values of CaseStatusEnum enum
var AllowedCaseStatusEnumEnumValues = []CaseStatusEnum{
	"ACKNOWLEDGED",
	"ANY",
	"ARCHIVED",
	"AWAITING_ACTION",
	"CANCELLED",
	"FEEDBACK_REQUESTED",
	"IDLE",
	"IN_PROGRESS",
	"OPEN",
	"REJECTED",
	"REOPENED",
	"RESOLVED",
	"WORK_ACCEPTED",
	"WORK_COMPLETED",
	"WORK_CANCELLED",
	"WORK_REJECTED",
	"WORK_REQUESTED",
	"WORK_SCHEDULED",
}

func (v *CaseStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CaseStatusEnum(value)
	for _, existing := range AllowedCaseStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CaseStatusEnum", value)
}

// NewCaseStatusEnumFromValue returns a pointer to a valid CaseStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCaseStatusEnumFromValue(v string) (*CaseStatusEnum, error) {
	ev := CaseStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CaseStatusEnum: valid values are %v", v, AllowedCaseStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CaseStatusEnum) IsValid() bool {
	for _, existing := range AllowedCaseStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CaseStatusEnum value
func (v CaseStatusEnum) Ptr() *CaseStatusEnum {
	return &v
}

type NullableCaseStatusEnum struct {
	value *CaseStatusEnum
	isSet bool
}

func (v NullableCaseStatusEnum) Get() *CaseStatusEnum {
	return v.value
}

func (v *NullableCaseStatusEnum) Set(val *CaseStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseStatusEnum(val *CaseStatusEnum) *NullableCaseStatusEnum {
	return &NullableCaseStatusEnum{value: val, isSet: true}
}

func (v NullableCaseStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
