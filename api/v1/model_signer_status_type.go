/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// SignerStatusType the model 'SignerStatusType'
type SignerStatusType string

// List of SignerStatusType
const (
	SIGNERSTATUSTYPE_INITIATED SignerStatusType = "initiated"
	SIGNERSTATUSTYPE_SIGNED    SignerStatusType = "signed"
	SIGNERSTATUSTYPE_CANCELED  SignerStatusType = "canceled"
)

// All allowed values of SignerStatusType enum
var AllowedSignerStatusTypeEnumValues = []SignerStatusType{
	"initiated",
	"signed",
	"canceled",
}

func (v *SignerStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SignerStatusType(value)
	for _, existing := range AllowedSignerStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SignerStatusType", value)
}

// NewSignerStatusTypeFromValue returns a pointer to a valid SignerStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSignerStatusTypeFromValue(v string) (*SignerStatusType, error) {
	ev := SignerStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SignerStatusType: valid values are %v", v, AllowedSignerStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SignerStatusType) IsValid() bool {
	for _, existing := range AllowedSignerStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SignerStatusType value
func (v SignerStatusType) Ptr() *SignerStatusType {
	return &v
}

type NullableSignerStatusType struct {
	value *SignerStatusType
	isSet bool
}

func (v NullableSignerStatusType) Get() *SignerStatusType {
	return v.value
}

func (v *NullableSignerStatusType) Set(val *SignerStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableSignerStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableSignerStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignerStatusType(val *SignerStatusType) *NullableSignerStatusType {
	return &NullableSignerStatusType{value: val, isSet: true}
}

func (v NullableSignerStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignerStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
