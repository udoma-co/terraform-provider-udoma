/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Meter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Meter{}

// Meter A meter installed in a property to measure some kind of utility amount
type Meter struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt           int64         `json:"updated_at"`
	PropertyRef         string        `json:"property_ref"`
	MeterType           MeterTypeEnum `json:"meter_type"`
	Unit                string        `json:"unit"`
	Name                string        `json:"name"`
	Location            *string       `json:"location,omitempty"`
	SerialNumber        string        `json:"serial_number"`
	CalibrationDate     *int64        `json:"calibration_date,omitempty"`
	CalibrationValidity *int64        `json:"calibration_validity,omitempty"`
}

type _Meter Meter

// NewMeter instantiates a new Meter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeter(id string, createdAt int64, updatedAt int64, propertyRef string, meterType MeterTypeEnum, unit string, name string, serialNumber string) *Meter {
	this := Meter{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.PropertyRef = propertyRef
	this.MeterType = meterType
	this.Unit = unit
	this.Name = name
	this.SerialNumber = serialNumber
	return &this
}

// NewMeterWithDefaults instantiates a new Meter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeterWithDefaults() *Meter {
	this := Meter{}
	return &this
}

// GetId returns the Id field value
func (o *Meter) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Meter) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Meter) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Meter) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Meter) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Meter) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Meter) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Meter) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Meter) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetPropertyRef returns the PropertyRef field value
func (o *Meter) GetPropertyRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PropertyRef
}

// GetPropertyRefOk returns a tuple with the PropertyRef field value
// and a boolean to check if the value has been set.
func (o *Meter) GetPropertyRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PropertyRef, true
}

// SetPropertyRef sets field value
func (o *Meter) SetPropertyRef(v string) {
	o.PropertyRef = v
}

// GetMeterType returns the MeterType field value
func (o *Meter) GetMeterType() MeterTypeEnum {
	if o == nil {
		var ret MeterTypeEnum
		return ret
	}

	return o.MeterType
}

// GetMeterTypeOk returns a tuple with the MeterType field value
// and a boolean to check if the value has been set.
func (o *Meter) GetMeterTypeOk() (*MeterTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeterType, true
}

// SetMeterType sets field value
func (o *Meter) SetMeterType(v MeterTypeEnum) {
	o.MeterType = v
}

// GetUnit returns the Unit field value
func (o *Meter) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *Meter) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *Meter) SetUnit(v string) {
	o.Unit = v
}

// GetName returns the Name field value
func (o *Meter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Meter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Meter) SetName(v string) {
	o.Name = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Meter) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meter) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Meter) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Meter) SetLocation(v string) {
	o.Location = &v
}

// GetSerialNumber returns the SerialNumber field value
func (o *Meter) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *Meter) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *Meter) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetCalibrationDate returns the CalibrationDate field value if set, zero value otherwise.
func (o *Meter) GetCalibrationDate() int64 {
	if o == nil || IsNil(o.CalibrationDate) {
		var ret int64
		return ret
	}
	return *o.CalibrationDate
}

// GetCalibrationDateOk returns a tuple with the CalibrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meter) GetCalibrationDateOk() (*int64, bool) {
	if o == nil || IsNil(o.CalibrationDate) {
		return nil, false
	}
	return o.CalibrationDate, true
}

// HasCalibrationDate returns a boolean if a field has been set.
func (o *Meter) HasCalibrationDate() bool {
	if o != nil && !IsNil(o.CalibrationDate) {
		return true
	}

	return false
}

// SetCalibrationDate gets a reference to the given int64 and assigns it to the CalibrationDate field.
func (o *Meter) SetCalibrationDate(v int64) {
	o.CalibrationDate = &v
}

// GetCalibrationValidity returns the CalibrationValidity field value if set, zero value otherwise.
func (o *Meter) GetCalibrationValidity() int64 {
	if o == nil || IsNil(o.CalibrationValidity) {
		var ret int64
		return ret
	}
	return *o.CalibrationValidity
}

// GetCalibrationValidityOk returns a tuple with the CalibrationValidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meter) GetCalibrationValidityOk() (*int64, bool) {
	if o == nil || IsNil(o.CalibrationValidity) {
		return nil, false
	}
	return o.CalibrationValidity, true
}

// HasCalibrationValidity returns a boolean if a field has been set.
func (o *Meter) HasCalibrationValidity() bool {
	if o != nil && !IsNil(o.CalibrationValidity) {
		return true
	}

	return false
}

// SetCalibrationValidity gets a reference to the given int64 and assigns it to the CalibrationValidity field.
func (o *Meter) SetCalibrationValidity(v int64) {
	o.CalibrationValidity = &v
}

func (o Meter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Meter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["property_ref"] = o.PropertyRef
	toSerialize["meter_type"] = o.MeterType
	toSerialize["unit"] = o.Unit
	toSerialize["name"] = o.Name
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	toSerialize["serial_number"] = o.SerialNumber
	if !IsNil(o.CalibrationDate) {
		toSerialize["calibration_date"] = o.CalibrationDate
	}
	if !IsNil(o.CalibrationValidity) {
		toSerialize["calibration_validity"] = o.CalibrationValidity
	}
	return toSerialize, nil
}

func (o *Meter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"property_ref",
		"meter_type",
		"unit",
		"name",
		"serial_number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeter := _Meter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeter)

	if err != nil {
		return err
	}

	*o = Meter(varMeter)

	return err
}

type NullableMeter struct {
	value *Meter
	isSet bool
}

func (v NullableMeter) Get() *Meter {
	return v.value
}

func (v *NullableMeter) Set(val *Meter) {
	v.value = val
	v.isSet = true
}

func (v NullableMeter) IsSet() bool {
	return v.isSet
}

func (v *NullableMeter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeter(val *Meter) *NullableMeter {
	return &NullableMeter{value: val, isSet: true}
}

func (v NullableMeter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
