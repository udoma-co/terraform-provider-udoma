/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// PropertyParkingTypeEnum the model 'PropertyParkingTypeEnum'
type PropertyParkingTypeEnum string

// List of PropertyParkingTypeEnum
const (
	PROPERTYPARKINGTYPEENUM_GARAGE       PropertyParkingTypeEnum = "GARAGE"
	PROPERTYPARKINGTYPEENUM_PARKING_SPOT PropertyParkingTypeEnum = "PARKING_SPOT"
	PROPERTYPARKINGTYPEENUM_UNDERGROUND  PropertyParkingTypeEnum = "UNDERGROUND"
)

// All allowed values of PropertyParkingTypeEnum enum
var AllowedPropertyParkingTypeEnumEnumValues = []PropertyParkingTypeEnum{
	"GARAGE",
	"PARKING_SPOT",
	"UNDERGROUND",
}

func (v *PropertyParkingTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyParkingTypeEnum(value)
	for _, existing := range AllowedPropertyParkingTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyParkingTypeEnum", value)
}

// NewPropertyParkingTypeEnumFromValue returns a pointer to a valid PropertyParkingTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyParkingTypeEnumFromValue(v string) (*PropertyParkingTypeEnum, error) {
	ev := PropertyParkingTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyParkingTypeEnum: valid values are %v", v, AllowedPropertyParkingTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyParkingTypeEnum) IsValid() bool {
	for _, existing := range AllowedPropertyParkingTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyParkingTypeEnum value
func (v PropertyParkingTypeEnum) Ptr() *PropertyParkingTypeEnum {
	return &v
}

type NullablePropertyParkingTypeEnum struct {
	value *PropertyParkingTypeEnum
	isSet bool
}

func (v NullablePropertyParkingTypeEnum) Get() *PropertyParkingTypeEnum {
	return v.value
}

func (v *NullablePropertyParkingTypeEnum) Set(val *PropertyParkingTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyParkingTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyParkingTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyParkingTypeEnum(val *PropertyParkingTypeEnum) *NullablePropertyParkingTypeEnum {
	return &NullablePropertyParkingTypeEnum{value: val, isSet: true}
}

func (v NullablePropertyParkingTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyParkingTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
