/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the YesNoOrValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &YesNoOrValue{}

// YesNoOrValue struct for YesNoOrValue
type YesNoOrValue struct {
	// true or false value
	V *bool `json:"v,omitempty"`
	// additional string value (e.g. if value set to true)
	S *string `json:"s,omitempty"`
	// additional numeric value (e.g. if value set to true)
	N *float32 `json:"n,omitempty"`
}

// NewYesNoOrValue instantiates a new YesNoOrValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYesNoOrValue() *YesNoOrValue {
	this := YesNoOrValue{}
	return &this
}

// NewYesNoOrValueWithDefaults instantiates a new YesNoOrValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYesNoOrValueWithDefaults() *YesNoOrValue {
	this := YesNoOrValue{}
	return &this
}

// GetV returns the V field value if set, zero value otherwise.
func (o *YesNoOrValue) GetV() bool {
	if o == nil || IsNil(o.V) {
		var ret bool
		return ret
	}
	return *o.V
}

// GetVOk returns a tuple with the V field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YesNoOrValue) GetVOk() (*bool, bool) {
	if o == nil || IsNil(o.V) {
		return nil, false
	}
	return o.V, true
}

// HasV returns a boolean if a field has been set.
func (o *YesNoOrValue) HasV() bool {
	if o != nil && !IsNil(o.V) {
		return true
	}

	return false
}

// SetV gets a reference to the given bool and assigns it to the V field.
func (o *YesNoOrValue) SetV(v bool) {
	o.V = &v
}

// GetS returns the S field value if set, zero value otherwise.
func (o *YesNoOrValue) GetS() string {
	if o == nil || IsNil(o.S) {
		var ret string
		return ret
	}
	return *o.S
}

// GetSOk returns a tuple with the S field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YesNoOrValue) GetSOk() (*string, bool) {
	if o == nil || IsNil(o.S) {
		return nil, false
	}
	return o.S, true
}

// HasS returns a boolean if a field has been set.
func (o *YesNoOrValue) HasS() bool {
	if o != nil && !IsNil(o.S) {
		return true
	}

	return false
}

// SetS gets a reference to the given string and assigns it to the S field.
func (o *YesNoOrValue) SetS(v string) {
	o.S = &v
}

// GetN returns the N field value if set, zero value otherwise.
func (o *YesNoOrValue) GetN() float32 {
	if o == nil || IsNil(o.N) {
		var ret float32
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YesNoOrValue) GetNOk() (*float32, bool) {
	if o == nil || IsNil(o.N) {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *YesNoOrValue) HasN() bool {
	if o != nil && !IsNil(o.N) {
		return true
	}

	return false
}

// SetN gets a reference to the given float32 and assigns it to the N field.
func (o *YesNoOrValue) SetN(v float32) {
	o.N = &v
}

func (o YesNoOrValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o YesNoOrValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.V) {
		toSerialize["v"] = o.V
	}
	if !IsNil(o.S) {
		toSerialize["s"] = o.S
	}
	if !IsNil(o.N) {
		toSerialize["n"] = o.N
	}
	return toSerialize, nil
}

type NullableYesNoOrValue struct {
	value *YesNoOrValue
	isSet bool
}

func (v NullableYesNoOrValue) Get() *YesNoOrValue {
	return v.value
}

func (v *NullableYesNoOrValue) Set(val *YesNoOrValue) {
	v.value = val
	v.isSet = true
}

func (v NullableYesNoOrValue) IsSet() bool {
	return v.isSet
}

func (v *NullableYesNoOrValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYesNoOrValue(val *YesNoOrValue) *NullableYesNoOrValue {
	return &NullableYesNoOrValue{value: val, isSet: true}
}

func (v NullableYesNoOrValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYesNoOrValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
