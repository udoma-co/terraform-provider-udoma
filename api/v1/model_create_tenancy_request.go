/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the CreateTenancyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTenancyRequest{}

// CreateTenancyRequest Request issued by a property manager to create a new tenancy for a property
type CreateTenancyRequest struct {
	// Indicates whether the tenancy is active. Active tenancies indicate the current contract between the tenants and the property manager. Per default, new tenancies are active. This just provides a way to add past tenancies.
	Active *bool `json:"active,omitempty"`
	// The timestamp of when the tenancy has started
	StartDate *int64 `json:"start_date,omitempty"`
	// The timestamp of when the tenancy has ended or is scheduled to end (optional)
	EndDate         *int64                   `json:"end_date,omitempty"`
	ContractType    *TenancyContractTypeEnum `json:"contract_type,omitempty"`
	RentInformation *RentInformation         `json:"rent_information,omitempty"`
	// The list of tenants that are part of this tenancy. Can be empty, or include  new or existing tenants.
	Tenants []ContactData `json:"tenants,omitempty"`
	// Indicates whether the previous tenancy should be ended. If set to true, the previous tenancy will be marked inactive. If set to false, the call will fail if there is an active tenancy for the property.
	EndPreviousTenancy *bool `json:"end_previous_tenancy,omitempty"`
	// If true, directly send invitation to new tenants to join Udoma
	InviteTenants *bool `json:"invite_tenants,omitempty"`
}

// NewCreateTenancyRequest instantiates a new CreateTenancyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTenancyRequest() *CreateTenancyRequest {
	this := CreateTenancyRequest{}
	return &this
}

// NewCreateTenancyRequestWithDefaults instantiates a new CreateTenancyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTenancyRequestWithDefaults() *CreateTenancyRequest {
	this := CreateTenancyRequest{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CreateTenancyRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTenancyRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CreateTenancyRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CreateTenancyRequest) SetActive(v bool) {
	o.Active = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CreateTenancyRequest) GetStartDate() int64 {
	if o == nil || IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTenancyRequest) GetStartDateOk() (*int64, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CreateTenancyRequest) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *CreateTenancyRequest) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *CreateTenancyRequest) GetEndDate() int64 {
	if o == nil || IsNil(o.EndDate) {
		var ret int64
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTenancyRequest) GetEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *CreateTenancyRequest) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int64 and assigns it to the EndDate field.
func (o *CreateTenancyRequest) SetEndDate(v int64) {
	o.EndDate = &v
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *CreateTenancyRequest) GetContractType() TenancyContractTypeEnum {
	if o == nil || IsNil(o.ContractType) {
		var ret TenancyContractTypeEnum
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTenancyRequest) GetContractTypeOk() (*TenancyContractTypeEnum, bool) {
	if o == nil || IsNil(o.ContractType) {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *CreateTenancyRequest) HasContractType() bool {
	if o != nil && !IsNil(o.ContractType) {
		return true
	}

	return false
}

// SetContractType gets a reference to the given TenancyContractTypeEnum and assigns it to the ContractType field.
func (o *CreateTenancyRequest) SetContractType(v TenancyContractTypeEnum) {
	o.ContractType = &v
}

// GetRentInformation returns the RentInformation field value if set, zero value otherwise.
func (o *CreateTenancyRequest) GetRentInformation() RentInformation {
	if o == nil || IsNil(o.RentInformation) {
		var ret RentInformation
		return ret
	}
	return *o.RentInformation
}

// GetRentInformationOk returns a tuple with the RentInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTenancyRequest) GetRentInformationOk() (*RentInformation, bool) {
	if o == nil || IsNil(o.RentInformation) {
		return nil, false
	}
	return o.RentInformation, true
}

// HasRentInformation returns a boolean if a field has been set.
func (o *CreateTenancyRequest) HasRentInformation() bool {
	if o != nil && !IsNil(o.RentInformation) {
		return true
	}

	return false
}

// SetRentInformation gets a reference to the given RentInformation and assigns it to the RentInformation field.
func (o *CreateTenancyRequest) SetRentInformation(v RentInformation) {
	o.RentInformation = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *CreateTenancyRequest) GetTenants() []ContactData {
	if o == nil || IsNil(o.Tenants) {
		var ret []ContactData
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTenancyRequest) GetTenantsOk() ([]ContactData, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *CreateTenancyRequest) HasTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []ContactData and assigns it to the Tenants field.
func (o *CreateTenancyRequest) SetTenants(v []ContactData) {
	o.Tenants = v
}

// GetEndPreviousTenancy returns the EndPreviousTenancy field value if set, zero value otherwise.
func (o *CreateTenancyRequest) GetEndPreviousTenancy() bool {
	if o == nil || IsNil(o.EndPreviousTenancy) {
		var ret bool
		return ret
	}
	return *o.EndPreviousTenancy
}

// GetEndPreviousTenancyOk returns a tuple with the EndPreviousTenancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTenancyRequest) GetEndPreviousTenancyOk() (*bool, bool) {
	if o == nil || IsNil(o.EndPreviousTenancy) {
		return nil, false
	}
	return o.EndPreviousTenancy, true
}

// HasEndPreviousTenancy returns a boolean if a field has been set.
func (o *CreateTenancyRequest) HasEndPreviousTenancy() bool {
	if o != nil && !IsNil(o.EndPreviousTenancy) {
		return true
	}

	return false
}

// SetEndPreviousTenancy gets a reference to the given bool and assigns it to the EndPreviousTenancy field.
func (o *CreateTenancyRequest) SetEndPreviousTenancy(v bool) {
	o.EndPreviousTenancy = &v
}

// GetInviteTenants returns the InviteTenants field value if set, zero value otherwise.
func (o *CreateTenancyRequest) GetInviteTenants() bool {
	if o == nil || IsNil(o.InviteTenants) {
		var ret bool
		return ret
	}
	return *o.InviteTenants
}

// GetInviteTenantsOk returns a tuple with the InviteTenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTenancyRequest) GetInviteTenantsOk() (*bool, bool) {
	if o == nil || IsNil(o.InviteTenants) {
		return nil, false
	}
	return o.InviteTenants, true
}

// HasInviteTenants returns a boolean if a field has been set.
func (o *CreateTenancyRequest) HasInviteTenants() bool {
	if o != nil && !IsNil(o.InviteTenants) {
		return true
	}

	return false
}

// SetInviteTenants gets a reference to the given bool and assigns it to the InviteTenants field.
func (o *CreateTenancyRequest) SetInviteTenants(v bool) {
	o.InviteTenants = &v
}

func (o CreateTenancyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTenancyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.ContractType) {
		toSerialize["contract_type"] = o.ContractType
	}
	if !IsNil(o.RentInformation) {
		toSerialize["rent_information"] = o.RentInformation
	}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	if !IsNil(o.EndPreviousTenancy) {
		toSerialize["end_previous_tenancy"] = o.EndPreviousTenancy
	}
	if !IsNil(o.InviteTenants) {
		toSerialize["invite_tenants"] = o.InviteTenants
	}
	return toSerialize, nil
}

type NullableCreateTenancyRequest struct {
	value *CreateTenancyRequest
	isSet bool
}

func (v NullableCreateTenancyRequest) Get() *CreateTenancyRequest {
	return v.value
}

func (v *NullableCreateTenancyRequest) Set(val *CreateTenancyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTenancyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTenancyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTenancyRequest(val *CreateTenancyRequest) *NullableCreateTenancyRequest {
	return &NullableCreateTenancyRequest{value: val, isSet: true}
}

func (v NullableCreateTenancyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTenancyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
