/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FormInput a custom input that is used in dynamic forms to collect data from the user
type FormInput struct {
	// the ID of the input field, used to identify it and later access the data
	Id *string `json:"id,omitempty"`
	// a map of values, where the key and values are strings
	Label *map[string]string `json:"label,omitempty"`
	// a map of values, where the key and values are strings
	ViewLabel *map[string]string `json:"view_label,omitempty"`
	// a map of values, where the key and values are strings
	Placeholder *map[string]string `json:"placeholder,omitempty"`
	Type        *FormInputType     `json:"type,omitempty"`
	// optional default value for the input field (as a JSON string)
	DefaultValue *string `json:"default_value,omitempty"`
	// if true, the user will be required to provide a value
	Required *bool `json:"required,omitempty"`
	// if true, the value of the input will not be persisted
	Ephemeral *bool `json:"ephemeral,omitempty"`
	// if true, changes to the input will be propagated to event listeners for the custom form
	PropagateChanges *bool `json:"propagate_changes,omitempty"`
	// the attribute name to use when exporting the result of this input
	Target *string `json:"target,omitempty"`
	// a map of values, where the key and values are strings
	Attributes *map[string]string `json:"attributes,omitempty"`
	// only used when the type is select or multi select. This is a list of values that the user can choose from
	Items []string `json:"items,omitempty"`
}

// NewFormInput instantiates a new FormInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormInput() *FormInput {
	this := FormInput{}
	return &this
}

// NewFormInputWithDefaults instantiates a new FormInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormInputWithDefaults() *FormInput {
	this := FormInput{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FormInput) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FormInput) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FormInput) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FormInput) GetLabel() map[string]string {
	if o == nil || o.Label == nil {
		var ret map[string]string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetLabelOk() (*map[string]string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FormInput) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given map[string]string and assigns it to the Label field.
func (o *FormInput) SetLabel(v map[string]string) {
	o.Label = &v
}

// GetViewLabel returns the ViewLabel field value if set, zero value otherwise.
func (o *FormInput) GetViewLabel() map[string]string {
	if o == nil || o.ViewLabel == nil {
		var ret map[string]string
		return ret
	}
	return *o.ViewLabel
}

// GetViewLabelOk returns a tuple with the ViewLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetViewLabelOk() (*map[string]string, bool) {
	if o == nil || o.ViewLabel == nil {
		return nil, false
	}
	return o.ViewLabel, true
}

// HasViewLabel returns a boolean if a field has been set.
func (o *FormInput) HasViewLabel() bool {
	if o != nil && o.ViewLabel != nil {
		return true
	}

	return false
}

// SetViewLabel gets a reference to the given map[string]string and assigns it to the ViewLabel field.
func (o *FormInput) SetViewLabel(v map[string]string) {
	o.ViewLabel = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *FormInput) GetPlaceholder() map[string]string {
	if o == nil || o.Placeholder == nil {
		var ret map[string]string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetPlaceholderOk() (*map[string]string, bool) {
	if o == nil || o.Placeholder == nil {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *FormInput) HasPlaceholder() bool {
	if o != nil && o.Placeholder != nil {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given map[string]string and assigns it to the Placeholder field.
func (o *FormInput) SetPlaceholder(v map[string]string) {
	o.Placeholder = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FormInput) GetType() FormInputType {
	if o == nil || o.Type == nil {
		var ret FormInputType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetTypeOk() (*FormInputType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FormInput) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given FormInputType and assigns it to the Type field.
func (o *FormInput) SetType(v FormInputType) {
	o.Type = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *FormInput) GetDefaultValue() string {
	if o == nil || o.DefaultValue == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetDefaultValueOk() (*string, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *FormInput) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *FormInput) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *FormInput) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *FormInput) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *FormInput) SetRequired(v bool) {
	o.Required = &v
}

// GetEphemeral returns the Ephemeral field value if set, zero value otherwise.
func (o *FormInput) GetEphemeral() bool {
	if o == nil || o.Ephemeral == nil {
		var ret bool
		return ret
	}
	return *o.Ephemeral
}

// GetEphemeralOk returns a tuple with the Ephemeral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetEphemeralOk() (*bool, bool) {
	if o == nil || o.Ephemeral == nil {
		return nil, false
	}
	return o.Ephemeral, true
}

// HasEphemeral returns a boolean if a field has been set.
func (o *FormInput) HasEphemeral() bool {
	if o != nil && o.Ephemeral != nil {
		return true
	}

	return false
}

// SetEphemeral gets a reference to the given bool and assigns it to the Ephemeral field.
func (o *FormInput) SetEphemeral(v bool) {
	o.Ephemeral = &v
}

// GetPropagateChanges returns the PropagateChanges field value if set, zero value otherwise.
func (o *FormInput) GetPropagateChanges() bool {
	if o == nil || o.PropagateChanges == nil {
		var ret bool
		return ret
	}
	return *o.PropagateChanges
}

// GetPropagateChangesOk returns a tuple with the PropagateChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetPropagateChangesOk() (*bool, bool) {
	if o == nil || o.PropagateChanges == nil {
		return nil, false
	}
	return o.PropagateChanges, true
}

// HasPropagateChanges returns a boolean if a field has been set.
func (o *FormInput) HasPropagateChanges() bool {
	if o != nil && o.PropagateChanges != nil {
		return true
	}

	return false
}

// SetPropagateChanges gets a reference to the given bool and assigns it to the PropagateChanges field.
func (o *FormInput) SetPropagateChanges(v bool) {
	o.PropagateChanges = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *FormInput) GetTarget() string {
	if o == nil || o.Target == nil {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetTargetOk() (*string, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *FormInput) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *FormInput) SetTarget(v string) {
	o.Target = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *FormInput) GetAttributes() map[string]string {
	if o == nil || o.Attributes == nil {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *FormInput) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *FormInput) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *FormInput) GetItems() []string {
	if o == nil || o.Items == nil {
		var ret []string
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormInput) GetItemsOk() ([]string, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *FormInput) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []string and assigns it to the Items field.
func (o *FormInput) SetItems(v []string) {
	o.Items = v
}

func (o FormInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.ViewLabel != nil {
		toSerialize["view_label"] = o.ViewLabel
	}
	if o.Placeholder != nil {
		toSerialize["placeholder"] = o.Placeholder
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.DefaultValue != nil {
		toSerialize["default_value"] = o.DefaultValue
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Ephemeral != nil {
		toSerialize["ephemeral"] = o.Ephemeral
	}
	if o.PropagateChanges != nil {
		toSerialize["propagate_changes"] = o.PropagateChanges
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableFormInput struct {
	value *FormInput
	isSet bool
}

func (v NullableFormInput) Get() *FormInput {
	return v.value
}

func (v *NullableFormInput) Set(val *FormInput) {
	v.value = val
	v.isSet = true
}

func (v NullableFormInput) IsSet() bool {
	return v.isSet
}

func (v *NullableFormInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormInput(val *FormInput) *NullableFormInput {
	return &NullableFormInput{value: val, isSet: true}
}

func (v NullableFormInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
