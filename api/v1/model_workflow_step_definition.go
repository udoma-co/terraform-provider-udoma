/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// WorkflowStepDefinition a step of a workflow
type WorkflowStepDefinition struct {
	// the ID of the step, unique within the workflow
	Id *string `json:"id,omitempty"`
	// the type of the step
	Type *string `json:"type,omitempty"`
	// The icon of the step (shown in the menu). If empty, the default icon  of the step type will be used.
	Icon *string `json:"icon,omitempty"`
	// The name of the step (shown as title and in the menu). If empty, the  default name of the step type will be used.
	Name *string `json:"name,omitempty"`
	// Optional name of the group of the step. If a group is provided, steps within the same group will be grouped together in the UI as a drawer.
	GroupName *string `json:"group_name,omitempty"`
	// a parameter of a workflow step or step action. The value of the parameter is contextual and can vary in type and meaning depending on the step or action that uses it. If used in a step, the parameter will be available in the UI and will not be interpreted, i.e. JS expressions are not allowed. In actions however, the parameter might be interpreted as a JS expression, if the action type requires it.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// a map of values, where the key and values are strings
	DynamicParameters *map[string]string  `json:"dynamic_parameters,omitempty"`
	PrerunAction      *WorkflowStepAction `json:"prerun_action,omitempty"`
	// An optional JS expression that determines whether the step can be executed or  not. If not set, this will default to true, once the previous step has been  executed.
	CanBeExecutedExpression *string              `json:"can_be_executed_expression,omitempty"`
	Actions                 []WorkflowStepAction `json:"actions,omitempty"`
}

// NewWorkflowStepDefinition instantiates a new WorkflowStepDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowStepDefinition() *WorkflowStepDefinition {
	this := WorkflowStepDefinition{}
	return &this
}

// NewWorkflowStepDefinitionWithDefaults instantiates a new WorkflowStepDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowStepDefinitionWithDefaults() *WorkflowStepDefinition {
	this := WorkflowStepDefinition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowStepDefinition) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDefinition) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowStepDefinition) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowStepDefinition) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WorkflowStepDefinition) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDefinition) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WorkflowStepDefinition) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WorkflowStepDefinition) SetType(v string) {
	o.Type = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *WorkflowStepDefinition) GetIcon() string {
	if o == nil || o.Icon == nil {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDefinition) GetIconOk() (*string, bool) {
	if o == nil || o.Icon == nil {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *WorkflowStepDefinition) HasIcon() bool {
	if o != nil && o.Icon != nil {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *WorkflowStepDefinition) SetIcon(v string) {
	o.Icon = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkflowStepDefinition) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDefinition) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowStepDefinition) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkflowStepDefinition) SetName(v string) {
	o.Name = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *WorkflowStepDefinition) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDefinition) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *WorkflowStepDefinition) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *WorkflowStepDefinition) SetGroupName(v string) {
	o.GroupName = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *WorkflowStepDefinition) GetParameters() map[string]interface{} {
	if o == nil || o.Parameters == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDefinition) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *WorkflowStepDefinition) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *WorkflowStepDefinition) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetDynamicParameters returns the DynamicParameters field value if set, zero value otherwise.
func (o *WorkflowStepDefinition) GetDynamicParameters() map[string]string {
	if o == nil || o.DynamicParameters == nil {
		var ret map[string]string
		return ret
	}
	return *o.DynamicParameters
}

// GetDynamicParametersOk returns a tuple with the DynamicParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDefinition) GetDynamicParametersOk() (*map[string]string, bool) {
	if o == nil || o.DynamicParameters == nil {
		return nil, false
	}
	return o.DynamicParameters, true
}

// HasDynamicParameters returns a boolean if a field has been set.
func (o *WorkflowStepDefinition) HasDynamicParameters() bool {
	if o != nil && o.DynamicParameters != nil {
		return true
	}

	return false
}

// SetDynamicParameters gets a reference to the given map[string]string and assigns it to the DynamicParameters field.
func (o *WorkflowStepDefinition) SetDynamicParameters(v map[string]string) {
	o.DynamicParameters = &v
}

// GetPrerunAction returns the PrerunAction field value if set, zero value otherwise.
func (o *WorkflowStepDefinition) GetPrerunAction() WorkflowStepAction {
	if o == nil || o.PrerunAction == nil {
		var ret WorkflowStepAction
		return ret
	}
	return *o.PrerunAction
}

// GetPrerunActionOk returns a tuple with the PrerunAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDefinition) GetPrerunActionOk() (*WorkflowStepAction, bool) {
	if o == nil || o.PrerunAction == nil {
		return nil, false
	}
	return o.PrerunAction, true
}

// HasPrerunAction returns a boolean if a field has been set.
func (o *WorkflowStepDefinition) HasPrerunAction() bool {
	if o != nil && o.PrerunAction != nil {
		return true
	}

	return false
}

// SetPrerunAction gets a reference to the given WorkflowStepAction and assigns it to the PrerunAction field.
func (o *WorkflowStepDefinition) SetPrerunAction(v WorkflowStepAction) {
	o.PrerunAction = &v
}

// GetCanBeExecutedExpression returns the CanBeExecutedExpression field value if set, zero value otherwise.
func (o *WorkflowStepDefinition) GetCanBeExecutedExpression() string {
	if o == nil || o.CanBeExecutedExpression == nil {
		var ret string
		return ret
	}
	return *o.CanBeExecutedExpression
}

// GetCanBeExecutedExpressionOk returns a tuple with the CanBeExecutedExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDefinition) GetCanBeExecutedExpressionOk() (*string, bool) {
	if o == nil || o.CanBeExecutedExpression == nil {
		return nil, false
	}
	return o.CanBeExecutedExpression, true
}

// HasCanBeExecutedExpression returns a boolean if a field has been set.
func (o *WorkflowStepDefinition) HasCanBeExecutedExpression() bool {
	if o != nil && o.CanBeExecutedExpression != nil {
		return true
	}

	return false
}

// SetCanBeExecutedExpression gets a reference to the given string and assigns it to the CanBeExecutedExpression field.
func (o *WorkflowStepDefinition) SetCanBeExecutedExpression(v string) {
	o.CanBeExecutedExpression = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *WorkflowStepDefinition) GetActions() []WorkflowStepAction {
	if o == nil || o.Actions == nil {
		var ret []WorkflowStepAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowStepDefinition) GetActionsOk() ([]WorkflowStepAction, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *WorkflowStepDefinition) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []WorkflowStepAction and assigns it to the Actions field.
func (o *WorkflowStepDefinition) SetActions(v []WorkflowStepAction) {
	o.Actions = v
}

func (o WorkflowStepDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Icon != nil {
		toSerialize["icon"] = o.Icon
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.GroupName != nil {
		toSerialize["group_name"] = o.GroupName
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.DynamicParameters != nil {
		toSerialize["dynamic_parameters"] = o.DynamicParameters
	}
	if o.PrerunAction != nil {
		toSerialize["prerun_action"] = o.PrerunAction
	}
	if o.CanBeExecutedExpression != nil {
		toSerialize["can_be_executed_expression"] = o.CanBeExecutedExpression
	}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowStepDefinition struct {
	value *WorkflowStepDefinition
	isSet bool
}

func (v NullableWorkflowStepDefinition) Get() *WorkflowStepDefinition {
	return v.value
}

func (v *NullableWorkflowStepDefinition) Set(val *WorkflowStepDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowStepDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowStepDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowStepDefinition(val *WorkflowStepDefinition) *NullableWorkflowStepDefinition {
	return &NullableWorkflowStepDefinition{value: val, isSet: true}
}

func (v NullableWorkflowStepDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowStepDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
