/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// ReportExecutionStatusEnum the model 'ReportExecutionStatusEnum'
type ReportExecutionStatusEnum string

// List of ReportExecutionStatusEnum
const (
	REPORTEXECUTIONSTATUSENUM_SCHEDULED ReportExecutionStatusEnum = "SCHEDULED"
	REPORTEXECUTIONSTATUSENUM_RUNNING   ReportExecutionStatusEnum = "RUNNING"
	REPORTEXECUTIONSTATUSENUM_COMPLETED ReportExecutionStatusEnum = "COMPLETED"
	REPORTEXECUTIONSTATUSENUM_FAILED    ReportExecutionStatusEnum = "FAILED"
)

// All allowed values of ReportExecutionStatusEnum enum
var AllowedReportExecutionStatusEnumEnumValues = []ReportExecutionStatusEnum{
	"SCHEDULED",
	"RUNNING",
	"COMPLETED",
	"FAILED",
}

func (v *ReportExecutionStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportExecutionStatusEnum(value)
	for _, existing := range AllowedReportExecutionStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportExecutionStatusEnum", value)
}

// NewReportExecutionStatusEnumFromValue returns a pointer to a valid ReportExecutionStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportExecutionStatusEnumFromValue(v string) (*ReportExecutionStatusEnum, error) {
	ev := ReportExecutionStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportExecutionStatusEnum: valid values are %v", v, AllowedReportExecutionStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportExecutionStatusEnum) IsValid() bool {
	for _, existing := range AllowedReportExecutionStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReportExecutionStatusEnum value
func (v ReportExecutionStatusEnum) Ptr() *ReportExecutionStatusEnum {
	return &v
}

type NullableReportExecutionStatusEnum struct {
	value *ReportExecutionStatusEnum
	isSet bool
}

func (v NullableReportExecutionStatusEnum) Get() *ReportExecutionStatusEnum {
	return v.value
}

func (v *NullableReportExecutionStatusEnum) Set(val *ReportExecutionStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReportExecutionStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReportExecutionStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportExecutionStatusEnum(val *ReportExecutionStatusEnum) *NullableReportExecutionStatusEnum {
	return &NullableReportExecutionStatusEnum{value: val, isSet: true}
}

func (v NullableReportExecutionStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportExecutionStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
