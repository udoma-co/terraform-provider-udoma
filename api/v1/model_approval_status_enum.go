/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// ApprovalStatusEnum The list of possible statuses for an approval.
type ApprovalStatusEnum string

// List of ApprovalStatusEnum
const (
	APPROVALSTATUSENUM_PENDING   ApprovalStatusEnum = "PENDING"
	APPROVALSTATUSENUM_CONFIRMED ApprovalStatusEnum = "CONFIRMED"
	APPROVALSTATUSENUM_REJECTED  ApprovalStatusEnum = "REJECTED"
)

// All allowed values of ApprovalStatusEnum enum
var AllowedApprovalStatusEnumEnumValues = []ApprovalStatusEnum{
	"PENDING",
	"CONFIRMED",
	"REJECTED",
}

func (v *ApprovalStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApprovalStatusEnum(value)
	for _, existing := range AllowedApprovalStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApprovalStatusEnum", value)
}

// NewApprovalStatusEnumFromValue returns a pointer to a valid ApprovalStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApprovalStatusEnumFromValue(v string) (*ApprovalStatusEnum, error) {
	ev := ApprovalStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApprovalStatusEnum: valid values are %v", v, AllowedApprovalStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApprovalStatusEnum) IsValid() bool {
	for _, existing := range AllowedApprovalStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApprovalStatusEnum value
func (v ApprovalStatusEnum) Ptr() *ApprovalStatusEnum {
	return &v
}

type NullableApprovalStatusEnum struct {
	value *ApprovalStatusEnum
	isSet bool
}

func (v NullableApprovalStatusEnum) Get() *ApprovalStatusEnum {
	return v.value
}

func (v *NullableApprovalStatusEnum) Set(val *ApprovalStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalStatusEnum(val *ApprovalStatusEnum) *NullableApprovalStatusEnum {
	return &NullableApprovalStatusEnum{value: val, isSet: true}
}

func (v NullableApprovalStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
