/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FinancialAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinancialAccount{}

// FinancialAccount A financial account that can be used to track financial transactions
type FinancialAccount struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt int64 `json:"updated_at"`
	// The unique account number, manually set
	Number int32 `json:"number"`
	// The name of the account
	Name string           `json:"name"`
	Type AccountTypesEnum `json:"type"`
	// Indicates whether the account is part of the balance sheet. If set to false, the account is part of the profit and loss statement.
	IsBalance *bool `json:"is_balance,omitempty"`
	// The currency of the booking
	Currency string `json:"currency"`
	// The dimensions that are assigned to the account
	Dimensions []AccountDimension `json:"dimensions,omitempty"`
}

type _FinancialAccount FinancialAccount

// NewFinancialAccount instantiates a new FinancialAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialAccount(id string, createdAt int64, updatedAt int64, number int32, name string, type_ AccountTypesEnum, currency string) *FinancialAccount {
	this := FinancialAccount{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Number = number
	this.Name = name
	this.Type = type_
	this.Currency = currency
	return &this
}

// NewFinancialAccountWithDefaults instantiates a new FinancialAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialAccountWithDefaults() *FinancialAccount {
	this := FinancialAccount{}
	return &this
}

// GetId returns the Id field value
func (o *FinancialAccount) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FinancialAccount) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *FinancialAccount) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *FinancialAccount) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *FinancialAccount) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *FinancialAccount) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetNumber returns the Number field value
func (o *FinancialAccount) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *FinancialAccount) SetNumber(v int32) {
	o.Number = v
}

// GetName returns the Name field value
func (o *FinancialAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FinancialAccount) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *FinancialAccount) GetType() AccountTypesEnum {
	if o == nil {
		var ret AccountTypesEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetTypeOk() (*AccountTypesEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FinancialAccount) SetType(v AccountTypesEnum) {
	o.Type = v
}

// GetIsBalance returns the IsBalance field value if set, zero value otherwise.
func (o *FinancialAccount) GetIsBalance() bool {
	if o == nil || IsNil(o.IsBalance) {
		var ret bool
		return ret
	}
	return *o.IsBalance
}

// GetIsBalanceOk returns a tuple with the IsBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetIsBalanceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBalance) {
		return nil, false
	}
	return o.IsBalance, true
}

// HasIsBalance returns a boolean if a field has been set.
func (o *FinancialAccount) HasIsBalance() bool {
	if o != nil && !IsNil(o.IsBalance) {
		return true
	}

	return false
}

// SetIsBalance gets a reference to the given bool and assigns it to the IsBalance field.
func (o *FinancialAccount) SetIsBalance(v bool) {
	o.IsBalance = &v
}

// GetCurrency returns the Currency field value
func (o *FinancialAccount) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *FinancialAccount) SetCurrency(v string) {
	o.Currency = v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *FinancialAccount) GetDimensions() []AccountDimension {
	if o == nil || IsNil(o.Dimensions) {
		var ret []AccountDimension
		return ret
	}
	return o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetDimensionsOk() ([]AccountDimension, bool) {
	if o == nil || IsNil(o.Dimensions) {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *FinancialAccount) HasDimensions() bool {
	if o != nil && !IsNil(o.Dimensions) {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given []AccountDimension and assigns it to the Dimensions field.
func (o *FinancialAccount) SetDimensions(v []AccountDimension) {
	o.Dimensions = v
}

func (o FinancialAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinancialAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["number"] = o.Number
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.IsBalance) {
		toSerialize["is_balance"] = o.IsBalance
	}
	toSerialize["currency"] = o.Currency
	if !IsNil(o.Dimensions) {
		toSerialize["dimensions"] = o.Dimensions
	}
	return toSerialize, nil
}

func (o *FinancialAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"number",
		"name",
		"type",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFinancialAccount := _FinancialAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFinancialAccount)

	if err != nil {
		return err
	}

	*o = FinancialAccount(varFinancialAccount)

	return err
}

type NullableFinancialAccount struct {
	value *FinancialAccount
	isSet bool
}

func (v NullableFinancialAccount) Get() *FinancialAccount {
	return v.value
}

func (v *NullableFinancialAccount) Set(val *FinancialAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialAccount(val *FinancialAccount) *NullableFinancialAccount {
	return &NullableFinancialAccount{value: val, isSet: true}
}

func (v NullableFinancialAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
