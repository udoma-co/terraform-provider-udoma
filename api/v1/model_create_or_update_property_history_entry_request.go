/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateOrUpdatePropertyHistoryEntryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrUpdatePropertyHistoryEntryRequest{}

// CreateOrUpdatePropertyHistoryEntryRequest struct for CreateOrUpdatePropertyHistoryEntryRequest
type CreateOrUpdatePropertyHistoryEntryRequest struct {
	// Time of the entry, e.g. `1952-10-01 12:00`
	Date      string                       `json:"date"`
	EventType PropertyHistoryEventTypeEnum `json:"eventType"`
	// Text describing the event
	Comment *string `json:"comment,omitempty"`
}

type _CreateOrUpdatePropertyHistoryEntryRequest CreateOrUpdatePropertyHistoryEntryRequest

// NewCreateOrUpdatePropertyHistoryEntryRequest instantiates a new CreateOrUpdatePropertyHistoryEntryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrUpdatePropertyHistoryEntryRequest(date string, eventType PropertyHistoryEventTypeEnum) *CreateOrUpdatePropertyHistoryEntryRequest {
	this := CreateOrUpdatePropertyHistoryEntryRequest{}
	this.Date = date
	this.EventType = eventType
	return &this
}

// NewCreateOrUpdatePropertyHistoryEntryRequestWithDefaults instantiates a new CreateOrUpdatePropertyHistoryEntryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrUpdatePropertyHistoryEntryRequestWithDefaults() *CreateOrUpdatePropertyHistoryEntryRequest {
	this := CreateOrUpdatePropertyHistoryEntryRequest{}
	return &this
}

// GetDate returns the Date field value
func (o *CreateOrUpdatePropertyHistoryEntryRequest) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdatePropertyHistoryEntryRequest) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CreateOrUpdatePropertyHistoryEntryRequest) SetDate(v string) {
	o.Date = v
}

// GetEventType returns the EventType field value
func (o *CreateOrUpdatePropertyHistoryEntryRequest) GetEventType() PropertyHistoryEventTypeEnum {
	if o == nil {
		var ret PropertyHistoryEventTypeEnum
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdatePropertyHistoryEntryRequest) GetEventTypeOk() (*PropertyHistoryEventTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *CreateOrUpdatePropertyHistoryEntryRequest) SetEventType(v PropertyHistoryEventTypeEnum) {
	o.EventType = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CreateOrUpdatePropertyHistoryEntryRequest) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdatePropertyHistoryEntryRequest) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CreateOrUpdatePropertyHistoryEntryRequest) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CreateOrUpdatePropertyHistoryEntryRequest) SetComment(v string) {
	o.Comment = &v
}

func (o CreateOrUpdatePropertyHistoryEntryRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrUpdatePropertyHistoryEntryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["eventType"] = o.EventType
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

func (o *CreateOrUpdatePropertyHistoryEntryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"eventType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateOrUpdatePropertyHistoryEntryRequest := _CreateOrUpdatePropertyHistoryEntryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateOrUpdatePropertyHistoryEntryRequest)

	if err != nil {
		return err
	}

	*o = CreateOrUpdatePropertyHistoryEntryRequest(varCreateOrUpdatePropertyHistoryEntryRequest)

	return err
}

type NullableCreateOrUpdatePropertyHistoryEntryRequest struct {
	value *CreateOrUpdatePropertyHistoryEntryRequest
	isSet bool
}

func (v NullableCreateOrUpdatePropertyHistoryEntryRequest) Get() *CreateOrUpdatePropertyHistoryEntryRequest {
	return v.value
}

func (v *NullableCreateOrUpdatePropertyHistoryEntryRequest) Set(val *CreateOrUpdatePropertyHistoryEntryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrUpdatePropertyHistoryEntryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrUpdatePropertyHistoryEntryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrUpdatePropertyHistoryEntryRequest(val *CreateOrUpdatePropertyHistoryEntryRequest) *NullableCreateOrUpdatePropertyHistoryEntryRequest {
	return &NullableCreateOrUpdatePropertyHistoryEntryRequest{value: val, isSet: true}
}

func (v NullableCreateOrUpdatePropertyHistoryEntryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrUpdatePropertyHistoryEntryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
