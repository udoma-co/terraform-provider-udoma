/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AccessRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessRecord{}

// AccessRecord struct for AccessRecord
type AccessRecord struct {
	// A unique ID generated for the access record
	Id string `json:"id"`
	// A timestamp of when the object was created
	CreatedAt int64 `json:"created_at"`
	// ID referencing the correspondence the access record was created for
	CorrespondenceRef string           `json:"correspondence_ref"`
	CollectedData     AccessRecordData `json:"collected_data"`
}

type _AccessRecord AccessRecord

// NewAccessRecord instantiates a new AccessRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessRecord(id string, createdAt int64, correspondenceRef string, collectedData AccessRecordData) *AccessRecord {
	this := AccessRecord{}
	this.Id = id
	this.CreatedAt = createdAt
	this.CorrespondenceRef = correspondenceRef
	this.CollectedData = collectedData
	return &this
}

// NewAccessRecordWithDefaults instantiates a new AccessRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessRecordWithDefaults() *AccessRecord {
	this := AccessRecord{}
	return &this
}

// GetId returns the Id field value
func (o *AccessRecord) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccessRecord) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccessRecord) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *AccessRecord) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *AccessRecord) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *AccessRecord) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetCorrespondenceRef returns the CorrespondenceRef field value
func (o *AccessRecord) GetCorrespondenceRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CorrespondenceRef
}

// GetCorrespondenceRefOk returns a tuple with the CorrespondenceRef field value
// and a boolean to check if the value has been set.
func (o *AccessRecord) GetCorrespondenceRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CorrespondenceRef, true
}

// SetCorrespondenceRef sets field value
func (o *AccessRecord) SetCorrespondenceRef(v string) {
	o.CorrespondenceRef = v
}

// GetCollectedData returns the CollectedData field value
func (o *AccessRecord) GetCollectedData() AccessRecordData {
	if o == nil {
		var ret AccessRecordData
		return ret
	}

	return o.CollectedData
}

// GetCollectedDataOk returns a tuple with the CollectedData field value
// and a boolean to check if the value has been set.
func (o *AccessRecord) GetCollectedDataOk() (*AccessRecordData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectedData, true
}

// SetCollectedData sets field value
func (o *AccessRecord) SetCollectedData(v AccessRecordData) {
	o.CollectedData = v
}

func (o AccessRecord) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["correspondence_ref"] = o.CorrespondenceRef
	toSerialize["collected_data"] = o.CollectedData
	return toSerialize, nil
}

func (o *AccessRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"correspondence_ref",
		"collected_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessRecord := _AccessRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessRecord)

	if err != nil {
		return err
	}

	*o = AccessRecord(varAccessRecord)

	return err
}

type NullableAccessRecord struct {
	value *AccessRecord
	isSet bool
}

func (v NullableAccessRecord) Get() *AccessRecord {
	return v.value
}

func (v *NullableAccessRecord) Set(val *AccessRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessRecord(val *AccessRecord) *NullableAccessRecord {
	return &NullableAccessRecord{value: val, isSet: true}
}

func (v NullableAccessRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
