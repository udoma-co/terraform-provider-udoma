/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConnectorCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorCredentials{}

// ConnectorCredentials Connector credentials
type ConnectorCredentials struct {
	// api key of the connector
	ApiKey string `json:"api_key"`
	// api secret of the connector
	ApiSecret string `json:"api_secret"`
	// timestamp of the last access of the credentials
	LastAccess int64 `json:"last_access"`
}

type _ConnectorCredentials ConnectorCredentials

// NewConnectorCredentials instantiates a new ConnectorCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorCredentials(apiKey string, apiSecret string, lastAccess int64) *ConnectorCredentials {
	this := ConnectorCredentials{}
	this.ApiKey = apiKey
	this.ApiSecret = apiSecret
	this.LastAccess = lastAccess
	return &this
}

// NewConnectorCredentialsWithDefaults instantiates a new ConnectorCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorCredentialsWithDefaults() *ConnectorCredentials {
	this := ConnectorCredentials{}
	return &this
}

// GetApiKey returns the ApiKey field value
func (o *ConnectorCredentials) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *ConnectorCredentials) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *ConnectorCredentials) SetApiKey(v string) {
	o.ApiKey = v
}

// GetApiSecret returns the ApiSecret field value
func (o *ConnectorCredentials) GetApiSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiSecret
}

// GetApiSecretOk returns a tuple with the ApiSecret field value
// and a boolean to check if the value has been set.
func (o *ConnectorCredentials) GetApiSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiSecret, true
}

// SetApiSecret sets field value
func (o *ConnectorCredentials) SetApiSecret(v string) {
	o.ApiSecret = v
}

// GetLastAccess returns the LastAccess field value
func (o *ConnectorCredentials) GetLastAccess() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastAccess
}

// GetLastAccessOk returns a tuple with the LastAccess field value
// and a boolean to check if the value has been set.
func (o *ConnectorCredentials) GetLastAccessOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastAccess, true
}

// SetLastAccess sets field value
func (o *ConnectorCredentials) SetLastAccess(v int64) {
	o.LastAccess = v
}

func (o ConnectorCredentials) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["api_key"] = o.ApiKey
	toSerialize["api_secret"] = o.ApiSecret
	toSerialize["last_access"] = o.LastAccess
	return toSerialize, nil
}

func (o *ConnectorCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"api_key",
		"api_secret",
		"last_access",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectorCredentials := _ConnectorCredentials{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectorCredentials)

	if err != nil {
		return err
	}

	*o = ConnectorCredentials(varConnectorCredentials)

	return err
}

type NullableConnectorCredentials struct {
	value *ConnectorCredentials
	isSet bool
}

func (v NullableConnectorCredentials) Get() *ConnectorCredentials {
	return v.value
}

func (v *NullableConnectorCredentials) Set(val *ConnectorCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorCredentials(val *ConnectorCredentials) *NullableConnectorCredentials {
	return &NullableConnectorCredentials{value: val, isSet: true}
}

func (v NullableConnectorCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
