/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// ReportResultTypeEnum the model 'ReportResultTypeEnum'
type ReportResultTypeEnum string

// List of ReportResultTypeEnum
const (
	REPORTRESULTTYPEENUM_OBJECT ReportResultTypeEnum = "OBJECT"
	REPORTRESULTTYPEENUM_TABLE  ReportResultTypeEnum = "TABLE"
)

// All allowed values of ReportResultTypeEnum enum
var AllowedReportResultTypeEnumEnumValues = []ReportResultTypeEnum{
	"OBJECT",
	"TABLE",
}

func (v *ReportResultTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportResultTypeEnum(value)
	for _, existing := range AllowedReportResultTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportResultTypeEnum", value)
}

// NewReportResultTypeEnumFromValue returns a pointer to a valid ReportResultTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportResultTypeEnumFromValue(v string) (*ReportResultTypeEnum, error) {
	ev := ReportResultTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportResultTypeEnum: valid values are %v", v, AllowedReportResultTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportResultTypeEnum) IsValid() bool {
	for _, existing := range AllowedReportResultTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReportResultTypeEnum value
func (v ReportResultTypeEnum) Ptr() *ReportResultTypeEnum {
	return &v
}

type NullableReportResultTypeEnum struct {
	value *ReportResultTypeEnum
	isSet bool
}

func (v NullableReportResultTypeEnum) Get() *ReportResultTypeEnum {
	return v.value
}

func (v *NullableReportResultTypeEnum) Set(val *ReportResultTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReportResultTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReportResultTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportResultTypeEnum(val *ReportResultTypeEnum) *NullableReportResultTypeEnum {
	return &NullableReportResultTypeEnum{value: val, isSet: true}
}

func (v NullableReportResultTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportResultTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
