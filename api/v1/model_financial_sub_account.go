/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FinancialSubAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinancialSubAccount{}

// FinancialSubAccount A sub-account of a financial account that can be used to track financial transactions mapped to a specific entity
type FinancialSubAccount struct {
	Account FinancialAccount `json:"account"`
	// The dimensions that are assigned to the sub-account
	Dimensions []AccountDimensionValue `json:"dimensions"`
}

type _FinancialSubAccount FinancialSubAccount

// NewFinancialSubAccount instantiates a new FinancialSubAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialSubAccount(account FinancialAccount, dimensions []AccountDimensionValue) *FinancialSubAccount {
	this := FinancialSubAccount{}
	this.Account = account
	this.Dimensions = dimensions
	return &this
}

// NewFinancialSubAccountWithDefaults instantiates a new FinancialSubAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialSubAccountWithDefaults() *FinancialSubAccount {
	this := FinancialSubAccount{}
	return &this
}

// GetAccount returns the Account field value
func (o *FinancialSubAccount) GetAccount() FinancialAccount {
	if o == nil {
		var ret FinancialAccount
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *FinancialSubAccount) GetAccountOk() (*FinancialAccount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *FinancialSubAccount) SetAccount(v FinancialAccount) {
	o.Account = v
}

// GetDimensions returns the Dimensions field value
func (o *FinancialSubAccount) GetDimensions() []AccountDimensionValue {
	if o == nil {
		var ret []AccountDimensionValue
		return ret
	}

	return o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value
// and a boolean to check if the value has been set.
func (o *FinancialSubAccount) GetDimensionsOk() ([]AccountDimensionValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dimensions, true
}

// SetDimensions sets field value
func (o *FinancialSubAccount) SetDimensions(v []AccountDimensionValue) {
	o.Dimensions = v
}

func (o FinancialSubAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinancialSubAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account"] = o.Account
	toSerialize["dimensions"] = o.Dimensions
	return toSerialize, nil
}

func (o *FinancialSubAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account",
		"dimensions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFinancialSubAccount := _FinancialSubAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFinancialSubAccount)

	if err != nil {
		return err
	}

	*o = FinancialSubAccount(varFinancialSubAccount)

	return err
}

type NullableFinancialSubAccount struct {
	value *FinancialSubAccount
	isSet bool
}

func (v NullableFinancialSubAccount) Get() *FinancialSubAccount {
	return v.value
}

func (v *NullableFinancialSubAccount) Set(val *FinancialSubAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialSubAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialSubAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialSubAccount(val *FinancialSubAccount) *NullableFinancialSubAccount {
	return &NullableFinancialSubAccount{value: val, isSet: true}
}

func (v NullableFinancialSubAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialSubAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
