/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// AppointmentSchedule struct for AppointmentSchedule
type AppointmentSchedule struct {
	// The unique identifier of the appointment window
	Id *string `json:"id,omitempty"`
	// The name of the appointment window
	Name *string `json:"name,omitempty"`
	// a map of values, where the key and values are strings
	Description *map[string]string   `json:"description,omitempty"`
	Template    *AppointmentTemplate `json:"template,omitempty"`
	// The duration of the appointment slot in minutes
	SlotDuration *int32 `json:"slot_duration,omitempty"`
	// The duration of the gap between appointments in minutes
	GapDuration *int32 `json:"gap_duration,omitempty"`
	// The color to use when displaying the appointment window in a calendar view
	Color *string `json:"color,omitempty"`
	// The appointment windows
	Windows []AppointmentWindow `json:"windows,omitempty"`
}

// NewAppointmentSchedule instantiates a new AppointmentSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppointmentSchedule() *AppointmentSchedule {
	this := AppointmentSchedule{}
	return &this
}

// NewAppointmentScheduleWithDefaults instantiates a new AppointmentSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppointmentScheduleWithDefaults() *AppointmentSchedule {
	this := AppointmentSchedule{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppointmentSchedule) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentSchedule) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppointmentSchedule) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AppointmentSchedule) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AppointmentSchedule) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentSchedule) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AppointmentSchedule) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AppointmentSchedule) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AppointmentSchedule) GetDescription() map[string]string {
	if o == nil || o.Description == nil {
		var ret map[string]string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentSchedule) GetDescriptionOk() (*map[string]string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AppointmentSchedule) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given map[string]string and assigns it to the Description field.
func (o *AppointmentSchedule) SetDescription(v map[string]string) {
	o.Description = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *AppointmentSchedule) GetTemplate() AppointmentTemplate {
	if o == nil || o.Template == nil {
		var ret AppointmentTemplate
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentSchedule) GetTemplateOk() (*AppointmentTemplate, bool) {
	if o == nil || o.Template == nil {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *AppointmentSchedule) HasTemplate() bool {
	if o != nil && o.Template != nil {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given AppointmentTemplate and assigns it to the Template field.
func (o *AppointmentSchedule) SetTemplate(v AppointmentTemplate) {
	o.Template = &v
}

// GetSlotDuration returns the SlotDuration field value if set, zero value otherwise.
func (o *AppointmentSchedule) GetSlotDuration() int32 {
	if o == nil || o.SlotDuration == nil {
		var ret int32
		return ret
	}
	return *o.SlotDuration
}

// GetSlotDurationOk returns a tuple with the SlotDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentSchedule) GetSlotDurationOk() (*int32, bool) {
	if o == nil || o.SlotDuration == nil {
		return nil, false
	}
	return o.SlotDuration, true
}

// HasSlotDuration returns a boolean if a field has been set.
func (o *AppointmentSchedule) HasSlotDuration() bool {
	if o != nil && o.SlotDuration != nil {
		return true
	}

	return false
}

// SetSlotDuration gets a reference to the given int32 and assigns it to the SlotDuration field.
func (o *AppointmentSchedule) SetSlotDuration(v int32) {
	o.SlotDuration = &v
}

// GetGapDuration returns the GapDuration field value if set, zero value otherwise.
func (o *AppointmentSchedule) GetGapDuration() int32 {
	if o == nil || o.GapDuration == nil {
		var ret int32
		return ret
	}
	return *o.GapDuration
}

// GetGapDurationOk returns a tuple with the GapDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentSchedule) GetGapDurationOk() (*int32, bool) {
	if o == nil || o.GapDuration == nil {
		return nil, false
	}
	return o.GapDuration, true
}

// HasGapDuration returns a boolean if a field has been set.
func (o *AppointmentSchedule) HasGapDuration() bool {
	if o != nil && o.GapDuration != nil {
		return true
	}

	return false
}

// SetGapDuration gets a reference to the given int32 and assigns it to the GapDuration field.
func (o *AppointmentSchedule) SetGapDuration(v int32) {
	o.GapDuration = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *AppointmentSchedule) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentSchedule) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *AppointmentSchedule) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *AppointmentSchedule) SetColor(v string) {
	o.Color = &v
}

// GetWindows returns the Windows field value if set, zero value otherwise.
func (o *AppointmentSchedule) GetWindows() []AppointmentWindow {
	if o == nil || o.Windows == nil {
		var ret []AppointmentWindow
		return ret
	}
	return o.Windows
}

// GetWindowsOk returns a tuple with the Windows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentSchedule) GetWindowsOk() ([]AppointmentWindow, bool) {
	if o == nil || o.Windows == nil {
		return nil, false
	}
	return o.Windows, true
}

// HasWindows returns a boolean if a field has been set.
func (o *AppointmentSchedule) HasWindows() bool {
	if o != nil && o.Windows != nil {
		return true
	}

	return false
}

// SetWindows gets a reference to the given []AppointmentWindow and assigns it to the Windows field.
func (o *AppointmentSchedule) SetWindows(v []AppointmentWindow) {
	o.Windows = v
}

func (o AppointmentSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Template != nil {
		toSerialize["template"] = o.Template
	}
	if o.SlotDuration != nil {
		toSerialize["slot_duration"] = o.SlotDuration
	}
	if o.GapDuration != nil {
		toSerialize["gap_duration"] = o.GapDuration
	}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.Windows != nil {
		toSerialize["windows"] = o.Windows
	}
	return json.Marshal(toSerialize)
}

type NullableAppointmentSchedule struct {
	value *AppointmentSchedule
	isSet bool
}

func (v NullableAppointmentSchedule) Get() *AppointmentSchedule {
	return v.value
}

func (v *NullableAppointmentSchedule) Set(val *AppointmentSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableAppointmentSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableAppointmentSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppointmentSchedule(val *AppointmentSchedule) *NullableAppointmentSchedule {
	return &NullableAppointmentSchedule{value: val, isSet: true}
}

func (v NullableAppointmentSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppointmentSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
