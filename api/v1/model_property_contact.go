/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// PropertyContact A contact that is linked to a property. Can either be made  available to tenants, or just used as internal reference.
type PropertyContact struct {
	// unique ID of this contact
	Id *string `json:"id,omitempty"`
	// human-friendly label, describing the relationship and context of the contact
	Label *string `json:"label,omitempty"`
	// identifies if the contact is visible to the tenants or on a public form
	Public  *bool            `json:"public,omitempty"`
	Contact *ServiceProvider `json:"contact,omitempty"`
	// the ID of the property for which the contact is maintained
	PropertyRef *string `json:"property_ref,omitempty"`
}

// NewPropertyContact instantiates a new PropertyContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyContact() *PropertyContact {
	this := PropertyContact{}
	return &this
}

// NewPropertyContactWithDefaults instantiates a new PropertyContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyContactWithDefaults() *PropertyContact {
	this := PropertyContact{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PropertyContact) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyContact) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PropertyContact) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PropertyContact) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *PropertyContact) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyContact) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *PropertyContact) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *PropertyContact) SetLabel(v string) {
	o.Label = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *PropertyContact) GetPublic() bool {
	if o == nil || o.Public == nil {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyContact) GetPublicOk() (*bool, bool) {
	if o == nil || o.Public == nil {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *PropertyContact) HasPublic() bool {
	if o != nil && o.Public != nil {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *PropertyContact) SetPublic(v bool) {
	o.Public = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *PropertyContact) GetContact() ServiceProvider {
	if o == nil || o.Contact == nil {
		var ret ServiceProvider
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyContact) GetContactOk() (*ServiceProvider, bool) {
	if o == nil || o.Contact == nil {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *PropertyContact) HasContact() bool {
	if o != nil && o.Contact != nil {
		return true
	}

	return false
}

// SetContact gets a reference to the given ServiceProvider and assigns it to the Contact field.
func (o *PropertyContact) SetContact(v ServiceProvider) {
	o.Contact = &v
}

// GetPropertyRef returns the PropertyRef field value if set, zero value otherwise.
func (o *PropertyContact) GetPropertyRef() string {
	if o == nil || o.PropertyRef == nil {
		var ret string
		return ret
	}
	return *o.PropertyRef
}

// GetPropertyRefOk returns a tuple with the PropertyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyContact) GetPropertyRefOk() (*string, bool) {
	if o == nil || o.PropertyRef == nil {
		return nil, false
	}
	return o.PropertyRef, true
}

// HasPropertyRef returns a boolean if a field has been set.
func (o *PropertyContact) HasPropertyRef() bool {
	if o != nil && o.PropertyRef != nil {
		return true
	}

	return false
}

// SetPropertyRef gets a reference to the given string and assigns it to the PropertyRef field.
func (o *PropertyContact) SetPropertyRef(v string) {
	o.PropertyRef = &v
}

func (o PropertyContact) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Public != nil {
		toSerialize["public"] = o.Public
	}
	if o.Contact != nil {
		toSerialize["contact"] = o.Contact
	}
	if o.PropertyRef != nil {
		toSerialize["property_ref"] = o.PropertyRef
	}
	return json.Marshal(toSerialize)
}

type NullablePropertyContact struct {
	value *PropertyContact
	isSet bool
}

func (v NullablePropertyContact) Get() *PropertyContact {
	return v.value
}

func (v *NullablePropertyContact) Set(val *PropertyContact) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyContact) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyContact(val *PropertyContact) *NullablePropertyContact {
	return &NullablePropertyContact{value: val, isSet: true}
}

func (v NullablePropertyContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
