/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ReportResultSchemaProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportResultSchemaProperty{}

// ReportResultSchemaProperty struct for ReportResultSchemaProperty
type ReportResultSchemaProperty struct {
	Id *string `json:"id,omitempty"`
	// a map of values, where the key and values are strings
	Label    *map[string]string `json:"label,omitempty"`
	Sequence *int32             `json:"sequence,omitempty"`
}

// NewReportResultSchemaProperty instantiates a new ReportResultSchemaProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportResultSchemaProperty() *ReportResultSchemaProperty {
	this := ReportResultSchemaProperty{}
	return &this
}

// NewReportResultSchemaPropertyWithDefaults instantiates a new ReportResultSchemaProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportResultSchemaPropertyWithDefaults() *ReportResultSchemaProperty {
	this := ReportResultSchemaProperty{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReportResultSchemaProperty) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportResultSchemaProperty) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReportResultSchemaProperty) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReportResultSchemaProperty) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ReportResultSchemaProperty) GetLabel() map[string]string {
	if o == nil || IsNil(o.Label) {
		var ret map[string]string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportResultSchemaProperty) GetLabelOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ReportResultSchemaProperty) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given map[string]string and assigns it to the Label field.
func (o *ReportResultSchemaProperty) SetLabel(v map[string]string) {
	o.Label = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ReportResultSchemaProperty) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportResultSchemaProperty) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ReportResultSchemaProperty) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *ReportResultSchemaProperty) SetSequence(v int32) {
	o.Sequence = &v
}

func (o ReportResultSchemaProperty) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportResultSchemaProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	return toSerialize, nil
}

type NullableReportResultSchemaProperty struct {
	value *ReportResultSchemaProperty
	isSet bool
}

func (v NullableReportResultSchemaProperty) Get() *ReportResultSchemaProperty {
	return v.value
}

func (v *NullableReportResultSchemaProperty) Set(val *ReportResultSchemaProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableReportResultSchemaProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableReportResultSchemaProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportResultSchemaProperty(val *ReportResultSchemaProperty) *NullableReportResultSchemaProperty {
	return &NullableReportResultSchemaProperty{value: val, isSet: true}
}

func (v NullableReportResultSchemaProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportResultSchemaProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
