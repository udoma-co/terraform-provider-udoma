/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CustomIDGenerator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomIDGenerator{}

// CustomIDGenerator struct for CustomIDGenerator
type CustomIDGenerator struct {
	// Unique and immutable ID attribute of the entity that is generated when  the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities  or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt int64 `json:"updated_at"`
	// The user friendly name of the ID generator.
	Name string `json:"name"`
	// A JS script code that will be used to generate the ID.
	GenerationScript string `json:"generation_script"`
	// The last generated ID. This is used to keep track of the last generated ID.
	LastGeneratedId *string `json:"last_generated_id,omitempty"`
}

type _CustomIDGenerator CustomIDGenerator

// NewCustomIDGenerator instantiates a new CustomIDGenerator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomIDGenerator(id string, createdAt int64, updatedAt int64, name string, generationScript string) *CustomIDGenerator {
	this := CustomIDGenerator{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Name = name
	this.GenerationScript = generationScript
	return &this
}

// NewCustomIDGeneratorWithDefaults instantiates a new CustomIDGenerator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomIDGeneratorWithDefaults() *CustomIDGenerator {
	this := CustomIDGenerator{}
	return &this
}

// GetId returns the Id field value
func (o *CustomIDGenerator) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomIDGenerator) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomIDGenerator) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CustomIDGenerator) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CustomIDGenerator) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CustomIDGenerator) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CustomIDGenerator) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CustomIDGenerator) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CustomIDGenerator) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetName returns the Name field value
func (o *CustomIDGenerator) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomIDGenerator) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomIDGenerator) SetName(v string) {
	o.Name = v
}

// GetGenerationScript returns the GenerationScript field value
func (o *CustomIDGenerator) GetGenerationScript() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GenerationScript
}

// GetGenerationScriptOk returns a tuple with the GenerationScript field value
// and a boolean to check if the value has been set.
func (o *CustomIDGenerator) GetGenerationScriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GenerationScript, true
}

// SetGenerationScript sets field value
func (o *CustomIDGenerator) SetGenerationScript(v string) {
	o.GenerationScript = v
}

// GetLastGeneratedId returns the LastGeneratedId field value if set, zero value otherwise.
func (o *CustomIDGenerator) GetLastGeneratedId() string {
	if o == nil || IsNil(o.LastGeneratedId) {
		var ret string
		return ret
	}
	return *o.LastGeneratedId
}

// GetLastGeneratedIdOk returns a tuple with the LastGeneratedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomIDGenerator) GetLastGeneratedIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastGeneratedId) {
		return nil, false
	}
	return o.LastGeneratedId, true
}

// HasLastGeneratedId returns a boolean if a field has been set.
func (o *CustomIDGenerator) HasLastGeneratedId() bool {
	if o != nil && !IsNil(o.LastGeneratedId) {
		return true
	}

	return false
}

// SetLastGeneratedId gets a reference to the given string and assigns it to the LastGeneratedId field.
func (o *CustomIDGenerator) SetLastGeneratedId(v string) {
	o.LastGeneratedId = &v
}

func (o CustomIDGenerator) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomIDGenerator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["name"] = o.Name
	toSerialize["generation_script"] = o.GenerationScript
	if !IsNil(o.LastGeneratedId) {
		toSerialize["last_generated_id"] = o.LastGeneratedId
	}
	return toSerialize, nil
}

func (o *CustomIDGenerator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"name",
		"generation_script",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomIDGenerator := _CustomIDGenerator{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomIDGenerator)

	if err != nil {
		return err
	}

	*o = CustomIDGenerator(varCustomIDGenerator)

	return err
}

type NullableCustomIDGenerator struct {
	value *CustomIDGenerator
	isSet bool
}

func (v NullableCustomIDGenerator) Get() *CustomIDGenerator {
	return v.value
}

func (v *NullableCustomIDGenerator) Set(val *CustomIDGenerator) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomIDGenerator) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomIDGenerator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomIDGenerator(val *CustomIDGenerator) *NullableCustomIDGenerator {
	return &NullableCustomIDGenerator{value: val, isSet: true}
}

func (v NullableCustomIDGenerator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomIDGenerator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
