/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// AccountDimensionReferenceTypeEnum the model 'AccountDimensionReferenceTypeEnum'
type AccountDimensionReferenceTypeEnum string

// List of AccountDimensionReferenceTypeEnum
const (
	ACCOUNTDIMENSIONREFERENCETYPEENUM_NONE             AccountDimensionReferenceTypeEnum = "none"
	ACCOUNTDIMENSIONREFERENCETYPEENUM_OWNER            AccountDimensionReferenceTypeEnum = "owner"
	ACCOUNTDIMENSIONREFERENCETYPEENUM_PROPERTY         AccountDimensionReferenceTypeEnum = "property"
	ACCOUNTDIMENSIONREFERENCETYPEENUM_SERVICE_PROVIDER AccountDimensionReferenceTypeEnum = "service_provider"
	ACCOUNTDIMENSIONREFERENCETYPEENUM_TENANT           AccountDimensionReferenceTypeEnum = "tenant"
	ACCOUNTDIMENSIONREFERENCETYPEENUM_TENANCY          AccountDimensionReferenceTypeEnum = "tenancy"
)

// All allowed values of AccountDimensionReferenceTypeEnum enum
var AllowedAccountDimensionReferenceTypeEnumEnumValues = []AccountDimensionReferenceTypeEnum{
	"none",
	"owner",
	"property",
	"service_provider",
	"tenant",
	"tenancy",
}

func (v *AccountDimensionReferenceTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountDimensionReferenceTypeEnum(value)
	for _, existing := range AllowedAccountDimensionReferenceTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountDimensionReferenceTypeEnum", value)
}

// NewAccountDimensionReferenceTypeEnumFromValue returns a pointer to a valid AccountDimensionReferenceTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountDimensionReferenceTypeEnumFromValue(v string) (*AccountDimensionReferenceTypeEnum, error) {
	ev := AccountDimensionReferenceTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountDimensionReferenceTypeEnum: valid values are %v", v, AllowedAccountDimensionReferenceTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountDimensionReferenceTypeEnum) IsValid() bool {
	for _, existing := range AllowedAccountDimensionReferenceTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountDimensionReferenceTypeEnum value
func (v AccountDimensionReferenceTypeEnum) Ptr() *AccountDimensionReferenceTypeEnum {
	return &v
}

type NullableAccountDimensionReferenceTypeEnum struct {
	value *AccountDimensionReferenceTypeEnum
	isSet bool
}

func (v NullableAccountDimensionReferenceTypeEnum) Get() *AccountDimensionReferenceTypeEnum {
	return v.value
}

func (v *NullableAccountDimensionReferenceTypeEnum) Set(val *AccountDimensionReferenceTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountDimensionReferenceTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountDimensionReferenceTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountDimensionReferenceTypeEnum(val *AccountDimensionReferenceTypeEnum) *NullableAccountDimensionReferenceTypeEnum {
	return &NullableAccountDimensionReferenceTypeEnum{value: val, isSet: true}
}

func (v NullableAccountDimensionReferenceTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountDimensionReferenceTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
