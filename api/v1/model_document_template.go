/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DocumentTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentTemplate{}

// DocumentTemplate A template for generating documents
type DocumentTemplate struct {
	// Unique and immutable ID attribute of the entity that is generated when  the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities  or to retrieve it from the backend.
	Id string `json:"id"`
	// The name of the template
	Name string `json:"name"`
	// A description of the template
	Description *string                 `json:"description,omitempty"`
	Options     DocumentTemplateOptions `json:"options"`
	// An optional JS expression to be used to compute the name of the template. If not set, the name of the template will be used for new documents.
	NameExpression *string `json:"name_expression,omitempty"`
	// The source of the template, used to generate the document
	Content string             `json:"content"`
	Inputs  NullableCustomForm `json:"inputs"`
	// The script we run to generate the object used in the template
	PlaceholdersScript *string                                       `json:"placeholders_script,omitempty"`
	Signatures         NullableDocumentTemplateSignatureConfguration `json:"signatures,omitempty"`
	// A flag indicating whether the entity is deleted. If the entity is deleted, it should not be returned in the results of a query, but it is still kept in the database as it is referenced by other entities.
	IsDeleted *bool `json:"is_deleted,omitempty"`
}

type _DocumentTemplate DocumentTemplate

// NewDocumentTemplate instantiates a new DocumentTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentTemplate(id string, name string, options DocumentTemplateOptions, content string, inputs NullableCustomForm) *DocumentTemplate {
	this := DocumentTemplate{}
	this.Id = id
	this.Name = name
	this.Options = options
	this.Content = content
	this.Inputs = inputs
	return &this
}

// NewDocumentTemplateWithDefaults instantiates a new DocumentTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentTemplateWithDefaults() *DocumentTemplate {
	this := DocumentTemplate{}
	return &this
}

// GetId returns the Id field value
func (o *DocumentTemplate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DocumentTemplate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DocumentTemplate) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DocumentTemplate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DocumentTemplate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DocumentTemplate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DocumentTemplate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentTemplate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DocumentTemplate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DocumentTemplate) SetDescription(v string) {
	o.Description = &v
}

// GetOptions returns the Options field value
func (o *DocumentTemplate) GetOptions() DocumentTemplateOptions {
	if o == nil {
		var ret DocumentTemplateOptions
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *DocumentTemplate) GetOptionsOk() (*DocumentTemplateOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Options, true
}

// SetOptions sets field value
func (o *DocumentTemplate) SetOptions(v DocumentTemplateOptions) {
	o.Options = v
}

// GetNameExpression returns the NameExpression field value if set, zero value otherwise.
func (o *DocumentTemplate) GetNameExpression() string {
	if o == nil || IsNil(o.NameExpression) {
		var ret string
		return ret
	}
	return *o.NameExpression
}

// GetNameExpressionOk returns a tuple with the NameExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentTemplate) GetNameExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.NameExpression) {
		return nil, false
	}
	return o.NameExpression, true
}

// HasNameExpression returns a boolean if a field has been set.
func (o *DocumentTemplate) HasNameExpression() bool {
	if o != nil && !IsNil(o.NameExpression) {
		return true
	}

	return false
}

// SetNameExpression gets a reference to the given string and assigns it to the NameExpression field.
func (o *DocumentTemplate) SetNameExpression(v string) {
	o.NameExpression = &v
}

// GetContent returns the Content field value
func (o *DocumentTemplate) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *DocumentTemplate) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *DocumentTemplate) SetContent(v string) {
	o.Content = v
}

// GetInputs returns the Inputs field value
// If the value is explicit nil, the zero value for CustomForm will be returned
func (o *DocumentTemplate) GetInputs() CustomForm {
	if o == nil || o.Inputs.Get() == nil {
		var ret CustomForm
		return ret
	}

	return *o.Inputs.Get()
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentTemplate) GetInputsOk() (*CustomForm, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs.Get(), o.Inputs.IsSet()
}

// SetInputs sets field value
func (o *DocumentTemplate) SetInputs(v CustomForm) {
	o.Inputs.Set(&v)
}

// GetPlaceholdersScript returns the PlaceholdersScript field value if set, zero value otherwise.
func (o *DocumentTemplate) GetPlaceholdersScript() string {
	if o == nil || IsNil(o.PlaceholdersScript) {
		var ret string
		return ret
	}
	return *o.PlaceholdersScript
}

// GetPlaceholdersScriptOk returns a tuple with the PlaceholdersScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentTemplate) GetPlaceholdersScriptOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceholdersScript) {
		return nil, false
	}
	return o.PlaceholdersScript, true
}

// HasPlaceholdersScript returns a boolean if a field has been set.
func (o *DocumentTemplate) HasPlaceholdersScript() bool {
	if o != nil && !IsNil(o.PlaceholdersScript) {
		return true
	}

	return false
}

// SetPlaceholdersScript gets a reference to the given string and assigns it to the PlaceholdersScript field.
func (o *DocumentTemplate) SetPlaceholdersScript(v string) {
	o.PlaceholdersScript = &v
}

// GetSignatures returns the Signatures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentTemplate) GetSignatures() DocumentTemplateSignatureConfguration {
	if o == nil || IsNil(o.Signatures.Get()) {
		var ret DocumentTemplateSignatureConfguration
		return ret
	}
	return *o.Signatures.Get()
}

// GetSignaturesOk returns a tuple with the Signatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentTemplate) GetSignaturesOk() (*DocumentTemplateSignatureConfguration, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signatures.Get(), o.Signatures.IsSet()
}

// HasSignatures returns a boolean if a field has been set.
func (o *DocumentTemplate) HasSignatures() bool {
	if o != nil && o.Signatures.IsSet() {
		return true
	}

	return false
}

// SetSignatures gets a reference to the given NullableDocumentTemplateSignatureConfguration and assigns it to the Signatures field.
func (o *DocumentTemplate) SetSignatures(v DocumentTemplateSignatureConfguration) {
	o.Signatures.Set(&v)
}

// SetSignaturesNil sets the value for Signatures to be an explicit nil
func (o *DocumentTemplate) SetSignaturesNil() {
	o.Signatures.Set(nil)
}

// UnsetSignatures ensures that no value is present for Signatures, not even an explicit nil
func (o *DocumentTemplate) UnsetSignatures() {
	o.Signatures.Unset()
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *DocumentTemplate) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentTemplate) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *DocumentTemplate) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *DocumentTemplate) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

func (o DocumentTemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["options"] = o.Options
	if !IsNil(o.NameExpression) {
		toSerialize["name_expression"] = o.NameExpression
	}
	toSerialize["content"] = o.Content
	toSerialize["inputs"] = o.Inputs.Get()
	if !IsNil(o.PlaceholdersScript) {
		toSerialize["placeholders_script"] = o.PlaceholdersScript
	}
	if o.Signatures.IsSet() {
		toSerialize["signatures"] = o.Signatures.Get()
	}
	if !IsNil(o.IsDeleted) {
		toSerialize["is_deleted"] = o.IsDeleted
	}
	return toSerialize, nil
}

func (o *DocumentTemplate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"options",
		"content",
		"inputs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentTemplate := _DocumentTemplate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentTemplate)

	if err != nil {
		return err
	}

	*o = DocumentTemplate(varDocumentTemplate)

	return err
}

type NullableDocumentTemplate struct {
	value *DocumentTemplate
	isSet bool
}

func (v NullableDocumentTemplate) Get() *DocumentTemplate {
	return v.value
}

func (v *NullableDocumentTemplate) Set(val *DocumentTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentTemplate(val *DocumentTemplate) *NullableDocumentTemplate {
	return &NullableDocumentTemplate{value: val, isSet: true}
}

func (v NullableDocumentTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
