/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the QueryPropertyHandoversRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryPropertyHandoversRequest{}

// QueryPropertyHandoversRequest struct for QueryPropertyHandoversRequest
type QueryPropertyHandoversRequest struct {
	Limit    *int32                      `json:"limit,omitempty"`
	Offset   *int32                      `json:"offset,omitempty"`
	Status   *PropertyHandoverStatusEnum `json:"status,omitempty"`
	Archived *QueryBooleanParameter      `json:"archived,omitempty"`
}

// NewQueryPropertyHandoversRequest instantiates a new QueryPropertyHandoversRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryPropertyHandoversRequest() *QueryPropertyHandoversRequest {
	this := QueryPropertyHandoversRequest{}
	return &this
}

// NewQueryPropertyHandoversRequestWithDefaults instantiates a new QueryPropertyHandoversRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryPropertyHandoversRequestWithDefaults() *QueryPropertyHandoversRequest {
	this := QueryPropertyHandoversRequest{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *QueryPropertyHandoversRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPropertyHandoversRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *QueryPropertyHandoversRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *QueryPropertyHandoversRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *QueryPropertyHandoversRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPropertyHandoversRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *QueryPropertyHandoversRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *QueryPropertyHandoversRequest) SetOffset(v int32) {
	o.Offset = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *QueryPropertyHandoversRequest) GetStatus() PropertyHandoverStatusEnum {
	if o == nil || IsNil(o.Status) {
		var ret PropertyHandoverStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPropertyHandoversRequest) GetStatusOk() (*PropertyHandoverStatusEnum, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *QueryPropertyHandoversRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PropertyHandoverStatusEnum and assigns it to the Status field.
func (o *QueryPropertyHandoversRequest) SetStatus(v PropertyHandoverStatusEnum) {
	o.Status = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *QueryPropertyHandoversRequest) GetArchived() QueryBooleanParameter {
	if o == nil || IsNil(o.Archived) {
		var ret QueryBooleanParameter
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPropertyHandoversRequest) GetArchivedOk() (*QueryBooleanParameter, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *QueryPropertyHandoversRequest) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given QueryBooleanParameter and assigns it to the Archived field.
func (o *QueryPropertyHandoversRequest) SetArchived(v QueryBooleanParameter) {
	o.Archived = &v
}

func (o QueryPropertyHandoversRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryPropertyHandoversRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	return toSerialize, nil
}

type NullableQueryPropertyHandoversRequest struct {
	value *QueryPropertyHandoversRequest
	isSet bool
}

func (v NullableQueryPropertyHandoversRequest) Get() *QueryPropertyHandoversRequest {
	return v.value
}

func (v *NullableQueryPropertyHandoversRequest) Set(val *QueryPropertyHandoversRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryPropertyHandoversRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryPropertyHandoversRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryPropertyHandoversRequest(val *QueryPropertyHandoversRequest) *NullableQueryPropertyHandoversRequest {
	return &NullableQueryPropertyHandoversRequest{value: val, isSet: true}
}

func (v NullableQueryPropertyHandoversRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryPropertyHandoversRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
