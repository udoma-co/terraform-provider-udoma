/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateCaseCommentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCaseCommentRequest{}

// CreateCaseCommentRequest Request that will create a new comment for a case
type CreateCaseCommentRequest struct {
	Content string `json:"content"`
	// list of attachments that should be linked to the comment
	Attachments []Attachment `json:"attachments,omitempty"`
	// List of paries that should have access to the comment
	Visibility []CaseParty `json:"visibility,omitempty"`
}

type _CreateCaseCommentRequest CreateCaseCommentRequest

// NewCreateCaseCommentRequest instantiates a new CreateCaseCommentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCaseCommentRequest(content string) *CreateCaseCommentRequest {
	this := CreateCaseCommentRequest{}
	this.Content = content
	return &this
}

// NewCreateCaseCommentRequestWithDefaults instantiates a new CreateCaseCommentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCaseCommentRequestWithDefaults() *CreateCaseCommentRequest {
	this := CreateCaseCommentRequest{}
	return &this
}

// GetContent returns the Content field value
func (o *CreateCaseCommentRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CreateCaseCommentRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CreateCaseCommentRequest) SetContent(v string) {
	o.Content = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *CreateCaseCommentRequest) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCaseCommentRequest) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *CreateCaseCommentRequest) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *CreateCaseCommentRequest) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *CreateCaseCommentRequest) GetVisibility() []CaseParty {
	if o == nil || IsNil(o.Visibility) {
		var ret []CaseParty
		return ret
	}
	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCaseCommentRequest) GetVisibilityOk() ([]CaseParty, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *CreateCaseCommentRequest) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given []CaseParty and assigns it to the Visibility field.
func (o *CreateCaseCommentRequest) SetVisibility(v []CaseParty) {
	o.Visibility = v
}

func (o CreateCaseCommentRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCaseCommentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	return toSerialize, nil
}

func (o *CreateCaseCommentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCaseCommentRequest := _CreateCaseCommentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCaseCommentRequest)

	if err != nil {
		return err
	}

	*o = CreateCaseCommentRequest(varCreateCaseCommentRequest)

	return err
}

type NullableCreateCaseCommentRequest struct {
	value *CreateCaseCommentRequest
	isSet bool
}

func (v NullableCreateCaseCommentRequest) Get() *CreateCaseCommentRequest {
	return v.value
}

func (v *NullableCreateCaseCommentRequest) Set(val *CreateCaseCommentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCaseCommentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCaseCommentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCaseCommentRequest(val *CreateCaseCommentRequest) *NullableCreateCaseCommentRequest {
	return &NullableCreateCaseCommentRequest{value: val, isSet: true}
}

func (v NullableCreateCaseCommentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCaseCommentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
