/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the QueryBankTransactionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryBankTransactionsResponse{}

// QueryBankTransactionsResponse The response to a query for transactions of a bank account
type QueryBankTransactionsResponse struct {
	// The starting balance of the account at the beginning of the query period
	BalanceStart *float32 `json:"balance_start,omitempty"`
	// The ending balance of the account at the end of the query period
	BalanceEnd   *float32          `json:"balance_end,omitempty"`
	Transactions []BankTransaction `json:"transactions,omitempty"`
}

// NewQueryBankTransactionsResponse instantiates a new QueryBankTransactionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryBankTransactionsResponse() *QueryBankTransactionsResponse {
	this := QueryBankTransactionsResponse{}
	return &this
}

// NewQueryBankTransactionsResponseWithDefaults instantiates a new QueryBankTransactionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryBankTransactionsResponseWithDefaults() *QueryBankTransactionsResponse {
	this := QueryBankTransactionsResponse{}
	return &this
}

// GetBalanceStart returns the BalanceStart field value if set, zero value otherwise.
func (o *QueryBankTransactionsResponse) GetBalanceStart() float32 {
	if o == nil || IsNil(o.BalanceStart) {
		var ret float32
		return ret
	}
	return *o.BalanceStart
}

// GetBalanceStartOk returns a tuple with the BalanceStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryBankTransactionsResponse) GetBalanceStartOk() (*float32, bool) {
	if o == nil || IsNil(o.BalanceStart) {
		return nil, false
	}
	return o.BalanceStart, true
}

// HasBalanceStart returns a boolean if a field has been set.
func (o *QueryBankTransactionsResponse) HasBalanceStart() bool {
	if o != nil && !IsNil(o.BalanceStart) {
		return true
	}

	return false
}

// SetBalanceStart gets a reference to the given float32 and assigns it to the BalanceStart field.
func (o *QueryBankTransactionsResponse) SetBalanceStart(v float32) {
	o.BalanceStart = &v
}

// GetBalanceEnd returns the BalanceEnd field value if set, zero value otherwise.
func (o *QueryBankTransactionsResponse) GetBalanceEnd() float32 {
	if o == nil || IsNil(o.BalanceEnd) {
		var ret float32
		return ret
	}
	return *o.BalanceEnd
}

// GetBalanceEndOk returns a tuple with the BalanceEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryBankTransactionsResponse) GetBalanceEndOk() (*float32, bool) {
	if o == nil || IsNil(o.BalanceEnd) {
		return nil, false
	}
	return o.BalanceEnd, true
}

// HasBalanceEnd returns a boolean if a field has been set.
func (o *QueryBankTransactionsResponse) HasBalanceEnd() bool {
	if o != nil && !IsNil(o.BalanceEnd) {
		return true
	}

	return false
}

// SetBalanceEnd gets a reference to the given float32 and assigns it to the BalanceEnd field.
func (o *QueryBankTransactionsResponse) SetBalanceEnd(v float32) {
	o.BalanceEnd = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *QueryBankTransactionsResponse) GetTransactions() []BankTransaction {
	if o == nil || IsNil(o.Transactions) {
		var ret []BankTransaction
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryBankTransactionsResponse) GetTransactionsOk() ([]BankTransaction, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *QueryBankTransactionsResponse) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []BankTransaction and assigns it to the Transactions field.
func (o *QueryBankTransactionsResponse) SetTransactions(v []BankTransaction) {
	o.Transactions = v
}

func (o QueryBankTransactionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryBankTransactionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BalanceStart) {
		toSerialize["balance_start"] = o.BalanceStart
	}
	if !IsNil(o.BalanceEnd) {
		toSerialize["balance_end"] = o.BalanceEnd
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	return toSerialize, nil
}

type NullableQueryBankTransactionsResponse struct {
	value *QueryBankTransactionsResponse
	isSet bool
}

func (v NullableQueryBankTransactionsResponse) Get() *QueryBankTransactionsResponse {
	return v.value
}

func (v *NullableQueryBankTransactionsResponse) Set(val *QueryBankTransactionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryBankTransactionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryBankTransactionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryBankTransactionsResponse(val *QueryBankTransactionsResponse) *NullableQueryBankTransactionsResponse {
	return &NullableQueryBankTransactionsResponse{value: val, isSet: true}
}

func (v NullableQueryBankTransactionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryBankTransactionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
