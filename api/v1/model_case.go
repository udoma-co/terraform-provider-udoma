/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Case type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Case{}

// Case Case represents a single case, typically raised by a tenant
type Case struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt int64 `json:"updated_at"`
	// Reference to property
	PropertyRef     *string  `json:"property_ref,omitempty"`
	PropertyAddress *Address `json:"property_address,omitempty"`
	// Input provided by the user when updating the case as a key-value map
	Data map[string]interface{} `json:"data"`
	Name string                 `json:"name"`
	// The ID of the case template used to create this case
	TemplateRef *string        `json:"template_ref,omitempty"`
	Status      CaseStatusEnum `json:"status"`
	// Indicates if the case has been archived
	Archived *bool         `json:"archived,omitempty"`
	Reporter *ContactData  `json:"reporter,omitempty"`
	Assignee *CaseAssignee `json:"assignee,omitempty"`
	// List of all accounts that have access to the case (e.g. manager, tenenat, and service provider)
	Parties []CaseParty `json:"parties,omitempty"`
	// List of all status changes. Latest one is the current one
	StatusHistory []CaseStatus  `json:"status_history,omitempty"`
	Comments      []CaseComment `json:"comments,omitempty"`
	// List of feedback that was provided by the parties when changing the status of the case
	Feedback []CaseFeedbackEntry `json:"feedback,omitempty"`
}

type _Case Case

// NewCase instantiates a new Case object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCase(id string, createdAt int64, updatedAt int64, data map[string]interface{}, name string, status CaseStatusEnum) *Case {
	this := Case{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Data = data
	this.Name = name
	this.Status = status
	return &this
}

// NewCaseWithDefaults instantiates a new Case object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaseWithDefaults() *Case {
	this := Case{}
	return &this
}

// GetId returns the Id field value
func (o *Case) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Case) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Case) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Case) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Case) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Case) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Case) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Case) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Case) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetPropertyRef returns the PropertyRef field value if set, zero value otherwise.
func (o *Case) GetPropertyRef() string {
	if o == nil || IsNil(o.PropertyRef) {
		var ret string
		return ret
	}
	return *o.PropertyRef
}

// GetPropertyRefOk returns a tuple with the PropertyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetPropertyRefOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyRef) {
		return nil, false
	}
	return o.PropertyRef, true
}

// HasPropertyRef returns a boolean if a field has been set.
func (o *Case) HasPropertyRef() bool {
	if o != nil && !IsNil(o.PropertyRef) {
		return true
	}

	return false
}

// SetPropertyRef gets a reference to the given string and assigns it to the PropertyRef field.
func (o *Case) SetPropertyRef(v string) {
	o.PropertyRef = &v
}

// GetPropertyAddress returns the PropertyAddress field value if set, zero value otherwise.
func (o *Case) GetPropertyAddress() Address {
	if o == nil || IsNil(o.PropertyAddress) {
		var ret Address
		return ret
	}
	return *o.PropertyAddress
}

// GetPropertyAddressOk returns a tuple with the PropertyAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetPropertyAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.PropertyAddress) {
		return nil, false
	}
	return o.PropertyAddress, true
}

// HasPropertyAddress returns a boolean if a field has been set.
func (o *Case) HasPropertyAddress() bool {
	if o != nil && !IsNil(o.PropertyAddress) {
		return true
	}

	return false
}

// SetPropertyAddress gets a reference to the given Address and assigns it to the PropertyAddress field.
func (o *Case) SetPropertyAddress(v Address) {
	o.PropertyAddress = &v
}

// GetData returns the Data field value
func (o *Case) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Case) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Case) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetName returns the Name field value
func (o *Case) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Case) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Case) SetName(v string) {
	o.Name = v
}

// GetTemplateRef returns the TemplateRef field value if set, zero value otherwise.
func (o *Case) GetTemplateRef() string {
	if o == nil || IsNil(o.TemplateRef) {
		var ret string
		return ret
	}
	return *o.TemplateRef
}

// GetTemplateRefOk returns a tuple with the TemplateRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetTemplateRefOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateRef) {
		return nil, false
	}
	return o.TemplateRef, true
}

// HasTemplateRef returns a boolean if a field has been set.
func (o *Case) HasTemplateRef() bool {
	if o != nil && !IsNil(o.TemplateRef) {
		return true
	}

	return false
}

// SetTemplateRef gets a reference to the given string and assigns it to the TemplateRef field.
func (o *Case) SetTemplateRef(v string) {
	o.TemplateRef = &v
}

// GetStatus returns the Status field value
func (o *Case) GetStatus() CaseStatusEnum {
	if o == nil {
		var ret CaseStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Case) GetStatusOk() (*CaseStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Case) SetStatus(v CaseStatusEnum) {
	o.Status = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *Case) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *Case) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *Case) SetArchived(v bool) {
	o.Archived = &v
}

// GetReporter returns the Reporter field value if set, zero value otherwise.
func (o *Case) GetReporter() ContactData {
	if o == nil || IsNil(o.Reporter) {
		var ret ContactData
		return ret
	}
	return *o.Reporter
}

// GetReporterOk returns a tuple with the Reporter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetReporterOk() (*ContactData, bool) {
	if o == nil || IsNil(o.Reporter) {
		return nil, false
	}
	return o.Reporter, true
}

// HasReporter returns a boolean if a field has been set.
func (o *Case) HasReporter() bool {
	if o != nil && !IsNil(o.Reporter) {
		return true
	}

	return false
}

// SetReporter gets a reference to the given ContactData and assigns it to the Reporter field.
func (o *Case) SetReporter(v ContactData) {
	o.Reporter = &v
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *Case) GetAssignee() CaseAssignee {
	if o == nil || IsNil(o.Assignee) {
		var ret CaseAssignee
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetAssigneeOk() (*CaseAssignee, bool) {
	if o == nil || IsNil(o.Assignee) {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *Case) HasAssignee() bool {
	if o != nil && !IsNil(o.Assignee) {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given CaseAssignee and assigns it to the Assignee field.
func (o *Case) SetAssignee(v CaseAssignee) {
	o.Assignee = &v
}

// GetParties returns the Parties field value if set, zero value otherwise.
func (o *Case) GetParties() []CaseParty {
	if o == nil || IsNil(o.Parties) {
		var ret []CaseParty
		return ret
	}
	return o.Parties
}

// GetPartiesOk returns a tuple with the Parties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetPartiesOk() ([]CaseParty, bool) {
	if o == nil || IsNil(o.Parties) {
		return nil, false
	}
	return o.Parties, true
}

// HasParties returns a boolean if a field has been set.
func (o *Case) HasParties() bool {
	if o != nil && !IsNil(o.Parties) {
		return true
	}

	return false
}

// SetParties gets a reference to the given []CaseParty and assigns it to the Parties field.
func (o *Case) SetParties(v []CaseParty) {
	o.Parties = v
}

// GetStatusHistory returns the StatusHistory field value if set, zero value otherwise.
func (o *Case) GetStatusHistory() []CaseStatus {
	if o == nil || IsNil(o.StatusHistory) {
		var ret []CaseStatus
		return ret
	}
	return o.StatusHistory
}

// GetStatusHistoryOk returns a tuple with the StatusHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetStatusHistoryOk() ([]CaseStatus, bool) {
	if o == nil || IsNil(o.StatusHistory) {
		return nil, false
	}
	return o.StatusHistory, true
}

// HasStatusHistory returns a boolean if a field has been set.
func (o *Case) HasStatusHistory() bool {
	if o != nil && !IsNil(o.StatusHistory) {
		return true
	}

	return false
}

// SetStatusHistory gets a reference to the given []CaseStatus and assigns it to the StatusHistory field.
func (o *Case) SetStatusHistory(v []CaseStatus) {
	o.StatusHistory = v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Case) GetComments() []CaseComment {
	if o == nil || IsNil(o.Comments) {
		var ret []CaseComment
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetCommentsOk() ([]CaseComment, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Case) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []CaseComment and assigns it to the Comments field.
func (o *Case) SetComments(v []CaseComment) {
	o.Comments = v
}

// GetFeedback returns the Feedback field value if set, zero value otherwise.
func (o *Case) GetFeedback() []CaseFeedbackEntry {
	if o == nil || IsNil(o.Feedback) {
		var ret []CaseFeedbackEntry
		return ret
	}
	return o.Feedback
}

// GetFeedbackOk returns a tuple with the Feedback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Case) GetFeedbackOk() ([]CaseFeedbackEntry, bool) {
	if o == nil || IsNil(o.Feedback) {
		return nil, false
	}
	return o.Feedback, true
}

// HasFeedback returns a boolean if a field has been set.
func (o *Case) HasFeedback() bool {
	if o != nil && !IsNil(o.Feedback) {
		return true
	}

	return false
}

// SetFeedback gets a reference to the given []CaseFeedbackEntry and assigns it to the Feedback field.
func (o *Case) SetFeedback(v []CaseFeedbackEntry) {
	o.Feedback = v
}

func (o Case) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Case) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	if !IsNil(o.PropertyRef) {
		toSerialize["property_ref"] = o.PropertyRef
	}
	if !IsNil(o.PropertyAddress) {
		toSerialize["property_address"] = o.PropertyAddress
	}
	toSerialize["data"] = o.Data
	toSerialize["name"] = o.Name
	if !IsNil(o.TemplateRef) {
		toSerialize["template_ref"] = o.TemplateRef
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Reporter) {
		toSerialize["reporter"] = o.Reporter
	}
	if !IsNil(o.Assignee) {
		toSerialize["assignee"] = o.Assignee
	}
	if !IsNil(o.Parties) {
		toSerialize["parties"] = o.Parties
	}
	if !IsNil(o.StatusHistory) {
		toSerialize["status_history"] = o.StatusHistory
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Feedback) {
		toSerialize["feedback"] = o.Feedback
	}
	return toSerialize, nil
}

func (o *Case) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"data",
		"name",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCase := _Case{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCase)

	if err != nil {
		return err
	}

	*o = Case(varCase)

	return err
}

type NullableCase struct {
	value *Case
	isSet bool
}

func (v NullableCase) Get() *Case {
	return v.value
}

func (v *NullableCase) Set(val *Case) {
	v.value = val
	v.isSet = true
}

func (v NullableCase) IsSet() bool {
	return v.isSet
}

func (v *NullableCase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCase(val *Case) *NullableCase {
	return &NullableCase{value: val, isSet: true}
}

func (v NullableCase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
