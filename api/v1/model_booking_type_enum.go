/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// BookingTypeEnum the model 'BookingTypeEnum'
type BookingTypeEnum string

// List of BookingTypeEnum
const (
	BOOKINGTYPEENUM_CREDIT BookingTypeEnum = "credit"
	BOOKINGTYPEENUM_DEBIT  BookingTypeEnum = "debit"
)

// All allowed values of BookingTypeEnum enum
var AllowedBookingTypeEnumEnumValues = []BookingTypeEnum{
	"credit",
	"debit",
}

func (v *BookingTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BookingTypeEnum(value)
	for _, existing := range AllowedBookingTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BookingTypeEnum", value)
}

// NewBookingTypeEnumFromValue returns a pointer to a valid BookingTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBookingTypeEnumFromValue(v string) (*BookingTypeEnum, error) {
	ev := BookingTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BookingTypeEnum: valid values are %v", v, AllowedBookingTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BookingTypeEnum) IsValid() bool {
	for _, existing := range AllowedBookingTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BookingTypeEnum value
func (v BookingTypeEnum) Ptr() *BookingTypeEnum {
	return &v
}

type NullableBookingTypeEnum struct {
	value *BookingTypeEnum
	isSet bool
}

func (v NullableBookingTypeEnum) Get() *BookingTypeEnum {
	return v.value
}

func (v *NullableBookingTypeEnum) Set(val *BookingTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableBookingTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableBookingTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookingTypeEnum(val *BookingTypeEnum) *NullableBookingTypeEnum {
	return &NullableBookingTypeEnum{value: val, isSet: true}
}

func (v NullableBookingTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookingTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
