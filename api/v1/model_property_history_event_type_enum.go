/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// PropertyHistoryEventTypeEnum the model 'PropertyHistoryEventTypeEnum'
type PropertyHistoryEventTypeEnum string

// List of PropertyHistoryEventTypeEnum
const (
	PROPERTYHISTORYEVENTTYPEENUM_BUILT          PropertyHistoryEventTypeEnum = "BUILT"
	PROPERTYHISTORYEVENTTYPEENUM_RENTED         PropertyHistoryEventTypeEnum = "RENTED"
	PROPERTYHISTORYEVENTTYPEENUM_FREED          PropertyHistoryEventTypeEnum = "FREED"
	PROPERTYHISTORYEVENTTYPEENUM_RENOVATED      PropertyHistoryEventTypeEnum = "RENOVATED"
	PROPERTYHISTORYEVENTTYPEENUM_DAMAGE_OCCURED PropertyHistoryEventTypeEnum = "DAMAGE_OCCURED"
	PROPERTYHISTORYEVENTTYPEENUM_DAMAGE_FIXED   PropertyHistoryEventTypeEnum = "DAMAGE_FIXED"
	PROPERTYHISTORYEVENTTYPEENUM_CASE_RAISED    PropertyHistoryEventTypeEnum = "CASE_RAISED"
	PROPERTYHISTORYEVENTTYPEENUM_CASE_CLOSED    PropertyHistoryEventTypeEnum = "CASE_CLOSED"
	PROPERTYHISTORYEVENTTYPEENUM_OTHER          PropertyHistoryEventTypeEnum = "OTHER"
)

// All allowed values of PropertyHistoryEventTypeEnum enum
var AllowedPropertyHistoryEventTypeEnumEnumValues = []PropertyHistoryEventTypeEnum{
	"BUILT",
	"RENTED",
	"FREED",
	"RENOVATED",
	"DAMAGE_OCCURED",
	"DAMAGE_FIXED",
	"CASE_RAISED",
	"CASE_CLOSED",
	"OTHER",
}

func (v *PropertyHistoryEventTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PropertyHistoryEventTypeEnum(value)
	for _, existing := range AllowedPropertyHistoryEventTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PropertyHistoryEventTypeEnum", value)
}

// NewPropertyHistoryEventTypeEnumFromValue returns a pointer to a valid PropertyHistoryEventTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPropertyHistoryEventTypeEnumFromValue(v string) (*PropertyHistoryEventTypeEnum, error) {
	ev := PropertyHistoryEventTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PropertyHistoryEventTypeEnum: valid values are %v", v, AllowedPropertyHistoryEventTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PropertyHistoryEventTypeEnum) IsValid() bool {
	for _, existing := range AllowedPropertyHistoryEventTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PropertyHistoryEventTypeEnum value
func (v PropertyHistoryEventTypeEnum) Ptr() *PropertyHistoryEventTypeEnum {
	return &v
}

type NullablePropertyHistoryEventTypeEnum struct {
	value *PropertyHistoryEventTypeEnum
	isSet bool
}

func (v NullablePropertyHistoryEventTypeEnum) Get() *PropertyHistoryEventTypeEnum {
	return v.value
}

func (v *NullablePropertyHistoryEventTypeEnum) Set(val *PropertyHistoryEventTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyHistoryEventTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyHistoryEventTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyHistoryEventTypeEnum(val *PropertyHistoryEventTypeEnum) *NullablePropertyHistoryEventTypeEnum {
	return &NullablePropertyHistoryEventTypeEnum{value: val, isSet: true}
}

func (v NullablePropertyHistoryEventTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyHistoryEventTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
