/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DocumentRepository A structured list of documents attached to a property
type DocumentRepository struct {
	// the ID of the property for which the documents are uploaded
	PropRef *string                   `json:"prop_ref,omitempty"`
	Entries []DocumentRepositoryEntry `json:"entries,omitempty"`
}

// NewDocumentRepository instantiates a new DocumentRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentRepository() *DocumentRepository {
	this := DocumentRepository{}
	return &this
}

// NewDocumentRepositoryWithDefaults instantiates a new DocumentRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentRepositoryWithDefaults() *DocumentRepository {
	this := DocumentRepository{}
	return &this
}

// GetPropRef returns the PropRef field value if set, zero value otherwise.
func (o *DocumentRepository) GetPropRef() string {
	if o == nil || o.PropRef == nil {
		var ret string
		return ret
	}
	return *o.PropRef
}

// GetPropRefOk returns a tuple with the PropRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentRepository) GetPropRefOk() (*string, bool) {
	if o == nil || o.PropRef == nil {
		return nil, false
	}
	return o.PropRef, true
}

// HasPropRef returns a boolean if a field has been set.
func (o *DocumentRepository) HasPropRef() bool {
	if o != nil && o.PropRef != nil {
		return true
	}

	return false
}

// SetPropRef gets a reference to the given string and assigns it to the PropRef field.
func (o *DocumentRepository) SetPropRef(v string) {
	o.PropRef = &v
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *DocumentRepository) GetEntries() []DocumentRepositoryEntry {
	if o == nil || o.Entries == nil {
		var ret []DocumentRepositoryEntry
		return ret
	}
	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentRepository) GetEntriesOk() ([]DocumentRepositoryEntry, bool) {
	if o == nil || o.Entries == nil {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *DocumentRepository) HasEntries() bool {
	if o != nil && o.Entries != nil {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []DocumentRepositoryEntry and assigns it to the Entries field.
func (o *DocumentRepository) SetEntries(v []DocumentRepositoryEntry) {
	o.Entries = v
}

func (o DocumentRepository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PropRef != nil {
		toSerialize["prop_ref"] = o.PropRef
	}
	if o.Entries != nil {
		toSerialize["entries"] = o.Entries
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentRepository struct {
	value *DocumentRepository
	isSet bool
}

func (v NullableDocumentRepository) Get() *DocumentRepository {
	return v.value
}

func (v *NullableDocumentRepository) Set(val *DocumentRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentRepository(val *DocumentRepository) *NullableDocumentRepository {
	return &NullableDocumentRepository{value: val, isSet: true}
}

func (v NullableDocumentRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
