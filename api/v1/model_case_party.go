/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// CaseParty CaseParty indicates that the referenced account has access to the case.
type CaseParty struct {
	// the ID of the account that was granted access
	AccountRef int64             `json:"account_ref"`
	Type       CasePartyTypeEnum `json:"type"`
}

// NewCaseParty instantiates a new CaseParty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaseParty(accountRef int64, type_ CasePartyTypeEnum) *CaseParty {
	this := CaseParty{}
	this.AccountRef = accountRef
	this.Type = type_
	return &this
}

// NewCasePartyWithDefaults instantiates a new CaseParty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCasePartyWithDefaults() *CaseParty {
	this := CaseParty{}
	return &this
}

// GetAccountRef returns the AccountRef field value
func (o *CaseParty) GetAccountRef() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountRef
}

// GetAccountRefOk returns a tuple with the AccountRef field value
// and a boolean to check if the value has been set.
func (o *CaseParty) GetAccountRefOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountRef, true
}

// SetAccountRef sets field value
func (o *CaseParty) SetAccountRef(v int64) {
	o.AccountRef = v
}

// GetType returns the Type field value
func (o *CaseParty) GetType() CasePartyTypeEnum {
	if o == nil {
		var ret CasePartyTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CaseParty) GetTypeOk() (*CasePartyTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CaseParty) SetType(v CasePartyTypeEnum) {
	o.Type = v
}

func (o CaseParty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_ref"] = o.AccountRef
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableCaseParty struct {
	value *CaseParty
	isSet bool
}

func (v NullableCaseParty) Get() *CaseParty {
	return v.value
}

func (v *NullableCaseParty) Set(val *CaseParty) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseParty) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseParty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseParty(val *CaseParty) *NullableCaseParty {
	return &NullableCaseParty{value: val, isSet: true}
}

func (v NullableCaseParty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseParty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
