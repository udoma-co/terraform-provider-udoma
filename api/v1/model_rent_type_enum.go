/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// RentTypeEnum the model 'RentTypeEnum'
type RentTypeEnum string

// List of RentTypeEnum
const (
	RENTTYPEENUM_REGULAR   RentTypeEnum = "REGULAR"
	RENTTYPEENUM_INDEXED   RentTypeEnum = "INDEXED"
	RENTTYPEENUM_STAGGERED RentTypeEnum = "STAGGERED"
)

// All allowed values of RentTypeEnum enum
var AllowedRentTypeEnumEnumValues = []RentTypeEnum{
	"REGULAR",
	"INDEXED",
	"STAGGERED",
}

func (v *RentTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RentTypeEnum(value)
	for _, existing := range AllowedRentTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RentTypeEnum", value)
}

// NewRentTypeEnumFromValue returns a pointer to a valid RentTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRentTypeEnumFromValue(v string) (*RentTypeEnum, error) {
	ev := RentTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RentTypeEnum: valid values are %v", v, AllowedRentTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RentTypeEnum) IsValid() bool {
	for _, existing := range AllowedRentTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RentTypeEnum value
func (v RentTypeEnum) Ptr() *RentTypeEnum {
	return &v
}

type NullableRentTypeEnum struct {
	value *RentTypeEnum
	isSet bool
}

func (v NullableRentTypeEnum) Get() *RentTypeEnum {
	return v.value
}

func (v *NullableRentTypeEnum) Set(val *RentTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRentTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRentTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRentTypeEnum(val *RentTypeEnum) *NullableRentTypeEnum {
	return &NullableRentTypeEnum{value: val, isSet: true}
}

func (v NullableRentTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRentTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
