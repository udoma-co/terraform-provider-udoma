/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// CaseActionEnum the model 'CaseActionEnum'
type CaseActionEnum string

// List of CaseActionEnum
const (
	CASEACTIONENUM_CREATED        CaseActionEnum = "CREATED"
	CASEACTIONENUM_UPDATED        CaseActionEnum = "UPDATED"
	CASEACTIONENUM_COMMENTED      CaseActionEnum = "COMMENTED"
	CASEACTIONENUM_STATUS_CHANGED CaseActionEnum = "STATUS_CHANGED"
	CASEACTIONENUM_ASSIGNED       CaseActionEnum = "ASSIGNED"
	CASEACTIONENUM_ARCHIVED       CaseActionEnum = "ARCHIVED"
)

// All allowed values of CaseActionEnum enum
var AllowedCaseActionEnumEnumValues = []CaseActionEnum{
	"CREATED",
	"UPDATED",
	"COMMENTED",
	"STATUS_CHANGED",
	"ASSIGNED",
	"ARCHIVED",
}

func (v *CaseActionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CaseActionEnum(value)
	for _, existing := range AllowedCaseActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CaseActionEnum", value)
}

// NewCaseActionEnumFromValue returns a pointer to a valid CaseActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCaseActionEnumFromValue(v string) (*CaseActionEnum, error) {
	ev := CaseActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CaseActionEnum: valid values are %v", v, AllowedCaseActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CaseActionEnum) IsValid() bool {
	for _, existing := range AllowedCaseActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CaseActionEnum value
func (v CaseActionEnum) Ptr() *CaseActionEnum {
	return &v
}

type NullableCaseActionEnum struct {
	value *CaseActionEnum
	isSet bool
}

func (v NullableCaseActionEnum) Get() *CaseActionEnum {
	return v.value
}

func (v *NullableCaseActionEnum) Set(val *CaseActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCaseActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCaseActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaseActionEnum(val *CaseActionEnum) *NullableCaseActionEnum {
	return &NullableCaseActionEnum{value: val, isSet: true}
}

func (v NullableCaseActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaseActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
