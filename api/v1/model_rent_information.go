/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the RentInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RentInformation{}

// RentInformation the rent information for a property
type RentInformation struct {
	MonthlyRent *RentData `json:"monthly_rent,omitempty"`
	// the deposit amount
	Deposit  *float64      `json:"deposit,omitempty"`
	RentType *RentTypeEnum `json:"rent_type,omitempty"`
	// the month of the year when the rent index is applied
	IndexMonth *int64 `json:"index_month,omitempty"`
	// the number of points that the rent index is increased by
	IndexPoints *float64 `json:"index_points,omitempty"`
}

// NewRentInformation instantiates a new RentInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRentInformation() *RentInformation {
	this := RentInformation{}
	return &this
}

// NewRentInformationWithDefaults instantiates a new RentInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRentInformationWithDefaults() *RentInformation {
	this := RentInformation{}
	return &this
}

// GetMonthlyRent returns the MonthlyRent field value if set, zero value otherwise.
func (o *RentInformation) GetMonthlyRent() RentData {
	if o == nil || IsNil(o.MonthlyRent) {
		var ret RentData
		return ret
	}
	return *o.MonthlyRent
}

// GetMonthlyRentOk returns a tuple with the MonthlyRent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentInformation) GetMonthlyRentOk() (*RentData, bool) {
	if o == nil || IsNil(o.MonthlyRent) {
		return nil, false
	}
	return o.MonthlyRent, true
}

// HasMonthlyRent returns a boolean if a field has been set.
func (o *RentInformation) HasMonthlyRent() bool {
	if o != nil && !IsNil(o.MonthlyRent) {
		return true
	}

	return false
}

// SetMonthlyRent gets a reference to the given RentData and assigns it to the MonthlyRent field.
func (o *RentInformation) SetMonthlyRent(v RentData) {
	o.MonthlyRent = &v
}

// GetDeposit returns the Deposit field value if set, zero value otherwise.
func (o *RentInformation) GetDeposit() float64 {
	if o == nil || IsNil(o.Deposit) {
		var ret float64
		return ret
	}
	return *o.Deposit
}

// GetDepositOk returns a tuple with the Deposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentInformation) GetDepositOk() (*float64, bool) {
	if o == nil || IsNil(o.Deposit) {
		return nil, false
	}
	return o.Deposit, true
}

// HasDeposit returns a boolean if a field has been set.
func (o *RentInformation) HasDeposit() bool {
	if o != nil && !IsNil(o.Deposit) {
		return true
	}

	return false
}

// SetDeposit gets a reference to the given float64 and assigns it to the Deposit field.
func (o *RentInformation) SetDeposit(v float64) {
	o.Deposit = &v
}

// GetRentType returns the RentType field value if set, zero value otherwise.
func (o *RentInformation) GetRentType() RentTypeEnum {
	if o == nil || IsNil(o.RentType) {
		var ret RentTypeEnum
		return ret
	}
	return *o.RentType
}

// GetRentTypeOk returns a tuple with the RentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentInformation) GetRentTypeOk() (*RentTypeEnum, bool) {
	if o == nil || IsNil(o.RentType) {
		return nil, false
	}
	return o.RentType, true
}

// HasRentType returns a boolean if a field has been set.
func (o *RentInformation) HasRentType() bool {
	if o != nil && !IsNil(o.RentType) {
		return true
	}

	return false
}

// SetRentType gets a reference to the given RentTypeEnum and assigns it to the RentType field.
func (o *RentInformation) SetRentType(v RentTypeEnum) {
	o.RentType = &v
}

// GetIndexMonth returns the IndexMonth field value if set, zero value otherwise.
func (o *RentInformation) GetIndexMonth() int64 {
	if o == nil || IsNil(o.IndexMonth) {
		var ret int64
		return ret
	}
	return *o.IndexMonth
}

// GetIndexMonthOk returns a tuple with the IndexMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentInformation) GetIndexMonthOk() (*int64, bool) {
	if o == nil || IsNil(o.IndexMonth) {
		return nil, false
	}
	return o.IndexMonth, true
}

// HasIndexMonth returns a boolean if a field has been set.
func (o *RentInformation) HasIndexMonth() bool {
	if o != nil && !IsNil(o.IndexMonth) {
		return true
	}

	return false
}

// SetIndexMonth gets a reference to the given int64 and assigns it to the IndexMonth field.
func (o *RentInformation) SetIndexMonth(v int64) {
	o.IndexMonth = &v
}

// GetIndexPoints returns the IndexPoints field value if set, zero value otherwise.
func (o *RentInformation) GetIndexPoints() float64 {
	if o == nil || IsNil(o.IndexPoints) {
		var ret float64
		return ret
	}
	return *o.IndexPoints
}

// GetIndexPointsOk returns a tuple with the IndexPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RentInformation) GetIndexPointsOk() (*float64, bool) {
	if o == nil || IsNil(o.IndexPoints) {
		return nil, false
	}
	return o.IndexPoints, true
}

// HasIndexPoints returns a boolean if a field has been set.
func (o *RentInformation) HasIndexPoints() bool {
	if o != nil && !IsNil(o.IndexPoints) {
		return true
	}

	return false
}

// SetIndexPoints gets a reference to the given float64 and assigns it to the IndexPoints field.
func (o *RentInformation) SetIndexPoints(v float64) {
	o.IndexPoints = &v
}

func (o RentInformation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RentInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MonthlyRent) {
		toSerialize["monthly_rent"] = o.MonthlyRent
	}
	if !IsNil(o.Deposit) {
		toSerialize["deposit"] = o.Deposit
	}
	if !IsNil(o.RentType) {
		toSerialize["rent_type"] = o.RentType
	}
	if !IsNil(o.IndexMonth) {
		toSerialize["index_month"] = o.IndexMonth
	}
	if !IsNil(o.IndexPoints) {
		toSerialize["index_points"] = o.IndexPoints
	}
	return toSerialize, nil
}

type NullableRentInformation struct {
	value *RentInformation
	isSet bool
}

func (v NullableRentInformation) Get() *RentInformation {
	return v.value
}

func (v *NullableRentInformation) Set(val *RentInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableRentInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableRentInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRentInformation(val *RentInformation) *NullableRentInformation {
	return &NullableRentInformation{value: val, isSet: true}
}

func (v NullableRentInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRentInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
