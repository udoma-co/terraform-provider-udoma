/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AppointmentComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppointmentComment{}

// AppointmentComment struct for AppointmentComment
type AppointmentComment struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt int64 `json:"updated_at"`
	// A reference to the appointment that this comment belongs to.
	AppointmentRef string        `json:"appointment_ref"`
	Content        string        `json:"content"`
	Author         UserReference `json:"author"`
	// If true then the comment was deleted and should not be shown.
	Deleted *bool `json:"deleted,omitempty"`
	// list of attachments that were uploaded together with the comment
	Attachments []Attachment `json:"attachments,omitempty"`
}

type _AppointmentComment AppointmentComment

// NewAppointmentComment instantiates a new AppointmentComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppointmentComment(id string, createdAt int64, updatedAt int64, appointmentRef string, content string, author UserReference) *AppointmentComment {
	this := AppointmentComment{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.AppointmentRef = appointmentRef
	this.Content = content
	this.Author = author
	return &this
}

// NewAppointmentCommentWithDefaults instantiates a new AppointmentComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppointmentCommentWithDefaults() *AppointmentComment {
	this := AppointmentComment{}
	return &this
}

// GetId returns the Id field value
func (o *AppointmentComment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppointmentComment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppointmentComment) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *AppointmentComment) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *AppointmentComment) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *AppointmentComment) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *AppointmentComment) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *AppointmentComment) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *AppointmentComment) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetAppointmentRef returns the AppointmentRef field value
func (o *AppointmentComment) GetAppointmentRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppointmentRef
}

// GetAppointmentRefOk returns a tuple with the AppointmentRef field value
// and a boolean to check if the value has been set.
func (o *AppointmentComment) GetAppointmentRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppointmentRef, true
}

// SetAppointmentRef sets field value
func (o *AppointmentComment) SetAppointmentRef(v string) {
	o.AppointmentRef = v
}

// GetContent returns the Content field value
func (o *AppointmentComment) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *AppointmentComment) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *AppointmentComment) SetContent(v string) {
	o.Content = v
}

// GetAuthor returns the Author field value
func (o *AppointmentComment) GetAuthor() UserReference {
	if o == nil {
		var ret UserReference
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *AppointmentComment) GetAuthorOk() (*UserReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *AppointmentComment) SetAuthor(v UserReference) {
	o.Author = v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *AppointmentComment) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentComment) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *AppointmentComment) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *AppointmentComment) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *AppointmentComment) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppointmentComment) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *AppointmentComment) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *AppointmentComment) SetAttachments(v []Attachment) {
	o.Attachments = v
}

func (o AppointmentComment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppointmentComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["appointment_ref"] = o.AppointmentRef
	toSerialize["content"] = o.Content
	toSerialize["author"] = o.Author
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	return toSerialize, nil
}

func (o *AppointmentComment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"appointment_ref",
		"content",
		"author",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppointmentComment := _AppointmentComment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppointmentComment)

	if err != nil {
		return err
	}

	*o = AppointmentComment(varAppointmentComment)

	return err
}

type NullableAppointmentComment struct {
	value *AppointmentComment
	isSet bool
}

func (v NullableAppointmentComment) Get() *AppointmentComment {
	return v.value
}

func (v *NullableAppointmentComment) Set(val *AppointmentComment) {
	v.value = val
	v.isSet = true
}

func (v NullableAppointmentComment) IsSet() bool {
	return v.isSet
}

func (v *NullableAppointmentComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppointmentComment(val *AppointmentComment) *NullableAppointmentComment {
	return &NullableAppointmentComment{value: val, isSet: true}
}

func (v NullableAppointmentComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppointmentComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
