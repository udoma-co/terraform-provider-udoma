/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// TenantInfo Information about an individual potential tenant, collected via the public form
type TenantInfo struct {
	Id               *string      `json:"id,omitempty"`
	Title            *string      `json:"title,omitempty"`
	FirstName        *string      `json:"first_name,omitempty"`
	LastName         *string      `json:"last_name,omitempty"`
	MaritalStatus    *string      `json:"marital_status,omitempty"`
	DayOfBirth       *string      `json:"day_of_birth,omitempty"`
	PhoneNumber      *string      `json:"phone_number,omitempty"`
	Email            *string      `json:"email,omitempty"`
	Address          *Address     `json:"address,omitempty"`
	Profession       *string      `json:"profession,omitempty"`
	Employer         *string      `json:"employer,omitempty"`
	EmployementSince *int64       `json:"employement_since,omitempty"`
	EmployerContact  *ContactData `json:"employer_contact,omitempty"`
	NetIncome        *float32     `json:"net_income,omitempty"`
	IdUpload         *IDUpload    `json:"id_upload,omitempty"`
}

// NewTenantInfo instantiates a new TenantInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantInfo() *TenantInfo {
	this := TenantInfo{}
	return &this
}

// NewTenantInfoWithDefaults instantiates a new TenantInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantInfoWithDefaults() *TenantInfo {
	this := TenantInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TenantInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TenantInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TenantInfo) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *TenantInfo) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *TenantInfo) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *TenantInfo) SetTitle(v string) {
	o.Title = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *TenantInfo) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *TenantInfo) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *TenantInfo) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *TenantInfo) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *TenantInfo) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *TenantInfo) SetLastName(v string) {
	o.LastName = &v
}

// GetMaritalStatus returns the MaritalStatus field value if set, zero value otherwise.
func (o *TenantInfo) GetMaritalStatus() string {
	if o == nil || o.MaritalStatus == nil {
		var ret string
		return ret
	}
	return *o.MaritalStatus
}

// GetMaritalStatusOk returns a tuple with the MaritalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetMaritalStatusOk() (*string, bool) {
	if o == nil || o.MaritalStatus == nil {
		return nil, false
	}
	return o.MaritalStatus, true
}

// HasMaritalStatus returns a boolean if a field has been set.
func (o *TenantInfo) HasMaritalStatus() bool {
	if o != nil && o.MaritalStatus != nil {
		return true
	}

	return false
}

// SetMaritalStatus gets a reference to the given string and assigns it to the MaritalStatus field.
func (o *TenantInfo) SetMaritalStatus(v string) {
	o.MaritalStatus = &v
}

// GetDayOfBirth returns the DayOfBirth field value if set, zero value otherwise.
func (o *TenantInfo) GetDayOfBirth() string {
	if o == nil || o.DayOfBirth == nil {
		var ret string
		return ret
	}
	return *o.DayOfBirth
}

// GetDayOfBirthOk returns a tuple with the DayOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetDayOfBirthOk() (*string, bool) {
	if o == nil || o.DayOfBirth == nil {
		return nil, false
	}
	return o.DayOfBirth, true
}

// HasDayOfBirth returns a boolean if a field has been set.
func (o *TenantInfo) HasDayOfBirth() bool {
	if o != nil && o.DayOfBirth != nil {
		return true
	}

	return false
}

// SetDayOfBirth gets a reference to the given string and assigns it to the DayOfBirth field.
func (o *TenantInfo) SetDayOfBirth(v string) {
	o.DayOfBirth = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *TenantInfo) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *TenantInfo) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *TenantInfo) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *TenantInfo) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *TenantInfo) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *TenantInfo) SetEmail(v string) {
	o.Email = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *TenantInfo) GetAddress() Address {
	if o == nil || o.Address == nil {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetAddressOk() (*Address, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *TenantInfo) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *TenantInfo) SetAddress(v Address) {
	o.Address = &v
}

// GetProfession returns the Profession field value if set, zero value otherwise.
func (o *TenantInfo) GetProfession() string {
	if o == nil || o.Profession == nil {
		var ret string
		return ret
	}
	return *o.Profession
}

// GetProfessionOk returns a tuple with the Profession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetProfessionOk() (*string, bool) {
	if o == nil || o.Profession == nil {
		return nil, false
	}
	return o.Profession, true
}

// HasProfession returns a boolean if a field has been set.
func (o *TenantInfo) HasProfession() bool {
	if o != nil && o.Profession != nil {
		return true
	}

	return false
}

// SetProfession gets a reference to the given string and assigns it to the Profession field.
func (o *TenantInfo) SetProfession(v string) {
	o.Profession = &v
}

// GetEmployer returns the Employer field value if set, zero value otherwise.
func (o *TenantInfo) GetEmployer() string {
	if o == nil || o.Employer == nil {
		var ret string
		return ret
	}
	return *o.Employer
}

// GetEmployerOk returns a tuple with the Employer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetEmployerOk() (*string, bool) {
	if o == nil || o.Employer == nil {
		return nil, false
	}
	return o.Employer, true
}

// HasEmployer returns a boolean if a field has been set.
func (o *TenantInfo) HasEmployer() bool {
	if o != nil && o.Employer != nil {
		return true
	}

	return false
}

// SetEmployer gets a reference to the given string and assigns it to the Employer field.
func (o *TenantInfo) SetEmployer(v string) {
	o.Employer = &v
}

// GetEmployementSince returns the EmployementSince field value if set, zero value otherwise.
func (o *TenantInfo) GetEmployementSince() int64 {
	if o == nil || o.EmployementSince == nil {
		var ret int64
		return ret
	}
	return *o.EmployementSince
}

// GetEmployementSinceOk returns a tuple with the EmployementSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetEmployementSinceOk() (*int64, bool) {
	if o == nil || o.EmployementSince == nil {
		return nil, false
	}
	return o.EmployementSince, true
}

// HasEmployementSince returns a boolean if a field has been set.
func (o *TenantInfo) HasEmployementSince() bool {
	if o != nil && o.EmployementSince != nil {
		return true
	}

	return false
}

// SetEmployementSince gets a reference to the given int64 and assigns it to the EmployementSince field.
func (o *TenantInfo) SetEmployementSince(v int64) {
	o.EmployementSince = &v
}

// GetEmployerContact returns the EmployerContact field value if set, zero value otherwise.
func (o *TenantInfo) GetEmployerContact() ContactData {
	if o == nil || o.EmployerContact == nil {
		var ret ContactData
		return ret
	}
	return *o.EmployerContact
}

// GetEmployerContactOk returns a tuple with the EmployerContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetEmployerContactOk() (*ContactData, bool) {
	if o == nil || o.EmployerContact == nil {
		return nil, false
	}
	return o.EmployerContact, true
}

// HasEmployerContact returns a boolean if a field has been set.
func (o *TenantInfo) HasEmployerContact() bool {
	if o != nil && o.EmployerContact != nil {
		return true
	}

	return false
}

// SetEmployerContact gets a reference to the given ContactData and assigns it to the EmployerContact field.
func (o *TenantInfo) SetEmployerContact(v ContactData) {
	o.EmployerContact = &v
}

// GetNetIncome returns the NetIncome field value if set, zero value otherwise.
func (o *TenantInfo) GetNetIncome() float32 {
	if o == nil || o.NetIncome == nil {
		var ret float32
		return ret
	}
	return *o.NetIncome
}

// GetNetIncomeOk returns a tuple with the NetIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetNetIncomeOk() (*float32, bool) {
	if o == nil || o.NetIncome == nil {
		return nil, false
	}
	return o.NetIncome, true
}

// HasNetIncome returns a boolean if a field has been set.
func (o *TenantInfo) HasNetIncome() bool {
	if o != nil && o.NetIncome != nil {
		return true
	}

	return false
}

// SetNetIncome gets a reference to the given float32 and assigns it to the NetIncome field.
func (o *TenantInfo) SetNetIncome(v float32) {
	o.NetIncome = &v
}

// GetIdUpload returns the IdUpload field value if set, zero value otherwise.
func (o *TenantInfo) GetIdUpload() IDUpload {
	if o == nil || o.IdUpload == nil {
		var ret IDUpload
		return ret
	}
	return *o.IdUpload
}

// GetIdUploadOk returns a tuple with the IdUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetIdUploadOk() (*IDUpload, bool) {
	if o == nil || o.IdUpload == nil {
		return nil, false
	}
	return o.IdUpload, true
}

// HasIdUpload returns a boolean if a field has been set.
func (o *TenantInfo) HasIdUpload() bool {
	if o != nil && o.IdUpload != nil {
		return true
	}

	return false
}

// SetIdUpload gets a reference to the given IDUpload and assigns it to the IdUpload field.
func (o *TenantInfo) SetIdUpload(v IDUpload) {
	o.IdUpload = &v
}

func (o TenantInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.FirstName != nil {
		toSerialize["first_name"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["last_name"] = o.LastName
	}
	if o.MaritalStatus != nil {
		toSerialize["marital_status"] = o.MaritalStatus
	}
	if o.DayOfBirth != nil {
		toSerialize["day_of_birth"] = o.DayOfBirth
	}
	if o.PhoneNumber != nil {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Profession != nil {
		toSerialize["profession"] = o.Profession
	}
	if o.Employer != nil {
		toSerialize["employer"] = o.Employer
	}
	if o.EmployementSince != nil {
		toSerialize["employement_since"] = o.EmployementSince
	}
	if o.EmployerContact != nil {
		toSerialize["employer_contact"] = o.EmployerContact
	}
	if o.NetIncome != nil {
		toSerialize["net_income"] = o.NetIncome
	}
	if o.IdUpload != nil {
		toSerialize["id_upload"] = o.IdUpload
	}
	return json.Marshal(toSerialize)
}

type NullableTenantInfo struct {
	value *TenantInfo
	isSet bool
}

func (v NullableTenantInfo) Get() *TenantInfo {
	return v.value
}

func (v *NullableTenantInfo) Set(val *TenantInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantInfo(val *TenantInfo) *NullableTenantInfo {
	return &NullableTenantInfo{value: val, isSet: true}
}

func (v NullableTenantInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
