/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// CorrespondenceStatus The status of a correspondence
type CorrespondenceStatus string

// List of CorrespondenceStatus
const (
	CORRESPONDENCESTATUS_AWAITING  CorrespondenceStatus = "AWAITING"
	CORRESPONDENCESTATUS_RECORDED  CorrespondenceStatus = "RECORDED"
	CORRESPONDENCESTATUS_CANCELLED CorrespondenceStatus = "CANCELLED"
)

// All allowed values of CorrespondenceStatus enum
var AllowedCorrespondenceStatusEnumValues = []CorrespondenceStatus{
	"AWAITING",
	"RECORDED",
	"CANCELLED",
}

func (v *CorrespondenceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CorrespondenceStatus(value)
	for _, existing := range AllowedCorrespondenceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CorrespondenceStatus", value)
}

// NewCorrespondenceStatusFromValue returns a pointer to a valid CorrespondenceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCorrespondenceStatusFromValue(v string) (*CorrespondenceStatus, error) {
	ev := CorrespondenceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CorrespondenceStatus: valid values are %v", v, AllowedCorrespondenceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CorrespondenceStatus) IsValid() bool {
	for _, existing := range AllowedCorrespondenceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CorrespondenceStatus value
func (v CorrespondenceStatus) Ptr() *CorrespondenceStatus {
	return &v
}

type NullableCorrespondenceStatus struct {
	value *CorrespondenceStatus
	isSet bool
}

func (v NullableCorrespondenceStatus) Get() *CorrespondenceStatus {
	return v.value
}

func (v *NullableCorrespondenceStatus) Set(val *CorrespondenceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCorrespondenceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCorrespondenceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorrespondenceStatus(val *CorrespondenceStatus) *NullableCorrespondenceStatus {
	return &NullableCorrespondenceStatus{value: val, isSet: true}
}

func (v NullableCorrespondenceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorrespondenceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
