/*
Udoma

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Appointment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Appointment{}

// Appointment An appointment is a time slot that has already been booked by a user.
type Appointment struct {
	// Unique and immutable ID attribute of the entity that is generated when the instance is created. The ID is unique within the system accross all accounts and it can be used to reference the entity in other entities or to retrieve it from the backend.
	Id string `json:"id"`
	// The date and time the entity was created
	CreatedAt int64 `json:"created_at"`
	// The date and time the entity was last updated
	UpdatedAt int64 `json:"updated_at"`
	// Unique, immutable, alpha-numeric random code that is generated by the backend and can be used to access the entity via a publicly available URL. The code is unique within the system accross all accounts and it can be also be used to reference the entity in other entities or to retrieve it from the backend.
	Code string `json:"code"`
	// The timestamp of the beginning of the time slot
	StartTime int64 `json:"start_time"`
	// The timestamp of the end of the time slot
	EndTime int64 `json:"end_time"`
	// A descriptive name for the appointment, displayed on the calendar overview
	Name string `json:"name"`
	// The reference to the appointment schedule that was used to book this appointment
	ScheduleRef *string `json:"schedule_ref,omitempty"`
	// Whether the appointment has been confirmed or not
	Confirmed *bool         `json:"confirmed,omitempty"`
	Contacts  []ContactData `json:"contacts,omitempty"`
	// The reference to the property for which the appointment was booked
	PropertyRef     *string  `json:"property_ref,omitempty"`
	PropertyAddress *Address `json:"property_address,omitempty"`
	// Input provided by the user when booking the appointment
	Data map[string]interface{} `json:"data,omitempty"`
	// All comments including authors that were made for the appointment.
	Comments []AppointmentComment `json:"comments"`
}

type _Appointment Appointment

// NewAppointment instantiates a new Appointment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppointment(id string, createdAt int64, updatedAt int64, code string, startTime int64, endTime int64, name string, comments []AppointmentComment) *Appointment {
	this := Appointment{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Code = code
	this.StartTime = startTime
	this.EndTime = endTime
	this.Name = name
	this.Comments = comments
	return &this
}

// NewAppointmentWithDefaults instantiates a new Appointment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppointmentWithDefaults() *Appointment {
	this := Appointment{}
	return &this
}

// GetId returns the Id field value
func (o *Appointment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Appointment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Appointment) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Appointment) GetCreatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Appointment) GetCreatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Appointment) SetCreatedAt(v int64) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Appointment) GetUpdatedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Appointment) GetUpdatedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Appointment) SetUpdatedAt(v int64) {
	o.UpdatedAt = v
}

// GetCode returns the Code field value
func (o *Appointment) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Appointment) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Appointment) SetCode(v string) {
	o.Code = v
}

// GetStartTime returns the StartTime field value
func (o *Appointment) GetStartTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Appointment) GetStartTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Appointment) SetStartTime(v int64) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *Appointment) GetEndTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *Appointment) GetEndTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *Appointment) SetEndTime(v int64) {
	o.EndTime = v
}

// GetName returns the Name field value
func (o *Appointment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Appointment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Appointment) SetName(v string) {
	o.Name = v
}

// GetScheduleRef returns the ScheduleRef field value if set, zero value otherwise.
func (o *Appointment) GetScheduleRef() string {
	if o == nil || IsNil(o.ScheduleRef) {
		var ret string
		return ret
	}
	return *o.ScheduleRef
}

// GetScheduleRefOk returns a tuple with the ScheduleRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetScheduleRefOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleRef) {
		return nil, false
	}
	return o.ScheduleRef, true
}

// HasScheduleRef returns a boolean if a field has been set.
func (o *Appointment) HasScheduleRef() bool {
	if o != nil && !IsNil(o.ScheduleRef) {
		return true
	}

	return false
}

// SetScheduleRef gets a reference to the given string and assigns it to the ScheduleRef field.
func (o *Appointment) SetScheduleRef(v string) {
	o.ScheduleRef = &v
}

// GetConfirmed returns the Confirmed field value if set, zero value otherwise.
func (o *Appointment) GetConfirmed() bool {
	if o == nil || IsNil(o.Confirmed) {
		var ret bool
		return ret
	}
	return *o.Confirmed
}

// GetConfirmedOk returns a tuple with the Confirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.Confirmed) {
		return nil, false
	}
	return o.Confirmed, true
}

// HasConfirmed returns a boolean if a field has been set.
func (o *Appointment) HasConfirmed() bool {
	if o != nil && !IsNil(o.Confirmed) {
		return true
	}

	return false
}

// SetConfirmed gets a reference to the given bool and assigns it to the Confirmed field.
func (o *Appointment) SetConfirmed(v bool) {
	o.Confirmed = &v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *Appointment) GetContacts() []ContactData {
	if o == nil || IsNil(o.Contacts) {
		var ret []ContactData
		return ret
	}
	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetContactsOk() ([]ContactData, bool) {
	if o == nil || IsNil(o.Contacts) {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *Appointment) HasContacts() bool {
	if o != nil && !IsNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []ContactData and assigns it to the Contacts field.
func (o *Appointment) SetContacts(v []ContactData) {
	o.Contacts = v
}

// GetPropertyRef returns the PropertyRef field value if set, zero value otherwise.
func (o *Appointment) GetPropertyRef() string {
	if o == nil || IsNil(o.PropertyRef) {
		var ret string
		return ret
	}
	return *o.PropertyRef
}

// GetPropertyRefOk returns a tuple with the PropertyRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetPropertyRefOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyRef) {
		return nil, false
	}
	return o.PropertyRef, true
}

// HasPropertyRef returns a boolean if a field has been set.
func (o *Appointment) HasPropertyRef() bool {
	if o != nil && !IsNil(o.PropertyRef) {
		return true
	}

	return false
}

// SetPropertyRef gets a reference to the given string and assigns it to the PropertyRef field.
func (o *Appointment) SetPropertyRef(v string) {
	o.PropertyRef = &v
}

// GetPropertyAddress returns the PropertyAddress field value if set, zero value otherwise.
func (o *Appointment) GetPropertyAddress() Address {
	if o == nil || IsNil(o.PropertyAddress) {
		var ret Address
		return ret
	}
	return *o.PropertyAddress
}

// GetPropertyAddressOk returns a tuple with the PropertyAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetPropertyAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.PropertyAddress) {
		return nil, false
	}
	return o.PropertyAddress, true
}

// HasPropertyAddress returns a boolean if a field has been set.
func (o *Appointment) HasPropertyAddress() bool {
	if o != nil && !IsNil(o.PropertyAddress) {
		return true
	}

	return false
}

// SetPropertyAddress gets a reference to the given Address and assigns it to the PropertyAddress field.
func (o *Appointment) SetPropertyAddress(v Address) {
	o.PropertyAddress = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Appointment) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Appointment) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *Appointment) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetComments returns the Comments field value
func (o *Appointment) GetComments() []AppointmentComment {
	if o == nil {
		var ret []AppointmentComment
		return ret
	}

	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value
// and a boolean to check if the value has been set.
func (o *Appointment) GetCommentsOk() ([]AppointmentComment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comments, true
}

// SetComments sets field value
func (o *Appointment) SetComments(v []AppointmentComment) {
	o.Comments = v
}

func (o Appointment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Appointment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["code"] = o.Code
	toSerialize["start_time"] = o.StartTime
	toSerialize["end_time"] = o.EndTime
	toSerialize["name"] = o.Name
	if !IsNil(o.ScheduleRef) {
		toSerialize["schedule_ref"] = o.ScheduleRef
	}
	if !IsNil(o.Confirmed) {
		toSerialize["confirmed"] = o.Confirmed
	}
	if !IsNil(o.Contacts) {
		toSerialize["contacts"] = o.Contacts
	}
	if !IsNil(o.PropertyRef) {
		toSerialize["property_ref"] = o.PropertyRef
	}
	if !IsNil(o.PropertyAddress) {
		toSerialize["property_address"] = o.PropertyAddress
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	toSerialize["comments"] = o.Comments
	return toSerialize, nil
}

func (o *Appointment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"code",
		"start_time",
		"end_time",
		"name",
		"comments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppointment := _Appointment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppointment)

	if err != nil {
		return err
	}

	*o = Appointment(varAppointment)

	return err
}

type NullableAppointment struct {
	value *Appointment
	isSet bool
}

func (v NullableAppointment) Get() *Appointment {
	return v.value
}

func (v *NullableAppointment) Set(val *Appointment) {
	v.value = val
	v.isSet = true
}

func (v NullableAppointment) IsSet() bool {
	return v.isSet
}

func (v *NullableAppointment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppointment(val *Appointment) *NullableAppointment {
	return &NullableAppointment{value: val, isSet: true}
}

func (v NullableAppointment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppointment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
